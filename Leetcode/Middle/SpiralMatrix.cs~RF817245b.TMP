using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Leetcode.Middle
{
    public class SpiralMatrix
    {
        //把一个矩阵按照螺旋状前进生成字符串
        public static int[] Convert(int[,] matrix)
        {
            var list = new List<int>();
            var rowNum = matrix.GetLength(0);
            var colNum = matrix.GetLength(1);
            var repeat = Math.Max(rowNum, colNum) /2;
             
            for (var i = 0; i < repeat; i++)
            {
                //从左到右
                for (var col= i; col < rowNum - i; col++)
                {
                    list.Add(matrix[i, col]);
                }
                //从上到下
                for(var row = i + 1; row < colNum - i; row++)
                {
                    list.Add(matrix[row, colNum -i -1]);
                }

                //从左到右
                for(var col = colNum - i -1 ; col >= i; col--)
                {
                    list.Add(matrix[rowNum -i -1, col]);
                }

                //从上到下
                for(var row = rowNum-i -1; row >  i; row--)
                {
                    list.Add(matrix[row, i]);
                }
            }

            return list.ToArray();
        }

        //生成1到n平方数字的矩阵，按照螺旋状排列
        public static int[,] Generate(int n)
        {
            var matrix = new int[n,n];
            //先确定大循环几次，一次剥掉2层
            var num = 1;
            var repeat = n%2 == 0 ? n/2 : n/2 +1;
            for (var i = 0; i < repeat; i++)
            {
                //左上角的顶点00开始
                var x = i;
                var y = i;
                //从左到右
                while (y < n - i - 1)
                {
                    matrix[x, y] = num++;
                    y++;
                }
                //从上到下
                while (x < n - i - 1)
                {
                    matrix[x, y] =num++;
                    x++;
                }

                //从左到右
                while (y >= i + 1)
                {
                    matrix[x, y] = num++;
                    y--;
                }

                //从上到下
                while (x >= i + 1)
                {
                    matrix[x, y] = num++;
                    x--;
                }
            }

            return matrix;
        }
    }
}
