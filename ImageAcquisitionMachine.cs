using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Holly.Platform;
using Holly.AOI.Editor.Extensions;
using Holly.Threading.Tasks;
using System.Diagnostics;
using Holly.Threading;
using Holly.Metric;
using Holly.Imaging;
using Holly.Extensions;
using Holly.Common.Extensions;
using Microsoft.Practices.EnterpriseLibrary.Logging;
using System.ComponentModel;
using Microsoft.Expression.Framework;
using Holly.AOI.Editor.UserSettings;
using System.IO;
using System.Threading;
using Holly.AOI.Editor.Dialogs;
using System.Text.RegularExpressions;
using System.Xml;
using Holly.AOI.Editor.RepairDB;
using System.Windows;
using Holly.AOI.Editor.Shopfloor;
using Holly.AOI.Editor.Commands;
using Holly.AOI.Data;

namespace Holly.AOI.Editor.Machines
{
    public enum AutoRunOfflineMode
    {
        EntranceToExit = 0,
        EntranceToEntrance = 1,
        CyclingCapturing = 2,
        PCBOutAndReturnMode = 3,
        ExitToExit = 4,
    }

    class ImageAcquisitionMachine : INotifyPropertyChanged
    {
        SerialTaskManager _taskMgr = new SerialTaskManager("Image Acuisition Machine Task", 1);
        //SynchronizedQueue<Future<bool>> _requestQueue = new SynchronizedQueue<Future<bool>>();

        interface IStateVisitor<TContext, TResult>
        {
            TResult Visit(InitialState state, TContext context);
            TResult Visit(ExitState state, TContext context);
            TResult Visit(DesyncState state, TContext context);
            TResult Visit(ResetState state, TContext context);
            TResult Visit(ReadyState state, TContext context);
            TResult Visit(GoState state, TContext context);
            TResult Visit(RemoveBoardState state, TContext context);
            TResult Visit(PlaceBoardState state, TContext context);
        }
        abstract class State
        {
            public abstract TResult AcceptVisitor<TContext, TResult>(IStateVisitor<TContext, TResult> visitor, TContext context);
        }
        sealed class InitialState : State
        {
            public static readonly State Current = new InitialState();
            public override TResult AcceptVisitor<TContext, TResult>(IStateVisitor<TContext, TResult> visitor, TContext context)
            {
                return visitor.Visit(this, context);
            }
        }
        sealed class ExitState : State
        {
            public static readonly State Current = new ExitState();
            public override TResult AcceptVisitor<TContext, TResult>(IStateVisitor<TContext, TResult> visitor, TContext context)
            {
                return visitor.Visit(this, context);
            }
        }
        sealed class DesyncState : State
        {
            public static readonly State Current = new DesyncState();
            public override TResult AcceptVisitor<TContext, TResult>(IStateVisitor<TContext, TResult> visitor, TContext context)
            {
                return visitor.Visit(this, context);
            }
        }
        sealed class ResetState : State
        {
            public static readonly State Current = new ResetState();
            public static readonly State Forced = new ResetState { IsForced = true };
            public static readonly State Initial = new ResetState { IsInitial = true };
            public bool IsForced { get; private set; }
            public bool IsInitial { get; private set; }
            public override TResult AcceptVisitor<TContext, TResult>(IStateVisitor<TContext, TResult> visitor, TContext context)
            {
                return visitor.Visit(this, context);
            }
        }
        sealed class ReadyState : State
        {
            public static readonly State Current = new ReadyState();
            public static readonly State Forced = new ReadyState { IsForced = true };
            public bool IsForced { get; private set; }
            public override TResult AcceptVisitor<TContext, TResult>(IStateVisitor<TContext, TResult> visitor, TContext context)
            {
                return visitor.Visit(this, context);
            }
        }
        sealed class GoState : State
        {
            public static readonly State Current = new GoState();
            public override TResult AcceptVisitor<TContext, TResult>(IStateVisitor<TContext, TResult> visitor, TContext context)
            {
                return visitor.Visit(this, context);
            }
        }
        sealed class RemoveBoardState : State
        {
            public static readonly State Current = new RemoveBoardState();
            public override TResult AcceptVisitor<TContext, TResult>(IStateVisitor<TContext, TResult> visitor, TContext context)
            {
                return visitor.Visit(this, context);
            }
        }
        sealed class PlaceBoardState : State
        {
            public static readonly State Current = new PlaceBoardState();
            public override TResult AcceptVisitor<TContext, TResult>(IStateVisitor<TContext, TResult> visitor, TContext context)
            {
                return visitor.Visit(this, context);
            }
        }
        sealed class StateTransitionVisitor : IStateVisitor<ImageAcquisitionMachine, State>
        {
            public static readonly StateTransitionVisitor RequestMany = new StateTransitionVisitor();
            public static readonly StateTransitionVisitor RequestOne = new StateTransitionVisitor { IsRequestOne = true };
            public bool IsRequestOne { get; private set; }

            State ProcessButtons(State state, MachineInputs inputs, ImageAcquisitionMachine context, bool isDesync = false)
            {
                var softinputs = context.QueryInputStatus();

                if (inputs.EmergencyButton)
                //20230706  查找E05 【徐明武】 修改 Start
                //return DesyncState.Current;
                {
                    Holly.Log.HlLogger.Write("E05 => 2 inputs.EmergencyButton");
                    //Log4Net.Warn("E05 => 2 inputs.EmergencyButton");
                    return DesyncState.Current;
                }
                //20230706  查找E05 【徐明武】 修改 End 

                //if (inputs.SafeSensor)
                //    return state;
                if (!inputs.SafeSensor)
                {
                    if (inputs.GreenButton)
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI ==== > inputs.GreenButton ");
                        //Log4Net.Info("HOLLY AOI ==== > inputs.GreenButton ");
                        return isDesync ? ResetState.Current : ReadyState.Forced;
                    }
                    else if (inputs.YellowButton)
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI ==== > inputs.YellowButton ");
                        //Log4Net.Info("HOLLY AOI ==== > inputs.YellowButton ");
                        return ResetState.Forced;
                    }

                    if (state is DesyncState && MachineParams.Current.SerialPort.IsHuichuan && context._isNeedResetForce)
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI ==== > state is DesyncState && MachineParams.Current.SerialPort.IsHuichuan ");
                        //Log4Net.Info("HOLLY AOI ==== > state is DesyncState && MachineParams.Current.SerialPort.IsHuichuan ");
                        return ResetState.Forced;
                    }

                    if ((softinputs & InputStatus.Start) != 0)
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI ==== > (softinputs & InputStatus.Start)");
                        //Log4Net.Info("HOLLY AOI ==== > (softinputs & InputStatus.Start)");
                        return isDesync ? ResetState.Current : ReadyState.Forced;
                    }
                    if ((softinputs & InputStatus.Reset) != 0)
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI ==== > (softinputs & InputStatus.Reset)");
                        //Log4Net.Info("HOLLY AOI ==== > (softinputs & InputStatus.Reset)");
                        return ResetState.Forced;
                    }
                }
                return null;
            }

            public State Visit(InitialState state, ImageAcquisitionMachine context)
            {
                Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Visit(InitialState)");
                //Log4Net.Info("HOLLY AOI =====> ImageAcquisitionMachine.Visit(InitialState)");
                var m = context.GetMachine2();

                if (!m.Update())
                    return state;

                if (!m.CurrentInputs.EmergencyButton)
                {
                    if (MachineParams.Current.IsInlineMode && !this.IsRequestOne)
                    {
                        // 20211008 欧陆通MES优化 追加 Start
                        ExportOuLuTongShopfloorManager.Current.lastBarCode = "";
                        ExportOuLuTongShopfloorManager.Current.curBarCode = "";
                        // 20211008 欧陆通MES优化 追加 End

                        //20221206 重庆海尔Mes 追加 Start
                        ExportChongQingHaierShopfloorManager.Current.lastBarCode = "";
                        ExportChongQingHaierShopfloorManager.Current.curBarCode = "";
                        //20221206 重庆海尔Mes 追加 End

                        //20221117 惠州欣旺达Mes 追加 Start
                        ExportHZXWDShopfloorManager.Current.lastBarCode = "";
                        ExportHZXWDShopfloorManager.Current.curBarCode = "";
                        //20221117 惠州欣旺达Mes 追加 End

                        //20221205 抚州比亚迪Mes 追加 Start
                        ExportFuZhouBYDShopfloorManager.Current.ResetParam();
                        //20221205 抚州比亚迪Mes 追加 End

                        //20240619 烟台富士康MES 【范克文】 追加 Start
                        ExportYanTaiFoxconnShopfloorManager.Current.ResetParam();
                        //20240619 烟台富士康MES 【范克文】 追加 End

                        //20240717 越南广宁富士康MES 【范克文】 追加 Start
                        ExportYueNanGNFoxconnShopfloorManager.Current.ResetParam();
                        //20240717 越南广宁富士康MES 【范克文】 追加 End
                        return ResetState.Initial;
                    }
                    else
                    {
                        return ResetState.Current;
                    }
                }
                else
                {
                    //20230706  查找E05 【徐明武】 修改 Start
                    //return DesyncState.Current;
                    {
                        Holly.Log.HlLogger.Write("E05 => 96 ");
                        return DesyncState.Current;
                    }
                    //20230706  查找E05 【徐明武】 修改 End 
                }
            }

            public State Visit(ExitState state, ImageAcquisitionMachine context)
            {
                Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Visit(ExitState)");
                //Log4Net.Info("HOLLY AOI =====> ImageAcquisitionMachine.Visit(ExitState)");
                return state;
            }

            public State Visit(DesyncState state, ImageAcquisitionMachine context)
            {
                Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Visit(DesyncState)");
                //Log4Net.Info("HOLLY AOI =====> ImageAcquisitionMachine.Visit(DesyncState)");
                if (this.IsRequestOne)
                    return ExitState.Current;

                var m = App.Current.GetService<Machine>();
                // 20220525 清板在进板时清除当前板相关记录及文件 追加 Start
                ProcessDataNotWaitControl.Current.DesyncRemoveLastBoardInfo(1);
                // 20220525 清板在进板时清除当前板相关记录及文件 追加 End

                if (GlobalDataManager.Current.IsPLCError)
                {
                    Holly.Log.HlLogger.Write("HOLLY AOI =====> GlobalDataManager.Current.IsPLCError");
                    //Log4Net.Info("HOLLY AOI =====> GlobalDataManager.Current.IsPLCError");
                    try
                    {
                        //stop PLC always
                        m.stopPLC();
                    }
                    catch (Exception ex)
                    {
                        Thread.Sleep(100);
                        return state;
                    }
                    finally
                    {
                        m.stopPLC();
                    }

                    Holly.Log.HlLogger.Write("HOLLY AOI =====> m.stopPLC");
                    //Log4Net.Warn("HOLLY AOI =====> m.stopPLC");
                    Thread.Sleep(100);

                    // 20191205 廊坊报警信息 追加 Start
                    Holly.Log.HlLogger.Write("HOLLY AOI =====>Current State is  IsPLCError ..");
                    //Log4Net.Warn("HOLLY AOI =====>Current State is  IsPLCError ..");
                    GlobalDataManager.Current.IsNoBoardOutAlarming = true;
                    // 20191205 廊坊报警信息 追加 End

                    try
                    {
                        IBatchOperationInline op = m.CreateBatchOperationInline();
                        IOperationResult opResult = null;
                        op.ClearLampBlink();
                        op.SetRedAndBuzzer();
                        opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                        opResult.Wait();

                        Holly.Log.HlLogger.Write("HOLLY AOI =====> Set Buzzer True");
                        //Log4Net.Info("HOLLY AOI =====> Set Buzzer True");
                    }
                    catch (Exception ex)
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI =====> Set Buzzer True Exception = " + ex.ToString());
                        //Log4Net.Error("HOLLY AOI =====> Set Buzzer True Exception = " + ex.ToString());
                        Thread.Sleep(100);
                        return state;
                    }

                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                    ExportShanWeiWatchBoardBYDShopfloorManager.Current.WriteAlarm(1, Lang.UI.UI_Label_Timeout, DateTime.Now);
                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End
                    UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                    new Action(
                                        delegate ()
                                        {
                                            //20230717 log输出【ygs】 Start 
                                            ExportLogOuputManager.Current.OuputLog(11, Lang.UI.UI_Label_Timeout);
                                            //20230717 log输出【ygs】 End
                                            // 20240406 启动屏幕录制程序 追加 Start                                                    
                                            SocketScreenRecorder.Current.clientSendStart();
                                            // 20240406 启动屏幕录制程序 追加 End

                                            // 20250221 报警后提供排查原因 【ygs】 追加 Start
                                            string errorContent = ExportCommonShopfloorManager.Current.GetAlarmStr(2);
                                            // 20250221 报警后提供排查原因 【ygs】 追加 End

                                            IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                            messageManager.ShowError(Lang.UI.UI_Label_Timeout+errorContent);
                                        }));
                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                    ExportShanWeiWatchBoardBYDShopfloorManager.Current.UpdateAlarm(3, Lang.UI.UI_Label_Timeout, DateTime.Now);
                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End
                    IBatchOperationInline op2 = m.CreateBatchOperationInline();
                    IOperationResult opResult2 = null;

                    op2.SetBuzzer(false);
                    opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                    opResult2.Wait();

                    GlobalDataManager.Current.IsPLCError = false;

                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                    ExportShanWeiWatchBoardBYDShopfloorManager.Current.UpdateAlarm(3, Lang.UI.UI_Label_Timeout, DateTime.Now);
                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End

                }

                if (MachineParams.Current.IsInlineMode)
                {
                    if (!m.UpdateInline())
                    {
                        //GlobalDataManager.Current.IsPLCError = true;
                        return state;
                    }
                }
                else
                {
                    if (!m.Update())
                        return state;
                }

                if (m.CurrentInputs.EmergencyButton)
                {
                    // 20191205 廊坊报警信息 追加 Start
                    Holly.Log.HlLogger.Write("HOLLY AOI =====>Current Alarm is  Emergency E01 ..");
                    //Log4Net.Warn("HOLLY AOI =====>Current Alarm is  Emergency E01 ..");
                    GlobalDataManager.Current.IsNoBoardOutAlarming = true;
                    // 20191205 廊坊报警信息 追加 End

                    if (!context._isAlarm)
                    {
                        ExportEquipmentRunStatusManager.Current.Export("Alarm", "Emergency", "E01");
                        context._isAlarm = true;
                    }
                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                    ExportShanWeiWatchBoardBYDShopfloorManager.Current.WriteAlarm(1, Lang.UI.UI_Error_Emergency, DateTime.Now);
                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End
                    UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                    new Action(
                                        delegate ()
                                        {
                                            //20230717 log输出【ygs】 Start 
                                            ExportLogOuputManager.Current.OuputLog(11, Lang.UI.UI_Error_Emergency);
                                            //20230717 log输出【ygs】 End

                                            // 20240406 启动屏幕录制程序 追加 Start                                                    
                                            SocketScreenRecorder.Current.clientSendStart();
                                            // 20240406 启动屏幕录制程序 追加 End

                                            IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                            messageManager.ShowError(Lang.UI.UI_Error_Emergency);

                                            // 20240406 启动屏幕录制程序 追加 Start                                                    
                                            SocketScreenRecorder.Current.clientSendEnd();
                                            // 20240406 启动屏幕录制程序 追加 End
                                        }));

                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                    ExportShanWeiWatchBoardBYDShopfloorManager.Current.UpdateAlarm(3, Lang.UI.UI_Error_Emergency, DateTime.Now);
                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End
                    // 20241203 鹏鼎心跳报警结束 【ygs】 追加 Start
                    ExportEquipmentRunStatusManager.Current.EndExport("Alarm", "Emergency", "E01");
                    // 20241203 鹏鼎心跳报警结束 【ygs】 追加 End
                }


                if (MachineParams.Current.IsInlineMode)
                {
                    if (m.CurrentInputs.SafeSensor)
                    {
                        // 20191205 廊坊报警信息 追加 Start
                        Holly.Log.HlLogger.Write("HOLLY AOI =====>Current Alarm is Door Opened E02..");
                        //Log4Net.Warn("HOLLY AOI =====>Current Alarm is Door Opened E02..");
                        GlobalDataManager.Current.IsNoBoardOutAlarming = true;
                        // 20191205 廊坊报警信息 追加 End

                        if (!context._isAlarm)
                        {
                            ExportEquipmentRunStatusManager.Current.Export("Alarm", "Door Opened", "E02");
                            context._isAlarm = true;
                        }
                        // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                        ExportShanWeiWatchBoardBYDShopfloorManager.Current.WriteAlarm(1, Lang.UI.UI_Status_DoorOpened, DateTime.Now);
                        // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End
                        UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                        new Action(
                                            delegate ()
                                            {
                                                //20230717 log输出【ygs】 Start 
                                                ExportLogOuputManager.Current.OuputLog(11, Lang.UI.UI_Status_DoorOpened);
                                                //20230717 log输出【ygs】 End

                                                // 20240406 启动屏幕录制程序 追加 Start                                                    
                                                SocketScreenRecorder.Current.clientSendStart();
                                                // 20240406 启动屏幕录制程序 追加 End

                                                IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                                messageManager.ShowError(Lang.UI.UI_Status_DoorOpened);

                                                // 20240406 启动屏幕录制程序 追加 Start                                                    
                                                SocketScreenRecorder.Current.clientSendEnd();
                                                // 20240406 启动屏幕录制程序 追加 End
                                            }));
                        // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                        ExportShanWeiWatchBoardBYDShopfloorManager.Current.UpdateAlarm(3, Lang.UI.UI_Status_DoorOpened, DateTime.Now);
                        // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End
                        // 20241203 鹏鼎心跳报警结束 【ygs】 追加 Start
                        ExportEquipmentRunStatusManager.Current.EndExport("Alarm", "Door Opened", "E02");
                        // 20241203 鹏鼎心跳报警结束 【ygs】 追加 End
                    }

                    else if ((m.CommandStatusInline & CommandStatusInline.TimeOut) != 0)
                    {
                        // 20191205 廊坊报警信息 追加 Start
                        Holly.Log.HlLogger.Write("HOLLY AOI =====>Current Alarm is Timeout E03..");
                        //Log4Net.Warn("HOLLY AOI =====>Current Alarm is Timeout E03..");
                        GlobalDataManager.Current.IsNoBoardOutAlarming = true;
                        // 20191205 廊坊报警信息 追加 End

                        if (!context._isAlarm)
                        {
                            ExportEquipmentRunStatusManager.Current.Export("Alarm", "Timeout", "E03");
                            context._isAlarm = true;
                        }
                        // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                        ExportShanWeiWatchBoardBYDShopfloorManager.Current.WriteAlarm(1, Lang.UI.UI_Label_Timeout, DateTime.Now);
                        // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End
                        UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                        new Action(
                                            delegate ()
                                            {
                                                //20230717 log输出【ygs】 Start 
                                                ExportLogOuputManager.Current.OuputLog(11, Lang.UI.UI_Label_Timeout);
                                                //20230717 log输出【ygs】 End

                                                // 20240406 启动屏幕录制程序 追加 Start                                                    
                                                SocketScreenRecorder.Current.clientSendStart();
                                                // 20240406 启动屏幕录制程序 追加 End

                                                // 20250221 报警后提供排查原因 【ygs】 追加 Start
                                                string errorContent = ExportCommonShopfloorManager.Current.GetAlarmStr(2);
                                                // 20250221 报警后提供排查原因 【ygs】 追加 End

                                                IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                                messageManager.ShowError(Lang.UI.UI_Label_Timeout+errorContent);

                                                // 20240406 启动屏幕录制程序 追加 Start                                                    
                                                SocketScreenRecorder.Current.clientSendEnd();
                                                // 20240406 启动屏幕录制程序 追加 End

                                            }));
                        // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                        ExportShanWeiWatchBoardBYDShopfloorManager.Current.UpdateAlarm(3, Lang.UI.UI_Label_Timeout, DateTime.Now);
                        // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End
                        // 20241203 鹏鼎心跳报警结束 【ygs】 追加 Start
                        ExportEquipmentRunStatusManager.Current.EndExport("Alarm", "Timeout", "E03");
                        // 20241203 鹏鼎心跳报警结束 【ygs】 追加 End
                    }
                    else if ((m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                    {
                        // 20191205 廊坊报警信息 追加 Start
                        Holly.Log.HlLogger.Write("HOLLY AOI =====>Current Alarm is Two PCBs Inside E04..");
                        //Log4Net.Warn("HOLLY AOI =====>Current Alarm is Two PCBs Inside E04..");
                        GlobalDataManager.Current.IsNoBoardOutAlarming = true;
                        // 20191205 廊坊报警信息 追加 End

                        // 20210728 机内两块板直接清板板子掉地对应 修改 Start
                        //try
                        //{
                        //    IBatchOperationInline op = m.CreateBatchOperationInline();
                        //    IOperationResult opResult = null;
                        //    op.ClearLampBlink();
                        //    op.SetRedAndBuzzer();
                        //    opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                        //    opResult.Wait();

                        //    Holly.Log.HlLogger.Write("HOLLY AOI =====> Set Buzzer True");
                        //}
                        //catch (Exception ex)
                        //{
                        //    Holly.Log.HlLogger.Write("HOLLY AOI =====> Set Buzzer True Exception = " + ex.ToString());
                        //    Thread.Sleep(100);
                        //    return state;
                        //}

                        //if (!context._isAlarm)
                        //{
                        //    ExportEquipmentRunStatusManager.Current.Export("Alarm", "Two PCBs Inside", "E04");
                        //    context._isAlarm = true;
                        //}
                        //UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                        //                new Action(
                        //                    delegate()
                        //                    {
                        //                        IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                        //                        messageManager.ShowError(Lang.UI.UI_Label_TwoPCBInside);
                        //                    }));

                        //IBatchOperationInline op2 = m.CreateBatchOperationInline();
                        //IOperationResult opResult2 = null;

                        //op2.SetBuzzer(false);
                        //opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                        //opResult2.Wait();

                        // 20240406 启动屏幕录制程序 追加 Start                                                    
                        SocketScreenRecorder.Current.clientSendStart();
                        // 20240406 启动屏幕录制程序 追加 End

                        int ret = WaitSingleBoard(context);
                        if (ret != ConstUtils.InitState)
                        {
                            switch (ret)
                            {
                                case ConstUtils.DesyncState:
                                    //20230706 查找E05 【徐明武】修改 Start
                                    //return DesyncState.Current;
                                    {
                                        Holly.Log.HlLogger.Write("E05 => 1");
                                        return DesyncState.Current;
                                    }
                                //20230706 查找E05 【徐明武】修改 End
                                case ConstUtils.ExitState:
                                    return ExitState.Current;
                                case ConstUtils.GoState:
                                    return GoState.Current;
                            }
                        }
                        // 20210728 机内两块板直接清板板子掉地对应 修改 End

                        // 20240406 启动屏幕录制程序 追加 Start                                                    
                        SocketScreenRecorder.Current.clientSendEnd();
                        // 20240406 启动屏幕录制程序 追加 End

                    }
                    else
                    {
                        //UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                        //           new Action(
                        //               delegate()
                        //               {
                        //                   IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                        //                   messageManager.ShowError("PLC Error!");
                        //               }));
                    }

                    //if ((m.InputStatusInline  & InputStatusInline.AirPressureSwitch) == 0)
                    //{
                    //    IBatchOperationInline op = m.CreateBatchOperationInline();
                    //    IOperationResult opResult = null;
                    //    op.ClearLampBlink();
                    //    op.SetRedAndBuzzer();
                    //    opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                    //    opResult.Wait();

                    //    UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                    //                    new Action(
                    //                        delegate()
                    //                        {
                    //                            IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                    //                            messageManager.ShowError(Lang.UI.UI_Status_AirPressureWarning);
                    //                        }));

                    //    IBatchOperationInline op2 = m.CreateBatchOperationInline();
                    //    IOperationResult opResult2 = null;

                    //    op2.SetBuzzer(false);
                    //    opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                    //    opResult2.Wait();
                    //}
                }

                if (!context._isAlarm)
                {
                    // 20230209 E05区分 修改 Start  
                    // 20191205 廊坊报警信息 追加 Start
                    // Holly.Log.HlLogger.Write("HOLLY AOI =====>Current Alarm is  Error E05..");
                    GlobalDataManager.Current.IsNoBoardOutAlarming = true;
                    // 20191205 廊坊报警信息 追加 End
                    //ExportEquipmentRunStatusManager.Current.Export("Alarm", "Error", "E05");  

                    //20230613 监控E05异常 追加 Start
                    string addionalInformation = "ImageAcquisitionMachine";
                    PLCErrorStatusManager.Current.SavePLCErrorToFile(m, addionalInformation);
                    //20230613 监控E05异常 追加 End

                    if (GlobalDataManager.Current.EquipmentErrorCode.Equals(""))
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI =====>Current Alarm 1 is  Error E05..");
                        //Log4Net.Warn("HOLLY AOI =====>Current Alarm 1 is  Error E05..");
                        // ExportEquipmentRunStatusManager.Current.Export("Alarm", "Error", "E05");
                    }
                    else
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI =====>Current Alarm 2 is  Error：" + GlobalDataManager.Current.EquipmentErrorCode);
                        //Log4Net.Warn("HOLLY AOI =====>Current Alarm 2 is  Error：" + GlobalDataManager.Current.EquipmentErrorCode);
                        string errorInfo = "";

                        switch (GlobalDataManager.Current.EquipmentErrorCode)
                        {
                            case "E30":
                                errorInfo = "RepairNotConfirmedAlarm";
                                break;
                            case "E31":
                                errorInfo = "IPYAlarm";
                                break;
                            case "E32":
                                errorInfo = "MachineAlarm";
                                break;
                            case "E33":
                                errorInfo = "AirPressureAlarm";
                                break;
                            case "E34":
                                errorInfo = "Machine Error";
                                break;
                            case "E35":
                                errorInfo = "ForceResetCamera";
                                break;
                            case "E36":
                                errorInfo = "CaptureAlarm";
                                break;
                            case "E37":
                                errorInfo = "DoubleSide Error";
                                break;
                            case "E38":
                                errorInfo = "DB Error";
                                break;
                            case "E39":
                                errorInfo = "AlarmExceed ExitRun";
                                break;
                            case "E40":
                                errorInfo = "UnitedAutomotive";
                                break;
                            case "E41":
                                errorInfo = "Barcode Error";
                                break;
                            case "E42":
                                errorInfo = "Check AOI State";
                                break;
                            case "E43":
                                errorInfo = "Link Alarm";
                                break;
                            case "E44":
                                errorInfo = "Check Time";
                                break;
                            case "E45":
                                errorInfo = "AOIReplaceInfo";
                                break;
                            case "E46":
                                errorInfo = "Link Alarm PCs not match";
                                break;
                            case "E47":
                                errorInfo = "PLASMA Error";
                                break;
                            case "E48":
                                errorInfo = "BarcodeUnreadableBuzzer";
                                break;
                            case "E49":
                                errorInfo = "DB Timeout";
                                break;
                            case "E50":
                                errorInfo = "HaiKangAnalysis";
                                break;
                            case "E51":
                                errorInfo = "TimeOut";
                                break;
                            case "E52":
                                errorInfo = "ZiGuangNGBuffer";
                                break;
                            case "E53":
                                errorInfo = "ModBusTcp_NGBuffer";
                                break;
                            // 20230209 E05区分追加实时异常报警提示 追加 Start  
                            case "E54":
                                // AutoRun 实时异常
                                errorInfo = GlobalDataManager.Current.EquipmentErrorContent;
                                break;
                            // 20230209 E05区分追加实时异常报警提示 追加 End  
                            default:
                                break;
                        }
                        // ExportEquipmentRunStatusManager.Current.Export("Alarm", errorInfo, GlobalDataManager.Current.EquipmentErrorCode);

                    }
                    // 20230209 E05区分 修改 End

                    context._isAlarm = true;
                }

                var inputs = m.CurrentInputs;

                GlobalDataManager.Current.ClearNotWaitInspections(1);

                if (Customization.Current.IsBarcodeScannerInMachine)
                {
                    // 20200718 条码处理移动到拍照完成后 追加 Start
                    BarcodeDataControl.Current.WaitHandleEndCurrentPCB(1);
                    // 20200718 条码处理移动到拍照完成后 追加 End

                    GlobalDataManager.Current.Barcodes.Clear();
                    GlobalDataManager.Current.Barcodes2.Clear();
                    GlobalDataManager.Current.Barcodes3.Clear();
                    GlobalDataManager.Current.Barcodes4.Clear();
                    GlobalDataManager.Current.hasBottomBarcode = false;
                    Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(DesynsState) Clear Barcode");
                    //Log4Net.Info("HOLLY AOI =====>ImageAcquisitionMachine.Visit(DesynsState) Clear Barcode");
                }
                GlobalDataManager.Current.InOutPCBs = 0;
                GlobalDataManager.Current.OutPCsQuene.Clear();
                var newState = ProcessButtons(state, inputs, context, true);
                if (newState != null)
                {
                    GlobalDataManager.Current.IsPLCError = false;
                    return newState;
                }

                return state;
            }

            // 20210728 机内两块板直接清板板子掉地对应 追加 Start
            private int WaitSingleBoard(ImageAcquisitionMachine context)
            {
                int ret = 0;

                var m = App.Current.GetService<Machine>();

                while (true)
                {
                    try
                    {
                        IBatchOperationInline op = m.CreateBatchOperationInline();
                        IOperationResult opResult = null;
                        op.ClearLampBlink();
                        op.SetRedAndBuzzer();
                        opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                        opResult.Wait();

                        Holly.Log.HlLogger.Write("HOLLY AOI =====> WaitSingleBoard Set Buzzer True");
                        //Log4Net.Info("HOLLY AOI =====> WaitSingleBoard Set Buzzer True");
                    }
                    catch (Exception ex)
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI =====> WaitSingleBoard ret = " + ConstUtils.ExitState);
                        Holly.Log.HlLogger.Write("HOLLY AOI =====> WaitSingleBoard Set Buzzer True Exception = " + ex.ToString());
                        //Log4Net.Error("HOLLY AOI =====> WaitSingleBoard ret = " + ConstUtils.ExitState);
                        //Log4Net.Error("HOLLY AOI =====> WaitSingleBoard Set Buzzer True Exception = " + ex.ToString());
                        Thread.Sleep(100);
                        return ConstUtils.ExitState;
                    }

                    if (!context._isAlarm)
                    {
                        ExportEquipmentRunStatusManager.Current.Export("Alarm", "Two PCBs Inside", "E04");
                        context._isAlarm = true;
                    }
                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                    ExportShanWeiWatchBoardBYDShopfloorManager.Current.WriteAlarm(1, Lang.UI.UI_Label_TwoPCBInside, DateTime.Now);
                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End
                    UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                    new Action(
                                        delegate ()
                                        {
                                            //20230717 log输出【ygs】 Start 
                                            ExportLogOuputManager.Current.OuputLog(11, Lang.UI.UI_Label_TwoPCBInside);
                                            //20230717 log输出【ygs】 End
                                            // 20240406 启动屏幕录制程序 追加 Start                                                    
                                            SocketScreenRecorder.Current.clientSendStart();
                                            // 20240406 启动屏幕录制程序 追加 End
                                            IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                            messageManager.ShowError(Lang.UI.UI_Label_TwoPCBInside);
                                        }));

                    IBatchOperationInline op2 = m.CreateBatchOperationInline();
                    IOperationResult opResult2 = null;

                    op2.SetBuzzer(false);
                    opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                    opResult2.Wait();

                    m.UpdateInline();
                    if ((m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                    {
                        Thread.Sleep(50);
                    }
                    else
                    {
                        break;
                    }

                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                    ExportShanWeiWatchBoardBYDShopfloorManager.Current.UpdateAlarm(3, Lang.UI.UI_Label_TwoPCBInside, DateTime.Now);
                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End

                    // 20241203 鹏鼎心跳报警结束 【ygs】 追加 Start
                    ExportEquipmentRunStatusManager.Current.EndExport("Alarm", "Two PCBs Inside", "E04");
                    // 20241203 鹏鼎心跳报警结束 【ygs】 追加 End

                }

                Holly.Log.HlLogger.Write("HOLLY AOI =====> WaitSingleBoard ret = " + ConstUtils.UnhandleState);
                //Log4Net.Info("HOLLY AOI =====> WaitSingleBoard ret = " + ConstUtils.UnhandleState);
                return ConstUtils.UnhandleState;
            }
            // 20210728 机内两块板直接清板板子掉地对应 追加 End


            public State Visit(ResetState state, ImageAcquisitionMachine context)
            {
                Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Visit(ResetState)");
                //Log4Net.Info("HOLLY AOI =====> ImageAcquisitionMachine.Visit(ResetState)");

                // 20240809 报警SMT制程管控异常后重新进板就会卡死BUG处理 【刘亚杰】 追加 Start
                GlobalDataManager.Current.IsNoBoardOutAlarming = false;
                // 20240809 报警SMT制程管控异常后重新进板就会卡死BUG处理 【刘亚杰】 追加 End

                var m = context.GetMachine2();

                IProgressListener<int, string> progressListener = App.Current.GetService<IProgressListener<int, string>>();
                var result = context.PrepareMachineAndDigitizer(state.IsForced, progressListener);

                result.Wait(false);

                // 20220929 立景上料机拍照前回放板位 追加 Start
                if (Customization.Current.LiJingShopfloor.IsBeforeGrabGoReleaseBoardPosition)
                {
                    // 现场描述：
                    // 机器启动自动运行后相机回原点完成后，相机马上回到release board position.然后进板后，
                    // 上拍相机走向起拍原点位置后开始拍照，拍照完成后回到release board position，
                    // 下拍相机回到原点位置进行拍照，拍照完成后回到release board position.
                    var mReleaseBoardPosition = App.Current.GetService<Machine>();
                    var goOp = m.CreateBatchOperation();
                    goOp.LocateLoader(new int2(mReleaseBoardPosition.X, mReleaseBoardPosition.Y), MachineParams.Current.ReleaseBoardPosition.ToPlugs(), false);
                    Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Visit MachineParams.Current.ReleaseBoardPosition.ToPlugs():" +
                        MachineParams.Current.ReleaseBoardPosition.ToPlugs());
                    //Log4Net.Info("HOLLY AOI =====> ImageAcquisitionMachine.Visit MachineParams.Current.ReleaseBoardPosition.ToPlugs():" +
                    //MachineParams.Current.ReleaseBoardPosition.ToPlugs());
                    var opResult = goOp.Execute(MachineParams.Current.OperationStepTimeout);
                    opResult.Wait(false);
                }
                // 20220929 立景上料机拍照前回放板位 追加 End

                // 20200805 离线机复位修改 修改 Start
                //if (result.HasError)

                if (result.HasError && MachineParams.Current.IsInlineMode)
                // 20200805 离线机复位修改 修改 End
                {

                    //20230706  查找E05 【徐明武】 修改 Start
                    //return DesyncState.Current;
                    {
                        Holly.Log.HlLogger.Write("E05 => 3 ");
                        return DesyncState.Current;
                    }
                    //20230706  查找E05 【徐明武】 修改 End 
                }
                else
                {
                    if (this.IsRequestOne)
                    {
                        return ReadyState.Current;
                    }
                    else
                    {
                        if (MachineParams.Current.IsInlineMode)
                        {
                            if (Customization.Current.IsBarcodeScannerInMachine)
                            {
                                // 20200718 条码处理移动到拍照完成后 追加 Start
                                BarcodeDataControl.Current.WaitHandleEndCurrentPCB(1);
                                // 20200718 条码处理移动到拍照完成后 追加 End

                                GlobalDataManager.Current.Barcodes.Clear();
                                GlobalDataManager.Current.Barcodes2.Clear();
                                GlobalDataManager.Current.Barcodes3.Clear();
                                GlobalDataManager.Current.Barcodes4.Clear();
                                GlobalDataManager.Current.InOutPCBs = 0;
                                GlobalDataManager.Current.OutPCsQuene.Clear();
                                GlobalDataManager.Current.hasBottomBarcode = false;
                                Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(ResetState) Clear Barcode");
                            }
                            GlobalDataManager.Current.TotalPCBs = 0;

                            //双面机删除文件
                            if (AutoRunSettings2.Default.IsDoubleSideAOI)
                            {
                                bool hasB2File = true;
                                while (hasB2File)
                                {
                                    string pathB2 = GlobalDataManager.Current.GetFileName(AutoRunSettings2.Default.ReadDirectory, "");
                                    Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit pathB2 = " + pathB2);
                                    if (pathB2 == "")
                                    {
                                        hasB2File = false;
                                    }
                                    else
                                    {
                                        try
                                        {
                                            File.Delete(pathB2);
                                        }
                                        catch (Exception ex)
                                        {
                                        }
                                    }
                                }
                            }

                            // 20210122 快克数据输出 追加 Start
                            ExportKuaiKeShopfloorManager.Current.Reset();
                            // 20210122 快克数据输出 追加 End

                            IBatchOperationInline prepareOp = m.CreateBatchOperationInline();

                            if (!m.IsInitialized)
                            {
                                var r = m.Initialize();
                                r.Wait(false);
                                if (r.Exception != null)
                                    throw r.Exception;

                                m.IsInitialized = true;
                            }

                            //初始化
                            if (state.IsForced || state.IsInitial)
                            {
                                context._isBoardIn = false;
                                context._isReCapture = false;
                                context._isReBoardIn = false;
                                context._isHold = false;
                                context._isAlarm = false;

                                //if (AutoRunSettings.Default.IsAutoVerificationEnabled && AutoRunSettings.Default.IsAutoVerificationForAll)
                                //{
                                //    ExportEquipmentRunStatusManager.Current.Export("ByPass", "", "N/A");
                                //}
                                //else
                                //{
                                Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(ResetState) Run State");
                                //Log4Net.Info("HOLLY AOI =====>ImageAcquisitionMachine.Visit(ResetState) Run State");
                                ExportEquipmentRunStatusManager.Current.Export("Run", "", "N/A");
                                //}

                                IBatchOperationInline op1 = m.CreateBatchOperationInline();
                                if (AutoRunSettings.Default.IsSMEMAMode)
                                {
                                    op1.SetFrontRequest(false);
                                }
                                else
                                {
                                    op1.SetFrontRequest(true);
                                }
                                op1.SetNoNextMachine(AutoRunSettings.Default.NoNextMachineSignal);
                                op1.ClearLampBlink();
                                op1.SetGreenLampOn();

                                IOperationResult opResult1 = op1.Execute(MachineParams.Current.OperationStepTimeout);
                                opResult1.Wait();

                                if (GlobalDataManager.Current.UnitedAutomotiveError)
                                {
                                    prepareOp.ClearCommand();
                                    prepareOp.AutoRunSignal(true);
                                    prepareOp.BoardOut();

                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> Board Out");
                                    //Log4Net.Info("HOLLY AOI ============> Board Out");
                                    IOperationResult opResult = prepareOp.Execute(MachineParams.Current.OperationStepTimeout);
                                    progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);
                                    opResult.Wait();
                                    /////////////////////////////////////////////////////////m.UpdateInline();
                                    //context.CheckInlineMachineStatus();
                                    while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                    {
                                        if (context.StopFlag)
                                            return ExitState.Current;
                                        m.UpdateInline();
                                        if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                        {
                                            //20230706  查找E05 【徐明武】 修改 Start
                                            //return DesyncState.Current;
                                            {
                                                Holly.Log.HlLogger.Write("E05 => 4 ");
                                                return DesyncState.Current;
                                            }
                                            //20230706  查找E05 【徐明武】 修改 End 

                                        }
                                        //context.CheckInlineMachineStatus();
                                        Thread.Sleep(50);
                                    }
                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> Board Out Finish");
                                    //Log4Net.Info("HOLLY AOI ============> Board Out Finish");
                                    progressListener.Complete();

                                    GlobalDataManager.Current.UnitedAutomotiveError = false;
                                    return GoState.Current;
                                }
                                else
                                {
                                    prepareOp.ClearCommand();
                                    prepareOp.AutoRunSignal(true);
                                    prepareOp.ClearBoard();

                                    IOperationResult opResult = prepareOp.Execute(MachineParams.Current.OperationStepTimeout);
                                    progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_ClearingBoard);
                                    //opResult.Wait();
                                    m.UpdateInline();
                                    while ((m.CompleteProcessStatus & CompleteProcessStatus1.ClearBoard) == 0 && (m.CommandStatusInline & CommandStatusInline.BoardInside) == 0)
                                    {
                                        if (context.StopFlag)
                                            return ExitState.Current;
                                        m.UpdateInline();
                                        Thread.Sleep(100);
                                    }
                                    progressListener.Complete();

                                    if (opResult.Exception == null)
                                    {
                                        if (Customization.Current.ClearBoardWithoutTakeOut)
                                        {
                                            //清板后板子在入板口不拿直接进去检测
                                            if ((m.InputStatusInline & InputStatusInline.BoardIn) != 0)
                                            {
                                                //bool isOK = false;
                                                //UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                                // new Action(
                                                //     delegate()
                                                //     {
                                                //         IMessageManager messageManager = App.Current.GetService<IMessageManager>();

                                                //         if (messageManager.ShowMessage(
                                                //            Lang.UI.UI_Message_BoardInsideWithoutTakeOut,
                                                //            "",
                                                //            System.Windows.MessageBoxButton.OKCancel,
                                                //            System.Windows.MessageBoxImage.Warning) == System.Windows.MessageBoxResult.OK)
                                                //         {
                                                //             isOK = true;
                                                //         }
                                                //     }));

                                                //if (isOK)
                                                //{
                                                context._isReBoardIn = true;
                                                return GoState.Current;
                                                //}
                                                //else
                                                //{
                                                //    while ((m.InputStatusInline & InputStatusInline.BoardIn) != 0 || (m.InputStatusInline & InputStatusInline.SlowDown) != 0 || (m.InputStatusInline & InputStatusInline.Stopper) != 0 || (m.InputStatusInline & InputStatusInline.BoardOut) != 0)
                                                //    {
                                                //        UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                                //         new Action(
                                                //             delegate()
                                                //             {
                                                //                 IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                                //                 messageManager.ShowError(Lang.UI.UI_Message_BoardInside);
                                                //             }));
                                                //        m.UpdateInline();
                                                //    }
                                                //}
                                            }
                                        }
                                        else
                                        {
                                            // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                            ExportShanWeiWatchBoardBYDShopfloorManager.Current.WriteAlarm(1, Lang.UI.UI_Message_BoardInside, DateTime.Now);
                                            // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End
                                            while ((m.InputStatusInline & InputStatusInline.BoardIn) != 0 || (m.InputStatusInline & InputStatusInline.SlowDown) != 0 || (m.InputStatusInline & InputStatusInline.Stopper) != 0 || (m.InputStatusInline & InputStatusInline.BoardOut) != 0)
                                            {
                                                UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                                 new Action(
                                                     delegate ()
                                                     {
                                                         //20230717 log输出【ygs】 Start 
                                                         ExportLogOuputManager.Current.OuputLog(11, Lang.UI.UI_Message_BoardInside);
                                                         //20230717 log输出【ygs】 End
                                                         IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                                         messageManager.ShowError(Lang.UI.UI_Message_BoardInside);
                                                     }));
                                                m.UpdateInline();
                                            }
                                            // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                            ExportShanWeiWatchBoardBYDShopfloorManager.Current.UpdateAlarm(3, Lang.UI.UI_Message_BoardInside, DateTime.Now);
                                            // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End
                                        }
                                        //if (!AutoRunSettings.Default.IsOfflineMode)
                                        //{
                                        //    IBatchOperationInline op = m.CreateBatchOperationInline();
                                        //    op.ReadySignal(true);
                                        //    opResult = op.Execute(MachineParams.Current.OperationStepTimeout);

                                        //}

                                    }
                                }

                            }
                            else
                            {
                                ////出错后，复位将给前机要板信号
                                //if (!AutoRunSettings.Default.IsOfflineMode)
                                //{
                                //    IBatchOperationInline op = m.CreateBatchOperationInline();
                                //    op.ReadySignal(true);
                                //    IOperationResult opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                //}
                            }

                            //if (AutoRunSettings.Default.IsWaitRepairSendOKNG && (AutoRunSettings.Default.IsCentralControlMode||Customization.Current.IsRepairControlNotWait) && AutoRunSettings.Default.IsRepairCommit)
                            //{
                            //    try
                            //    {
                            //        RepairTempDB.RepairTempDBEntities ctxNew = RepairDBAccess.Current.GetRepairTempDBEntities();
                            //        var rc = (from r in ctxNew.Inspections where r.Station == LC.SN.ToUpper() && (r.Status == 6) select r).ToList();
                            //        foreach (var r in rc)
                            //        {
                            //            //r.StopFlag = -1;
                            //            //RepairTempDB.RepairCentralControl repair = ctxNew.GetObjectByKey(new System.Data.EntityKey("Entities.RepairCentralControls", "ID", id)) as SMTUFDB.SMTNGComponent;
                            //            ctxNew.DeleteObject(r);
                            //            ctxNew.SaveChanges();
                            //        }
                            //    }
                            //    catch (Exception ex)
                            //    {
                            //    }
                            //}

                            if (AutoRunSettings.Default.IsOfflineMode && AutoRunSettings.Default.AutoRunOfflineMode == (int)AutoRunOfflineMode.ExitToExit)
                            {
                                return PlaceBoardState.Current;
                            }
                            else
                            {
                                return ReadyState.Current;
                            }
                        }
                        else
                        {
                            return RemoveBoardState.Current;
                        }
                    }
                }
            }

            public State Visit(ReadyState state, ImageAcquisitionMachine context)
            {
                Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(ReadyState)");
                //Log4Net.Info("HOLLY AOI =====>ImageAcquisitionMachine.Visit(ReadyState)");
                var m = context.GetMachine2();
                if (!m.Update())
                {
                    Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(ReadyState) return state1");
                    //Log4Net.Info("HOLLY AOI =====>ImageAcquisitionMachine.Visit(ReadyState) return state1");
                    return state;
                }

                if (m.IsLost)
                {
                    Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(ReadyState) return state2");
                    //Log4Net.Info("HOLLY AOI =====>ImageAcquisitionMachine.Visit(ReadyState) return state2");
                    //20230706  查找E05 【徐明武】 修改 Start
                    //return DesyncState.Current;
                    {
                        Holly.Log.HlLogger.Write("E05 => 5 ");
                        return DesyncState.Current;
                    }
                    //20230706  查找E05 【徐明武】 修改 End 

                }

                var inputs = m.CurrentInputs;

                var newState = ProcessButtons(state, inputs, context);
                if (newState != null && newState != state)
                {
                    Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(ReadyState) return state3");
                    //Log4Net.Info("HOLLY AOI =====>ImageAcquisitionMachine.Visit(ReadyState) return state3");
                    return newState;
                }

                if (inputs.SafeSensor)
                {
                    Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(ReadyState) return state4");
                    //Log4Net.Info("HOLLY AOI =====>ImageAcquisitionMachine.Visit(ReadyState) return state4");
                    return state;
                }

                if (MachineParams.Current.IsInlineMode)
                {
                    context._isAlarm = false;

                    IBatchOperationInline op = m.CreateBatchOperationInline();
                    if (this.IsRequestOne)
                    {
                        op.ClearLampBlink();
                        op.SetYellowLampOn();
                        IOperationResult opResult = op.Execute(MachineParams.Current.OperationStepTimeout);

                        Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(ReadyState) return state5");
                        //Log4Net.Info("HOLLY AOI =====>ImageAcquisitionMachine.Visit(ReadyState) return state5");
                        return GoState.Current;
                    }
                    else
                    {
                        op.ClearLampBuzzer();
                        op.SetGreenLampBlink();
                        IOperationResult opResult = op.Execute(MachineParams.Current.OperationStepTimeout);

                        //20240429 启动底部条码枪选项分为1，2轨单独设置 【曹志鹏】 修改 Start
                        //if (MachineParams.Current.BarcodeSerialPort.IsEnabled && AutoRunSettings.Default.IsBottomBarcodeScannerEnabled && Customization.Current.IsBottomBarcodeUnreadableNotIn)
                        if (MachineParams.Current.BarcodeSerialPort.IsEnabled && AutoRunSettings.Default.IsBottomBarcodeScannerEnabled1 && Customization.Current.IsBottomBarcodeUnreadableNotIn)
                        //20240429 启动底部条码枪选项分为1，2轨单独设置 【曹志鹏】 修改 End
                        {
                            //Holly.Log.HlLogger.Write("HOLLY_TEST: Board In============> GlobalDataManager.Current.InOutPCBs: " + GlobalDataManager.Current.InOutPCBs + ";----GlobalDataManager.Current.Barcodes : " + GlobalDataManager.Current.Barcodes.Count);

                            if (GlobalDataManager.Current.Barcodes.Count <= GlobalDataManager.Current.InOutPCBs)
                            {
                                System.Threading.Thread.Sleep(100);
                                Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(ReadyState) return state6 Barcodes.Count = " + GlobalDataManager.Current.Barcodes.Count + ", InOutPCBs = " + GlobalDataManager.Current.InOutPCBs);
                                //Log4Net.Info("HOLLY AOI =====>ImageAcquisitionMachine.Visit(ReadyState) return state6 Barcodes.Count = " + GlobalDataManager.Current.Barcodes.Count + ", InOutPCBs = " + GlobalDataManager.Current.InOutPCBs);
                                return state;
                            }
                            string readoutBarcode = GlobalDataManager.Current.Barcodes.First();
                            if (readoutBarcode == "NR" || readoutBarcode == "ERROR")
                            {
                                //IBatchOperationInline op1 = m.CreateBatchOperationInline();
                                //IOperationResult opResult1 = null;

                                //op1.ClearLampBlink();
                                //op1.SetRedAndBuzzer();
                                //opResult1 = op1.Execute(MachineParams.Current.OperationStepTimeout);
                                //opResult1.Wait();

                                //System.Threading.Thread.Sleep(1000);

                                //IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                //IOperationResult opResult2 = null;

                                //op2.SetBuzzer(false);
                                //opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                //opResult2.Wait();

                                // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                ExportShanWeiWatchBoardBYDShopfloorManager.Current.WriteAlarm(1, Lang.UI.UI_Label_BarcodeUnreadable, DateTime.Now);
                                // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End
                                UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                    new Action(
                                        delegate ()
                                        {
                                            op.ClearLampBlink();
                                            op.SetRedAndBuzzer();
                                            opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                            //opResult.Wait();

                                            //20230717 log输出【ygs】 Start 
                                            ExportLogOuputManager.Current.OuputLog(11, Lang.UI.UI_Label_BarcodeUnreadable);
                                            //20230717 log输出【ygs】 End
                                            // 20240406 启动屏幕录制程序 追加 Start                                                    
                                            SocketScreenRecorder.Current.clientSendStart();
                                            // 20240406 启动屏幕录制程序 追加 End
                                            IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                            messageManager.ShowError(Lang.UI.UI_Label_BarcodeUnreadable);

                                            IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                            IOperationResult opResult2 = null;

                                            op2.SetBuzzer(false);
                                            opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);

                                            if (Customization.Current.IsBarcodeScannerInMachine)
                                            {
                                                // 20200718 条码处理移动到拍照完成后 追加 Start
                                                BarcodeDataControl.Current.WaitHandleEndCurrentPCB(1);
                                                // 20200718 条码处理移动到拍照完成后 追加 End

                                                GlobalDataManager.Current.Barcodes.Clear();
                                                GlobalDataManager.Current.Barcodes2.Clear();
                                                GlobalDataManager.Current.Barcodes3.Clear();
                                                GlobalDataManager.Current.Barcodes4.Clear();
                                                GlobalDataManager.Current.hasBottomBarcode = false;
                                                Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(ReadyState) Clear Barcode");
                                                //Log4Net.Info("HOLLY AOI =====>ImageAcquisitionMachine.Visit(ReadyState) Clear Barcode");
                                            }

                                            if (Customization.Current.IsInputBottomBarcode)
                                            {
                                                InputBottomBarcodeDialog dialog = new InputBottomBarcodeDialog();
                                                dialog.ShowDialog();

                                                string barcode = dialog.bottomBarcode;
                                                GlobalDataManager.Current.Barcodes.Insert(0, barcode);
                                                GlobalDataManager.Current.hasBottomBarcode = true;

                                            }

                                        }));
                                // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                ExportShanWeiWatchBoardBYDShopfloorManager.Current.UpdateAlarm(3, Lang.UI.UI_Label_BarcodeUnreadable, DateTime.Now);
                                // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End
                                //return DesyncState.Current;
                                System.Threading.Thread.Sleep(100);

                                if (GlobalDataManager.Current.hasBottomBarcode)
                                {
                                    Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(ReadyState) return state7");
                                    return GoState.Current;
                                }
                                else
                                {
                                    Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(ReadyState) return state8");
                                    return state;
                                }
                            }
                            else
                            {
                                Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(ReadyState) return state9");
                                return GoState.Current;
                            }
                        }

                        if (!MeshBufferManager.Current.HasFreeBuffer)
                        {
                            System.Threading.Thread.Sleep(100);
                            Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(ReadyState) return state10");
                            return state;
                        }
                        else
                        {
                            Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(ReadyState) return state11");
                            return GoState.Current;
                        }

                        //if (!m.UpdateInline())
                        //    return state;

                        //if ((m.InputStatusInline & InputStatusInline.BoardIn) == 0)
                        //    return state;
                    }
                }
                else
                {
                    if (Customization.Current.IsAutoBoardInForDesktop)
                    {
                        if (!inputs.BoardSensor && !state.IsForced)
                        {
                            Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(ReadyState) return state12");
                            return PlaceBoardState.Current;
                        }
                    }
                    else
                    {
                        if (!inputs.BoardSensor)
                        {
                            Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(ReadyState) return state13");
                            return PlaceBoardState.Current;
                        }

                        if (!state.IsForced)
                        {
                            Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(ReadyState) return state14");
                            return state;
                        }
                    }
                }


                if (!MeshBufferManager.Current.HasFreeBuffer)
                {
                    System.Threading.Thread.Sleep(100);
                    Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(ReadyState) return state15");
                    return state;
                }

                Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(ReadyState) return state16");
                return GoState.Current;
            }

            readonly Regex __rxNameTemplate = new Regex(@"\<(?<name>\w+)(?<format>\:[^>]+)?\>", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            public string GetSummaryReportPath(string template, string boardName, string dateTime)
            {
                string dir = Customization.Current.ZdtcoIPYAlarm.DataDirectory;
                if (!Path.IsPathRooted(dir))
                    return null;

                if (!Directory.Exists(dir))
                {
                    Directory.CreateDirectory(dir);
                }

                string filename = __rxNameTemplate.Replace(template, new MatchEvaluator(m =>
                {
                    var name = m.Groups["name"].Value.ToLower();
                    //var format = m.Groups["format"].Value;
                    string value;
                    switch (name)
                    {
                        case "boardname":
                            value = boardName;
                            break;
                        case "date":
                            value = dateTime;
                            break;
                        default:
                            value = string.Format("[{0}]", name);
                            break;
                    }

                    if (value == null)
                        value = string.Empty;
                    return PathHelper.MakeValidFileName(value, "_");

                }));

                if (!Path.IsPathRooted(filename))
                {
                    filename = Path.Combine(dir, filename);
                }

                return MakeValidPath(filename);
            }

            string MakeValidPath(string path)
            {
                var invalidChars = Path.GetInvalidPathChars();
                var sb = new StringBuilder(path.Length);
                foreach (var c in path)
                {
                    if (invalidChars.Contains(c))
                    {
                        sb.Append("!");
                    }
                    else
                    {
                        sb.Append(c);
                    }
                }
                return sb.ToString();
            }

            // 20230206 报警windows锁屏 追加 Start
            [System.Runtime.InteropServices.DllImport("user32.dll")]
            public static extern bool LockWorkStation();
            // 20230206 报警windows锁屏 追加 End
            public State Visit(GoState state, ImageAcquisitionMachine context)
            {
                Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Visit(GoState)");
                //Log4Net.Info("HOLLY AOI =====> ImageAcquisitionMachine.Visit(GoState)");
                //try
                //{
                var m = context.GetMachine2();
                var progressListener = context.GetProgressListener();
                ReportManager reportManager = App.Current.GetService<ReportManager>();

                // 20241008 连续预警满足条件时报警在出板 【ygs】 追加 Start
                GlobalDataManager.Current.IsBoardOut = false;
                // 20241008 连续预警满足条件时报警在出板 【ygs】 追加 End

                GlobalDataManager.Current.IsPLCError = false;
                GlobalDataManager.Current.AlarmBuzzerRail1 = -1;
                // 20240807 鹏鼎左拼板报警、右拼板不报警 【范克文】 追加 Start
                GlobalDataManager.Current.AlarmBuzzerRail1MultPanel = -1;
                // 20240807 鹏鼎左拼板报警、右拼板不报警 【范克文】 追加 End
                context._isNeedResetForce = true;
                //Stopwatch gowatch = new Stopwatch();
                //gowatch.Start();

                //20230116 双面双轨增加数据库状态同步 【曹志鹏】 追加 Start
                DoubleSideDataControl.Current.DeleteDoubleSideControl(1);
                DoubleSideDataControl.Current.GenerateData(1);
                //20230116 双面双轨增加数据库状态同步 【曹志鹏】 追加 End

                // 20211224 苏州万都海拉V轴非标设备控制补全及NG板AOI报警 追加 Start 
                ExportCommonShopfloorManager.Current.InitNgBoardAlarmValue();
                // 20211224 苏州万都海拉V轴非标设备控制补全及NG板AOI报警 追加 End

                // 20220126 冠宇MES(CheckRoute) 追加 Start
                ExportGuanYuShopfloor2Manager.Current.InitOnlineInspectBarcode(1);
                // 20220126 冠宇MES(CheckRoute) 追加 End
                // 20220126 万都海拉MES 追加 Start
                ExportWanDuShopfloorManager.Current.InitOnlineInspectBarcode(1);
                // 20220126 万都海拉MES 追加 End

                // 20220209 常州移远SideMark过站 追加 Start
                ExportChangZhouYiYuanShopfloorManager.Current.InitOnlineInspectBarcode();
                // 20220209 常州移远SideMark过站 追加 End

                // 20220221 淮安鹏鼎条码比对 追加 Start
                ExportZdtcoAOIReplaceInfoManager.Current.InitOnlineInspectBarcode();
                // 20220221 淮安鹏鼎条码比对 追加 End

                //20221128 坪山比亚迪2D双轨MES 追加 Start
                ExportPingShanBYDShopfloorManager.Current.InitOnlineInspectBarcode(1);
                //20221128 坪山比亚迪2D双轨MES 追加 End

                // 20220914 指定错误类型停机报警 追加 Start
                ExportAlarmNotificationManager.Current.Init(1);
                // 20220914 指定错误类型停机报警 追加 End

                //// 20220915 DoubleSideDataControl清空 追加 Start
                DoubleSideDataControl.Current.DeleteDoubleSideControl();
                //// 20220915 DoubleSideDataControl清空 追加 End

                // 20191031 飞安瑞 MES 追加 Start
                GlobalDataManager.Current.OnlineInspectBarcode = -1;
                Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine GlobalDataManager.Current.OnlineInspectBarcode = " + GlobalDataManager.Current.OnlineInspectBarcode.ToString());
                // 20191031 飞安瑞 MES 追加 End

                // 20210917 鹏元晟MES 追加 Start
                ExportPengYuanChengShopfloorManger.Current.CheckSnResultStatus = -1;
                Holly.Log.HlLogger.Write("HOLLY AOI ============>  ExportPengYuanChengShopfloorManger.Current.CheckSnResultStatus = " + ExportPengYuanChengShopfloorManger.Current.CheckSnResultStatus.ToString());
                // 20210917 鹏元晟MES 追加 End

                // 20200519 讯芯2次修改 追加 Start
                ExportXunxinNGInfoManager.Current.InitBarcodeStatus();
                // 20200519 讯芯2次修改 追加 End

                // 20211210 紫光现场调试 追加 Start
                ZiGuangNGBuffer.Current.SetTempBarcode(string.Empty);
                // 20211210 紫光现场调试 追加 End

                // 20220115 ModBusTcp_NGBuffer 追加 Start
                NGBufferModbusTCP.Current.NGBufferModbusTCPInitialize(1);
                // 20220115 ModBusTcp_NGBuffer 追加 End

                // 20201126 报警同步 追加 Start
                MachineAlarmDataControl.Current.InitAlarmStatus(1);
                // 20201126 报警同步 追加 End

                // 20220221 观澜富士康条码验证 追加 Start
                ExportFoxconnManagementBarcodes.Current.Initialize(railID: 1);
                // 20220221 观澜富士康条码验证 追加 End

                // 20220815 从Ver6同步上达黄石MES 追加 Start
                ExportShangDaHuangShiShopfloorManager.Current.Initialize(1);
                // 20220815 从Ver6同步上达黄石MES 追加 End

                // 20221020 二次测板报警停机不测试 追加 Start
                BarcodeRepeatAlarmManager.Current.CheckSnResultStatus = -1;
                // 20221020 二次测板报警停机不测试 追加 End

                // 20211215 闻泰二期MES 追加 Start
                ExportWingtech2ShopfloorManager.Current.Wingtech2Initialize(1);
                // 20211215 闻泰二期MES 追加 End

                // 20220613 杭州惠泓MES 追加 Start
                ExportHangZhouHuiHongShopfloorManager.Current.Initialize();
                // 20220613 杭州惠泓MES 追加 End

                // 20221021 北京富士康 追加 Start
                ExportFoxconnShopfloor_BJManager.Current.Initialize(1);
                // 20221021 北京富士康 追加 End

                // 20220328 STK_SPI_BadMark信息 追加 Start
                SPINGInfoManager.Current.ReadSTKSPIInfoFile();
                // 20220328 STK_SPI_BadMark信息 追加 End

                // 20240625 芜湖mes 【ygs】 追加 Start
                ExportWuhuShopfloorManager.Current.IsShow();
                // 20240625 芜湖mes 【ygs】 追加 End

                //20231221 淮安鹏鼎多pannel二次卡关&markerror&nobarcode报警不生成数据【张晨铖】 追加 Start
                BarcodeRepeatAlarmManager.Current.MarkErrorOrNoBarcodeAlarm = -1;
                //20231221 淮安鹏鼎多pannel二次卡关&markerror&nobarcode报警不生成数据【张晨铖】 追加 End

                //20240124 多pannel有任一卡关失败则整版失败不生成数据【张晨铖】 追加 Start
                // 20240424 双拼mes 【ygs】 删除 Start
                // 出结果慢会导致重复过账
                if (!MachineParams.Current.InlineMachine.MultiProgramMarkAutoCheck)
                    ExportZdtcoNGInfoManager.Current.MultPannelCheckAOIState = -1;
                // 20240424 双拼mes 【ygs】 删除 End
                //20240124 多pannel有任一卡关失败则整版失败不生成数据【张晨铖】 追加 End

                // 20220804 景旺AVIMES 追加 Start
                ExportJingWangAVIShopfloorManager.Current.Initialize();
                // 20220804 景旺AVIMES 追加 End

                // 20211229 福莱盈MES新接口过站 追加 Start
                if (Customization.Current.FlyMesShopfloor.IsEnabled && !Customization.Current.FlyMesShopfloor.IsDoubleRail)
                {
                    ExportFlyMesShopfloorManager.Current.FlyMesInitialize(1);
                }
                // 20211229 福莱盈MES新接口过站 追加 End

                //20230213 惠州欣旺达Mes【张晨铖】 追加 Start
                ExportHZXWDShopfloorManager.Current.OnlineInspectBarcode = -1;
                //20230213 惠州欣旺达Mes【张晨铖】 追加 End

                //20240620 许昌市许继电气自动确认合格显示【张晨铖】 追加 Start
                App.Current.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority.ApplicationIdle,
                     new Action(() =>
                     {
                         App.Current.Resources["IsOKVis"] = Visibility.Collapsed;
                     }));
                //20240620 许昌市许继电气自动确认合格显示【张晨铖】 追加 End

                //20230224 云南闻泰Mes【张晨铖】 追加 Start
                ExportYunNanWenTaiShopfloorManager.Current.SideASN = new List<string>();
                ExportYunNanWenTaiShopfloorManager.Current.SideBSN = new List<string>();
                ExportYunNanWenTaiShopfloorManager.Current.OnlineInspectBarcode = -1;
                //20230224 云南闻泰Mes【张晨铖 追加 End

                //20240424 太原富士康LQ过站异常未报警，怀疑是条码状态为初始化造成 【曹志鹏】 追加 Start
                ExportMainShopfloorManager.Current.InitOnlineInspectBarcode(1);
                //20240424 太原富士康LQ过站异常未报警，怀疑是条码状态为初始化造成 【曹志鹏】 追加 End

                //20240513 龙华富士康SPI/AOI人员权限优化:增加导出Vision异常停机报警机制【曹志鹏】追加 Start
                string alarm = ExportAlarmNotificationManager.Current.CheckVisionAlarm();
                if (!string.IsNullOrEmpty(alarm))
                {
                    WaitVerify(m, alarm);
                }
                //20240513 龙华富士康SPI/AOI人员权限优化:增加导出Vision异常停机报警机制【曹志鹏】追加 End

                //20240619 烟台富士康MES 【范克文】 追加 Start
                if (Customization.Current.YanTaiFoxconnShopfloor.IsEnabled)
                {
                    string alarmmsg = ExportYanTaiFoxconnShopfloorManager.Current.CheckErrorMsg();
                    Holly.Log.HlLogger.Write("HOLLY AOI ===> ImageAcquisitionMachine.Visit alarmmsg = " + alarmmsg);
                    if (!string.IsNullOrEmpty(alarmmsg))
                    {
                        ExportYanTaiFoxconnShopfloorManager.Current.InitErrMsg();
                        WaitVerify(m, alarmmsg);
                    }
                }
                //20240619 烟台富士康MES 【范克文】 追加 End

                //20240717 越南广宁富士康MES 【范克文】 追加 Start
                if (Customization.Current.YueNanGNFoxconnShopfloor.IsEnabled)
                {
                    string alarmmsg = ExportYueNanGNFoxconnShopfloorManager.Current.CheckErrorMsg();
                    Holly.Log.HlLogger.Write("HOLLY AOI ===> ImageAcquisitionMachine.Visit alarmmsg = " + alarmmsg);
                    if (!string.IsNullOrEmpty(alarmmsg))
                    {
                        ExportYueNanGNFoxconnShopfloorManager.Current.InitErrMsg();
                        WaitVerify(m, alarmmsg);
                    }
                }
                //20240717 越南广宁富士康MES 【范克文】 追加 End

                // 20240722 太原新vision问题点对应_太原数据上传丢失问题防呆对应 【陈凤丹】 追加 Start
                string alarmInfo = ExportInspectionInterfaceManager.Current.GetAlarmInfo();
                if (alarmInfo.Length > 0)
                {
                    WaitVerify(m, alarmInfo);
                }
                // 20240722 太原新vision问题点对应_太原数据上传丢失问题防呆对应 【陈凤丹】 追加 End

                // 20240925 太原新vision问题点对应_偏移值未输出报警 【陈凤丹】 追加 Start
                if (ExportFoxconnNewVisionManager.Current.IsCompOffsetUnoutputAlarm)
                {
                    string msg = "偏移值数据未输出！该情况会导致维修站丢失过程参数上传数据，请确认偏移算法已启用并勾选输出";
                    WaitVerify(m, msg);
                    ExportFoxconnNewVisionManager.Current.IsCompOffsetUnoutputAlarm = false;
                }
                // 20240925 太原新vision问题点对应_偏移值未输出报警 【陈凤丹】 追加 End

                //20250108 鹏鼎直通率检测率报警定制【张晨铖】 追加 Start
                if (ExportZdtcoIPYAlarmManger.Current.CheckStop(1))
                {
                    WaitVerify(m, "维修站IPY或FPY低于阈值，已停机，点击登录解锁！");
                    System.Windows.Application.Current.Dispatcher.Invoke(() =>
                    {
                        FPYAlarmLogonDialog dialog = new Dialogs.FPYAlarmLogonDialog();
                        dialog.ShowDialog();
                    });
                    //解锁后在清空报警文件
                     ExportZdtcoIPYAlarmManger.Current.DelIPYAlarm(1);

                }
                //20250108 鹏鼎直通率检测率报警定制【张晨铖】 追加 End

                // 20230209 E05区分 追加 Start   
                GlobalDataManager.Current.EquipmentErrorCode = "";
                // 20230209 E05区分追加实时异常报警提示 追加 Start   
                GlobalDataManager.Current.EquipmentErrorContent = "";
                // 20230209 E05区分追加实时异常报警提示 追加 End   
                // 20230209 E05区分 追加 End   

                GlobalDataManager.Current.PrintPoints.Clear();

                Holly.Log.HlLogger.Write("HOLLY AOI ============> GoState Start");
                //Log4Net.Info("HOLLY AOI ============> GoState Start");
                // 20191106 双面机控制退出自动运行 追加 Start
                if (AutoRunSettings2.Default.IsDoubleSideAOI)
                {
                    Holly.Log.HlLogger.Write("HOLLY AOI ============> DoubleSide Initial");
                    // 双面机 另一面结果是否有
                    GlobalDataManager.Current.IsHaveOtherSideResult = false;
                    // 双面机 等待另一面文件超时
                    GlobalDataManager.Current.IsWaitOtherSideTimeout = false;
                    // 双面机 另一面DB异常
                    GlobalDataManager.Current.IsOtherSideDBError = false;
                    // 20210324 DB异常对应 删除 Start
                    //// 双面机 DB写入异常
                    //GlobalDataManager.Current.IsDBError = false;
                    // 20210324 DB异常对应 删除 End
                }
                // 20191106 双面机控制退出自动运行 追加 End
                // 2020303 测量高度 追加 Start
                // 20211123 【测高】CT优化 修改 Start
                //MeasuringHeightManager.Current.InitPosition();

                MeasuringHeightManagerRail1.Current.InitPosition();
                // 20211123 【测高】CT优化 修改 End
                // 2020303 测量高度 追加 End


                // 20191121 秦皇岛 追加 Start
                GlobalDataManager.Current.DBException = -1;
                // 20191121 秦皇岛 追加 End

                // 20201014 郑州状态上传 追加 Start
                if (Customization.Current.EquipmentRunStatus.IsEnabled && (Customization.Current.EquipmentRunStatus.IsFoxconnCD || Customization.Current.EquipmentRunStatus.IsBOE || Customization.Current.EquipmentRunStatus.IsFoxconnZZ || Customization.Current.EquipmentRunStatus.IsDaHua || Customization.Current.EquipmentRunStatus.IsSaiErFu))
                {
                    FileUtils.StartProcess(System.Windows.Forms.Application.StartupPath, FileUtils.RUN_STATUS_UPLOAD);
                }
                // 20201014 郑州状态上传 追加 End

                // 20200925 机内等待超时 追加 Start
                // 机内判定等待空文件
                ClearCentralControlFileForInMachineWaitRepairRet();
                // 20200925 机内等待超时 追加 End

                // 20210526 硬盘容量监控报警 追加 Start
                if (ExportCommonShopfloorManager.Current.IsExceedHardDiskFreeSpaceAlarm())
                {
                    ExportCommonShopfloorManager.Current.ShowErrorMessageForSingleRail(m, Lang.UI.UI_Status_MonitorDiskIsOverTheLimit);
                    Holly.Log.HlLogger.Write("HOLLY AOI MonitorDisk============> ImageAcquisitionMachine1.Visit(GoState) MonitorDisk alarm!");
                    //Log4Net.Info("HOLLY AOI MonitorDisk============> ImageAcquisitionMachine1.Visit(GoState) MonitorDisk alarm!");
                    return ExitState.Current;//停机
                }
                // 20210526 硬盘容量监控报警 追加 End

                // 20230714 郑州不进板问题noboardout置位 【陈凤丹】 追加 Start
                //D4230被置过1，在进板时进行复位（置D4230=0）
                Holly.Log.HlLogger.Write("HOLLY AOI ===> ImageAcquisitionMachine Visit GoState isHasSetNoboardOutPoint = " + CentralControlPLCCommand.Current.isHasSetNoboardOutPoint);
                //Log4Net.Info("HOLLY AOI ===> ImageAcquisitionMachine Visit GoState isHasSetNoboardOutPoint = " + CentralControlPLCCommand.Current.isHasSetNoboardOutPoint);
                if (CentralControlPLCCommand.Current.isHasSetNoboardOutPoint)
                {
                    CentralControlPLCCommand.Current.SetBoardoutEnd(0);
                }
                // 20230714 郑州不进板问题noboardout置位 【陈凤丹】 追加 End
                // 20240124 【华南】汕尾海丰比亚迪13栋MES 【李逸凡】 追加 Start
                if (Customization.Current.ShanWeiBYD13Shopfloor.IsEnabled && GlobalDataManager.Current.ShanWei13 != string.Empty)
                {
                    IBatchOperationInline op = m.CreateBatchOperationInline();
                    IOperationResult opResult = null;
                    op = m.CreateBatchOperationInline();
                    opResult = null;
                    op.ClearLampBlink();
                    op.SetRedAndBuzzer();
                    opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                    opResult.Wait();

                    UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                        new Action(
                            delegate ()
                            {
                                IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                // 20201119 脚印信息下载异常 修改 Start
                                //messageManager.ShowError("Link不到脚印信息");

                                messageManager.ShowError(GlobalDataManager.Current.ShanWei13);
                                // 20201119 脚印信息下载异常 修改 End
                            }));

                    IBatchOperationInline op2 = m.CreateBatchOperationInline();
                    IOperationResult opResult2 = null;

                    op2.SetBuzzer(false);
                    opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                    opResult2.Wait();

                    GlobalDataManager.Current.ShanWei13 = string.Empty;

                    Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> Zdtco SPI Link Alarm");
                    //Log4Net.Warn("HOLLY AOI DesyncState============> Zdtco SPI Link Alarm");
                    // 20230209 E05区分 追加 Start   
                    GlobalDataManager.Current.EquipmentErrorCode = "E43";//Link不到脚印信息
                    Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                    //Log4Net.Warn("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                    // 20230209 E05区分 追加 End 
                    //20230706  查找E05 【徐明武】 修改 Start
                    //return DesyncState.Current;
                    {
                        Holly.Log.HlLogger.Write("E05 => 49 ");
                        return DesyncState.Current;
                    }
                    //20230706  查找E05 【徐明武】 修改 End 
                }
                // 20240124 【华南】汕尾海丰比亚迪13栋MES 【李逸凡】 追加 End
                //QHD, 维修站未提交的数据超出数量则报警
                if (Customization.Current.RepairNotConfirmedAlarmQty != 0)
                {
                    if (RepairDataBuilder.GetNotConfirmedQty() > Customization.Current.RepairNotConfirmedAlarmQty)
                    {
                        IBatchOperationInline op = m.CreateBatchOperationInline();
                        IOperationResult opResult = null;
                        op = m.CreateBatchOperationInline();
                        opResult = null;
                        op.ClearLampBlink();
                        op.SetRedAndBuzzer();
                        opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                        opResult.Wait();

                        // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                        ExportShanWeiWatchBoardBYDShopfloorManager.Current.WriteAlarm(1, Lang.UI.UI_Status_RepairNotConfirmedQty, DateTime.Now);
                        // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End
                        UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                        new Action(
                                            delegate ()
                                            {
                                                //20230717 log输出【ygs】 Start 
                                                ExportLogOuputManager.Current.OuputLog(11, Lang.UI.UI_Status_RepairNotConfirmedQty);
                                                //20230717 log输出【ygs】 End

                                                // 20240406 启动屏幕录制程序 追加 Start                                                    
                                                SocketScreenRecorder.Current.clientSendStart();
                                                // 20240406 启动屏幕录制程序 追加 End

                                                IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                                messageManager.ShowError(Lang.UI.UI_Status_RepairNotConfirmedQty);
                                            }));

                        IBatchOperationInline op2 = m.CreateBatchOperationInline();
                        IOperationResult opResult2 = null;

                        op2.SetBuzzer(false);
                        opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                        opResult2.Wait();
                        // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                        ExportShanWeiWatchBoardBYDShopfloorManager.Current.UpdateAlarm(3, Lang.UI.UI_Status_RepairNotConfirmedQty, DateTime.Now);
                        // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End
                        //ExportEquipmentRunStatusManager.Current.Export("Alarm", Lang.UI.UI_Status_AirPressureWarning);
                        Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> Customization.Current.RepairNotConfirmedAlarmQty");
                        //Log4Net.Info("HOLLY AOI DesyncState============> Customization.Current.RepairNotConfirmedAlarmQty");
                        // 20230209 E05区分 追加 Start   
                        GlobalDataManager.Current.EquipmentErrorCode = "E30";//维修站未提交的数据超出数量则报警
                        Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) RepairNotConfirmedAlarmQty: EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                        //Log4Net.Info("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) RepairNotConfirmedAlarmQty: EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                        // 20230209 E05区分 追加 End
                        // 
                        //20230706  查找E05 【徐明武】 修改 Start
                        //return DesyncState.Current;
                        {
                            Holly.Log.HlLogger.Write("E05 => 6 ");
                            return DesyncState.Current;
                        }
                        //20230706  查找E05 【徐明武】 修改 End 

                    }
                }

                //20240429 启动底部条码枪选项分为1，2轨单独设置 【曹志鹏】 修改 Start
                //if (AutoRunSettings.Default.IsBottomBarcodeScannerEnabled && MachineParams.Current.BarcodeSerialPort.IsEnabled)
                if (AutoRunSettings.Default.IsBottomBarcodeScannerEnabled1 && MachineParams.Current.BarcodeSerialPort.IsEnabled)
                //20240429 启动底部条码枪选项分为1，2轨单独设置 【曹志鹏】 修改 End
                {
                    if (Customization.Current.IsKeepLastBarcode)
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) RemoveBarcode Before BoardIn");
                        Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) RemoveBarcode Before BoardIn Barcodes Count = " + GlobalDataManager.Current.Barcodes.Count);
                        //Log4Net.Info("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) RemoveBarcode Before BoardIn");
                        //Log4Net.Info("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) RemoveBarcode Before BoardIn Barcodes Count = " + GlobalDataManager.Current.Barcodes.Count);
                        if (GlobalDataManager.Current.Barcodes.Count > 1)
                        {
                            int count = GlobalDataManager.Current.Barcodes.Count - 1;
                            for (int i = 0; i < count; i++)
                            {
                                Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) RemoveBarcode Before BoardIn Remove Item = " + GlobalDataManager.Current.Barcodes[0]);
                                //Log4Net.Info("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) RemoveBarcode Before BoardIn Remove Item = " + GlobalDataManager.Current.Barcodes[0]);
                                GlobalDataManager.Current.Barcodes.RemoveAt(0);
                            }
                        }
                    }
                }

                //Holly.Log.HlLogger.Write("HOLLY AOI ============> context._isReCapture = " + context._isReCapture);
                if (MachineParams.Current.IsInlineMode && !this.IsRequestOne && !context._isReCapture)
                {
                    //if (!Customization.Current.IsImageTransferNotWait)
                    //{
                    //    while (GlobalDataManager.Current.IsImageTransfering)
                    //    {
                    //        Thread.Sleep(100);
                    //    }
                    //}

                    // 20201228 晋城富士康控制命令 追加 Start
                    if (ExportFoxconnShopfloor_JCManager.Current.IsHaveStopComand())
                    {
                        //20230613 监控E05异常 追加 Start
                        string addionalInformation = "ImageAcquisitionMachine JC0";
                        PLCErrorStatusManager.Current.SavePLCErrorToFile(m, addionalInformation);
                        //20230613 监控E05异常 追加 End

                        // 20201230 客户自定义Down 追加 Start
                        Holly.Log.HlLogger.Write("HOLLY AOI ============> Board In ExportFoxconnShopfloor_JCManager has stop comand1");
                        //ExportEquipmentRunStatusManager.Current.Export("Alarm", "Error", "E05");
                        // 20201230 客户自定义Down 追加 End
                        return ExitState.Current;
                    }
                    // 20201228 晋城富士康控制命令 追加 End

                    // 20210309 接口请求心跳 追加 Start
                    if (ExportFoxconnShopfloor_JCManager.Current.IsConnectHostNG())
                    {
                        string msg = "设备与Socket服务器握手通讯超时！";
                        ExportFoxconnShopfloor_JCManager.Current.ShowConnectNGMsg(msg);
                    }
                    // 20210309 接口请求心跳 追加 End

                    // 20200909 数据上传异常需返回AOI机台停机报警 追加 Start
                    Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) IsShowRepairAlarm = " + Customization.Current.IsShowRepairAlarm);
                    //Log4Net.Info("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) IsShowRepairAlarm = " + Customization.Current.IsShowRepairAlarm);
                    if (Customization.Current.IsShowRepairAlarm)
                    {
                        // 20200928 2台AOI对1台AOI 修改 Start
                        //WaitVerify(m, FileUtils.GetFileContent3(Customization.Current.ShowRepairAlarmDirectory, FileUtils.IPY_RepairALARM_FILE, true));

                        WaitVerify(m, GetRepairAlarmContent());
                        // 20200928 2台AOI对1台AOI 修改 End
                    }
                    // 20200909 数据上传异常需返回AOI机台停机报警 追加 End

                    // 20200927 指定元件报警弹窗 追加 Start
                    if (Customization.Current.AssignCompAlarm.IsEnabled && ExportAssignCompAlarmManager.Current.IsAssignCompAlarm)
                    {
                        string error = "指定元件检测不良，请确认";
                        WaitVerify(m, error);
                        ExportAssignCompAlarmManager.Current.IsAssignCompAlarm = false;
                    }
                    // 20200927 指定元件报警弹窗 追加 End

                    // 20210324 DB异常对应 追加 Start
                    if (GlobalDataManager.Current.IsDBError)
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) IsDBError = " + GlobalDataManager.Current.IsDBError);
                        //Log4Net.Warn("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) IsDBError = " + GlobalDataManager.Current.IsDBError);
                        // 20250221 报警后提供排查原因 【ygs】 追加 Start
                        string errorContent = ExportCommonShopfloorManager.Current.GetAlarmStr(1);
                        // 20250221 报警后提供排查原因 【ygs】 追加 End
                        string error = "网络异常，请退出自动运行 "+errorContent;
                        WaitVerify(m, error);

                        GlobalDataManager.Current.IsDBError = false;
                        return ExitState.Current;
                    }
                    // 20210324 DB异常对应 追加 End

                    // 20200416 富士康程序定时检测报警 追加 Start
                    if (Customization.Current.FoxconnNotification.IsEnabled && AutoRunSettings.Default.IsProgramChangeNotification)
                    {
                        DateTime nowDate = DateTime.Now;

                        string defaultSecond = ":00";

                        string date = nowDate.ToString("yyyy-MM-dd");
                        string setDateTime = date + " " + Customization.Current.FoxconnNotification.TriggerTime + defaultSecond;
                        DateTime setNotifyTime = DateTimeUtils.GetDateTimeFromString(setDateTime, DateTimeUtils.DATETIME_FORMAT);

                        string endDateTimeStr = DateTimeUtils.AddHour(setNotifyTime, 24);
                        DateTime endDateTime = DateTimeUtils.GetDateTimeFromString(endDateTimeStr, DateTimeUtils.DATETIME_FORMAT);


                        //判定当前时间是否超过-今日报警时间
                        if (DateTime.Compare(nowDate, setNotifyTime) >= 0)
                        {
                            Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine StateTransitionVisitor setNotifyTime = " + setNotifyTime.ToString());

                            string lastNotifyTimeStr = GetFoxconnNotificationFileResult();
                            if (lastNotifyTimeStr != string.Empty)
                            {
                                DateTime lastNotifyTime = DateTimeUtils.GetDateTimeFromString(lastNotifyTimeStr, DateTimeUtils.DATETIME_FORMAT);

                                //判定报警是否今日
                                if (DateTime.Compare(lastNotifyTime, setNotifyTime) >= 0 && DateTime.Compare(endDateTime, lastNotifyTime) >= 0)
                                {
                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine StateTransitionVisitor lastNotifyTime = " + lastNotifyTime.ToString() + " endDateTime = " + endDateTime.ToString());
                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine StateTransitionVisitor GoState Already Notified Today !");
                                }
                                else
                                {
                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine StateTransitionVisitor lastNotifyTime = " + lastNotifyTime.ToString() + " endDateTime = " + endDateTime.ToString());
                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine StateTransitionVisitor GoState  Notify Now !");

                                    //如果旧文件保存的 删除并弹框处理、写入新的时间戳
                                    DeleteFoxconnNotificationFile();

                                    //报警
                                    IBatchOperationInline opNotify = m.CreateBatchOperationInline();
                                    IOperationResult opNotifyResult = null;
                                    opNotify.ClearLampBlink();
                                    opNotify.SetRedAndBuzzer();
                                    opNotifyResult = opNotify.Execute(MachineParams.Current.OperationStepTimeout);
                                    opNotifyResult.Wait();

                                    Thread.Sleep(1500);

                                    IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                    IOperationResult opResult2 = null;
                                    op2.SetGreenLampOn();
                                    opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                    opResult2.Wait();

                                    IBatchOperationInline op3 = m.CreateBatchOperationInline();
                                    IOperationResult opResult3 = null;
                                    op3.SetBuzzer(false);
                                    opResult3 = op3.Execute(MachineParams.Current.OperationStepTimeout);
                                    opResult3.Wait();

                                    do
                                    {
                                        DateTime currentDateTime = DateTime.Now;
                                        string currentDateTimeStr = currentDateTime.ToString();
                                        Thread.Sleep(300);
                                        NotifyMessageBoxShow();

                                        //存入当前时间戳
                                        CreateFoxconnNotificationFile(currentDateTimeStr);

                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> FoxconnNotification currentDateTimeStr = " + currentDateTimeStr);
                                    } while (!GlobalDataManager.Current.IsFoxconnNotificationPassWordOk);

                                }
                            }
                            else
                            {
                                //报警
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> FoxconnNotification lastNotifyTimeStr is string.Empty ");
                                IBatchOperationInline opNotify = m.CreateBatchOperationInline();
                                IOperationResult opNotifyResult = null;

                                opNotify.ClearLampBlink();
                                opNotify.SetRedAndBuzzer();
                                opNotifyResult = opNotify.Execute(MachineParams.Current.OperationStepTimeout);
                                opNotifyResult.Wait();

                                Thread.Sleep(1500);

                                IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                IOperationResult opResult2 = null;

                                //op2.ClearLampBuzzer();
                                op2.SetBuzzer(false);
                                opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                opResult2.Wait();

                                IBatchOperationInline op3 = m.CreateBatchOperationInline();
                                IOperationResult opResult3 = null;
                                op3.SetGreenLampOn();
                                opResult3 = op3.Execute(MachineParams.Current.OperationStepTimeout);
                                opResult3.Wait();
                                // 弹框处理
                                do
                                {
                                    DateTime currentDateTime = DateTime.Now;
                                    string currentDateTimeStr = currentDateTime.ToString();
                                    Thread.Sleep(300);
                                    NotifyMessageBoxShow();
                                    //存入当前时间戳
                                    CreateFoxconnNotificationFile(currentDateTimeStr);

                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> FoxconnNotification currentDateTimeStr = " + currentDateTimeStr);
                                } while (!GlobalDataManager.Current.IsFoxconnNotificationPassWordOk);
                            }
                        }
                    }
                    // 20200416 富士康程序定时检测报警 追加 End

                    // 20220225 移远直通率报警 追加 Start
                    ExportQisdaShopfloorManager.Current.IpyControls(m, GlobalDataManager.Current.BoardName, LC.SN, 1);
                    // 20220225 移远直通率报警 追加 End

                    Holly.Log.HlLogger.Write("HOLLY AOI ====> ImageAcquisitionMachine ZdtcoIPYAlarm = " + Customization.Current.ZdtcoIPYAlarm.IsEnabled);
                    // 20200730 鹏鼎稽核直通率报警 追加 Start
                    // 20210110 鹏鼎直通率报警界面修改 修改 Start
                    //if (Customization.Current.ZdtcoIPYAlarm.IsEnabled)

                    if (Customization.Current.ZdtcoIPYAlarm.IsEnabled && AutoRunSettings.Default.ZdtcoIPYAlarm
                        && !Customization.Current.ZdtcoIPYAlarm.IPYAlarmDirectory.Equals(""))
                    // 20210110 鹏鼎直通率报警界面修改 修改 End
                    {
                        // 20200911 故障对应 修改 Start
                        //string isIPYAlarm = ExportZdtcoIPYAlarmManger.Current.GetFileContent(Customization.Current.ZdtcoIPYAlarm.IPYAlarmDirectory, "AlarmOKNGFile");                        
                        //if (!Convert.ToBoolean(isIPYAlarm))
                        Holly.Log.HlLogger.Write("HOLLY AOI ====> ImageAcquisitionMachine ZdtcoIPYAlarm = " + Customization.Current.ZdtcoIPYAlarm.IsEnabled);
                        //Log4Net.Info("HOLLY AOI ====> ImageAcquisitionMachine ZdtcoIPYAlarm = " + Customization.Current.ZdtcoIPYAlarm.IsEnabled);
                        bool isNotIPYAlarm = ExportZdtcoIPYAlarmManger.Current.GetAlarmContent(Customization.Current.ZdtcoIPYAlarm.IPYAlarmDirectory, FileUtils.IPY_ALARM_FILE_Rail1);
                        Holly.Log.HlLogger.Write("HOLLY AOI ====> ImageAcquisitionMachine isNotIPYAlarm = " + isNotIPYAlarm);
                        //Log4Net.Info("HOLLY AOI ====> ImageAcquisitionMachine isNotIPYAlarm = " + isNotIPYAlarm);
                        if (!isNotIPYAlarm)
                        // 20200911 故障对应 修改 End
                        {
                            // 20200911 故障对应 修改 Start
                            //UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                            //    new Action(
                            //        delegate ()
                            //        {
                            //            IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                            //            messageManager.ShowError(Lang.UI.UI_Status_ZdtcoIPYAlarmed);
                            //        }));

                            // 20210519 鹏鼎稽核直通率报警间隔分钟数 修改 Start
                            //WaitVerify(m, Lang.UI.UI_Status_ZdtcoIPYAlarmed);

                            if (ExportZdtcoIPYAlarmManger.Current.IsCanAlarm(DateTime.Now))
                            {
                                WaitVerify(m, Lang.UI.UI_Status_ZdtcoIPYAlarmed);
                            }
                            // 20210519 鹏鼎稽核直通率报警间隔分钟数 修改 End
                            // 20200911 故障对应 修改 End

                            //20200918 鹏鼎稽核直通率 追加 Start
                            ExportZdtcoIPYAlarmManger.Current.DelFile(Customization.Current.ZdtcoIPYAlarm.IPYAlarmDirectory, FileUtils.IPY_ALARM_FILE_Rail1);
                            //20200918 鹏鼎稽核直通率 追加 End  
                        }
                        //20200918 鹏鼎稽核直通率 删除 Start
                        //ExportZdtcoIPYAlarmManger.Current.DelFile(Customization.Current.ZdtcoIPYAlarm.IPYAlarmDirectory, FileUtils.IPY_ALARM_FILE);
                        //20200918 鹏鼎稽核直通率 删除 End
                    }
                    // 20200730 鹏鼎稽核直通率报警 追加 End

                    // 20211129 【臻鼎】产品直通率报警 追加 Start
                    if (Customization.Current.FPYAlarm.IsEnabled)
                    {
                        bool isNotFPYAlarm = ExportZdtcoIPYAlarmManger.Current.GetAlarmContent(Customization.Current.FPYAlarm.FPYAlarmDirectory, FileUtils.FPY_ALARM_FILE_Rail1);
                        if (!isNotFPYAlarm)
                        {
                            WaitVerify(m, Lang.UI.UI_Status_FPYAlarm);

                            string filePath = Path.Combine(Customization.Current.FPYAlarm.FPYAlarmDirectory, FileUtils.FPY_ALARM_FILE_Rail1);
                            File.Delete(filePath);
                        }
                    }
                    // 20211129 【臻鼎】产品直通率报警 追加 End

                    //臻鼎检测直通率报警
                    // 20200730 鹏鼎稽核直通率报警 修改 Start
                    //if (Customization.Current.ZdtcoIPYAlarm.IsEnabled && GlobalDataManager.Current.BoardName != string.Empty)

                    Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) Customization.Current.ZdtcoIPYAlarm.IsEnabled = " + Customization.Current.ZdtcoIPYAlarm.IsEnabled.ToString()
                        + ";" + "GlobalDataManager.Current.BoardName = " + GlobalDataManager.Current.BoardName + ";" + "Customization.Current.ZdtcoIPYAlarm.IPYAlarmDirectory = " + Customization.Current.ZdtcoIPYAlarm.IPYAlarmDirectory);
                    // 20210110 鹏鼎直通率报警界面修改 修改 Start
                    //if (Customization.Current.ZdtcoIPYAlarm.IsEnabled && 
                    //    GlobalDataManager.Current.BoardName != string.Empty && 
                    //    Customization.Current.ZdtcoIPYAlarm.IPYAlarmDirectory.Equals(""))

                    if ((Customization.Current.ZdtcoIPYAlarm.IsEnabled && AutoRunSettings.Default.ZdtcoIPYAlarm) &&
                        GlobalDataManager.Current.BoardName != string.Empty &&
                        Customization.Current.ZdtcoIPYAlarm.IPYAlarmDirectory.Equals(""))
                    // 20210110 鹏鼎直通率报警界面修改 修改 End
                    // 20200730 鹏鼎稽核直通率报警 修改 End
                    {
                        DateTime nowDate = DateTime.Now;

                        DateTime fromDate;
                        DateTime toDate;
                        if (Customization.Current.ZdtcoIPYAlarm.IsByHour)
                        {
                            fromDate = Convert.ToDateTime(nowDate.ToString("yyyy-MM-dd HH:00:00"));
                            toDate = fromDate.AddHours(Customization.Current.ZdtcoIPYAlarm.Hours);
                        }
                        else
                        {
                            DateTime dtReportDate;
                            var cutDate = Convert.ToDateTime(nowDate.Date.ToString("yyyy-MM-dd") + " " + Customization.Current.ZdtcoIPYAlarm.CutTime);
                            if (nowDate >= cutDate)
                            {
                                dtReportDate = cutDate;
                            }
                            else
                            {
                                dtReportDate = cutDate.AddDays(-1);
                            }

                            fromDate = dtReportDate;
                            toDate = nowDate;
                        }

                        if (Customization.Current.ZdtcoIPYAlarm.IsFromDB)
                        {
                            RepairDBEntities ctx = RepairDBAccess.Current.GetRepairDBEntities();
                            List<SummaryZdtco_Result> list;

                            if (Customization.Current.ZdtcoIPYAlarm.IsByBlock)
                            {
                                list = ctx.SummaryZdtcoByBlock(GlobalDataManager.Current.BoardName, fromDate, toDate).ToList();
                            }
                            else
                            {
                                list = ctx.SummaryZdtco(GlobalDataManager.Current.BoardName, fromDate, toDate).ToList();
                            }

                            int PCB_PassOK = 0;
                            int PCB_OK = 0;

                            foreach (var i in list)
                            {
                                PCB_PassOK = Convert.ToInt32(i.PCB_PassOK);
                                PCB_OK = Convert.ToInt32(i.PCB_OK);
                            }
                            Holly.Log.HlLogger.Write("HOLLY AOI ====> ImageAcquisitionMachine PCB_PassOK = " + PCB_PassOK);
                            Holly.Log.HlLogger.Write("HOLLY AOI ====> ImageAcquisitionMachine PCB_OK = " + PCB_OK);
                            if ((PCB_OK) > 0)
                            {
                                double ipy = Math.Round(100.0 * (PCB_PassOK) / (PCB_OK), 2);
                                Holly.Log.HlLogger.Write("HOLLY AOI ====> ImageAcquisitionMachine ipy = " + ipy);
                                // 20210110 鹏鼎直通率报警界面修改 修改 Start
                                //if (ipy < Customization.Current.ZdtcoIPYAlarm.IPY)

                                //20240219 直通率页面化 【张晨铖】 修改 Start
                                //double ipySetValue = AutoRunSettings.Default.IPY == 0 ? Customization.Current.ZdtcoIPYAlarm.IPY : AutoRunSettings.Default.IPY;

                                double ipySetValue = 0;
                                if (AutoRunSettings.Default.ZdtcoIPYForBoard)
                                {
                                    ipySetValue = ExportPengDingShopfloorManager.Current.IPY;
                                }
                                else
                                {
                                    ipySetValue = AutoRunSettings.Default.IPY == 0 ? Customization.Current.ZdtcoIPYAlarm.IPY : AutoRunSettings.Default.IPY;
                                }
                                //20240219 直通率页面化 【张晨铖】 修改 End

                                Holly.Log.HlLogger.Write("HOLLY AOI ====> ImageAcquisitionMachine ipySetValue = " + ipySetValue);

                                // 20220125 鹏鼎直通率报警间隔板数 修改 Start
                                //if (ipy < ipySetValue)

                                if (ipy < ipySetValue && ExportZdtcoIPYAlarmManger.Current.IsCanAlarm(DateTime.Now))
                                // 20220125 鹏鼎直通率报警间隔板数 修改 End
                                // 20210110 鹏鼎直通率报警界面修改 修改 Start
                                {
                                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                    ExportShanWeiWatchBoardBYDShopfloorManager.Current.WriteAlarm(1, Lang.UI.UI_Status_ZdtcoIPYAlarmed, DateTime.Now);
                                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End
                                    UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                                new Action(
                                                    delegate ()
                                                    {
                                                        //20230717 log输出【ygs】 Start 
                                                        ExportLogOuputManager.Current.OuputLog(11, Lang.UI.UI_Status_ZdtcoIPYAlarmed);
                                                        //20230717 log输出【ygs】 End

                                                        // 20240406 启动屏幕录制程序 追加 Start                                                    
                                                        SocketScreenRecorder.Current.clientSendStart();
                                                        // 20240406 启动屏幕录制程序 追加 End

                                                        IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                                        messageManager.ShowError(Lang.UI.UI_Status_ZdtcoIPYAlarmed);

                                                        //if (Customization.Current.ZdtcoIPYAlarm.IsByHour)
                                                        //{
                                                        //    ProblemInputDialog dialog = new ProblemInputDialog();
                                                        //    dialog.Show();
                                                        //}
                                                    }));
                                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                    ExportShanWeiWatchBoardBYDShopfloorManager.Current.UpdateAlarm(1, Lang.UI.UI_Status_ZdtcoIPYAlarmed, DateTime.Now);
                                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End
                                    // 20220125 鹏鼎直通率报警间隔板数 追加 Start
                                    ExportZdtcoIPYAlarmManger.Current.LastAlarmDateTime = DateTime.Now.AddMinutes(Customization.Current.ZdtcoIPYAlarm.IntervalMinutes);
                                    ExportZdtcoIPYAlarmManger.Current.TestPCBCount = 0;
                                    // 20220125 鹏鼎直通率报警间隔板数 追加 End
                                    // 20230209 E05区分 追加 Start   
                                    GlobalDataManager.Current.EquipmentErrorCode = "E31";//检测直通率报警
                                    Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) (Customization.Current.ZdtcoIPYAlarm.IsFromDB==True) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                    //Log4Net.Info("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) (Customization.Current.ZdtcoIPYAlarm.IsFromDB==True) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                    // 20230209 E05区分 追加 End 
                                    //20230706  查找E05 【徐明武】 修改 Start
                                    //return DesyncState.Current;
                                    {
                                        Holly.Log.HlLogger.Write("E05 => 7 ");
                                        return DesyncState.Current;
                                    }
                                    //20230706  查找E05 【徐明武】 修改 End 
                                }
                            }
                        }
                        else
                        {
                            string reportDate = fromDate.ToString("yyyy_MM_dd");
                            string summaryDataPath = GetSummaryReportPath(UserSettings.AutoRunSettings.Default.ExportSummaryReportData, GlobalDataManager.Current.BoardName, reportDate);

                            if (File.Exists(summaryDataPath))
                            {
                                XmlDocument doc = new XmlDocument();
                                doc.Load(summaryDataPath);
                                XmlNode node = doc.DocumentElement.SelectSingleNode("/Summary");
                                int PCB_Total = Convert.ToInt32(node.Attributes["PCB_Total"].Value);
                                int PCB_Alarm = Convert.ToInt32(node.Attributes["PCB_Alarm"].Value);
                                int PCB_NG = Convert.ToInt32(node.Attributes["PCB_NG"].Value);

                                if ((PCB_Total - PCB_NG) > 0)
                                {
                                    double ipy = Math.Round(100.0 * (PCB_Total - PCB_Alarm) / (PCB_Total - PCB_NG), 2);
                                    // 20210110 鹏鼎直通率报警界面修改 修改 Start
                                    //if (ipy < Customization.Current.ZdtcoIPYAlarm.IPY)

                                    //20240219 直通率页面化 【张晨铖】 修改 Start
                                    //double ipySetValue = AutoRunSettings.Default.IPY == 0 ? Customization.Current.ZdtcoIPYAlarm.IPY : AutoRunSettings.Default.IPY;

                                    double ipySetValue = 0;
                                    if (AutoRunSettings.Default.ZdtcoIPYForBoard)
                                    {
                                        ipySetValue = ExportPengDingShopfloorManager.Current.IPY;
                                    }
                                    else
                                    {
                                        ipySetValue = AutoRunSettings.Default.IPY == 0 ? Customization.Current.ZdtcoIPYAlarm.IPY : AutoRunSettings.Default.IPY;
                                    }
                                    //20240219 直通率页面化 【张晨铖】 修改 Start

                                    // 20220125 鹏鼎直通率报警间隔板数 修改 Start
                                    //if (ipy < ipySetValue)

                                    if (ipy < ipySetValue && ExportZdtcoIPYAlarmManger.Current.IsCanAlarm(DateTime.Now))
                                    // 20220125 鹏鼎直通率报警间隔板数 修改 End
                                    // 20210110 鹏鼎直通率报警界面修改 修改 End
                                    {
                                        // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                        ExportShanWeiWatchBoardBYDShopfloorManager.Current.WriteAlarm(1, Lang.UI.UI_Status_ZdtcoIPYAlarmed, DateTime.Now);
                                        // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End
                                        UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                                    new Action(
                                                        delegate ()
                                                        {
                                                            //20230717 log输出【ygs】 Start 
                                                            ExportLogOuputManager.Current.OuputLog(11, Lang.UI.UI_Status_ZdtcoIPYAlarmed);
                                                            //20230717 log输出【ygs】 End

                                                            // 20240406 启动屏幕录制程序 追加 Start                                                    
                                                            SocketScreenRecorder.Current.clientSendStart();
                                                            // 20240406 启动屏幕录制程序 追加 End

                                                            IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                                            messageManager.ShowError(Lang.UI.UI_Status_ZdtcoIPYAlarmed);

                                                            //if (Customization.Current.ZdtcoIPYAlarm.IsByHour)
                                                            //{
                                                            //    ProblemInputDialog dialog = new ProblemInputDialog();
                                                            //    dialog.Show();
                                                            //}
                                                        }));
                                        // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                        ExportShanWeiWatchBoardBYDShopfloorManager.Current.UpdateAlarm(3, Lang.UI.UI_Status_ZdtcoIPYAlarmed, DateTime.Now);
                                        // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End
                                        // 20220125 鹏鼎直通率报警间隔板数 追加 Start
                                        ExportZdtcoIPYAlarmManger.Current.LastAlarmDateTime = DateTime.Now.AddMinutes(Customization.Current.ZdtcoIPYAlarm.IntervalMinutes);
                                        ExportZdtcoIPYAlarmManger.Current.TestPCBCount = 0;
                                        // 20220125 鹏鼎直通率报警间隔板数 追加 End
                                        // 20230209 E05区分 追加 Start   
                                        GlobalDataManager.Current.EquipmentErrorCode = "E31";//检测直通率报警
                                        Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState)(Customization.Current.ZdtcoIPYAlarm.IsFromDB==False) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                        //Log4Net.Warn("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState)(Customization.Current.ZdtcoIPYAlarm.IsFromDB==False) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                        // 20230209 E05区分 追加 End 
                                        //20230706  查找E05 【徐明武】 修改 Start
                                        //return DesyncState.Current;
                                        {
                                            Holly.Log.HlLogger.Write("E05 => 8 ");
                                            return DesyncState.Current;
                                        }
                                        //20230706  查找E05 【徐明武】 修改 End 
                                    }
                                }
                            }
                        }

                        // 20220125 鹏鼎直通率报警间隔板数 追加 Start
                        // 20220308 鹏鼎直通率报警BUG修正 删除 Start
                        //ExportZdtcoIPYAlarmManger.Current.TestPCBCount++;
                        // 20220308 鹏鼎直通率报警BUG修正 删除 End
                        // 20220125 鹏鼎直通率报警间隔板数 追加 End

                    }

                    // 20220308 鹏鼎直通率报警BUG修正 追加 Start
                    ExportZdtcoIPYAlarmManger.Current.TestPCBCount++;
                    // 20220308 鹏鼎直通率报警BUG修正 追加 End

                    IBatchOperationInline op = m.CreateBatchOperationInline();
                    IOperationResult opResult = null;

                    GlobalDataManager.Current.IsPassOK1 = string.Empty;

                    // 20240809 太原出差修改 【王晨】 删除 Start
                    //reportManager.ClearInspection(1);
                    // 20240809 太原出差修改 【王晨】 删除 End

                    //op.ReadySignal(false);
                    //op.ClearLampBlink();
                    //op.SetGreenLampOn();
                    //进板
                    // 20220713 进板时间从进板检测开始计算 删除 Start
                    //// 20220712 进板到出板时间从BoardInStart开始计算 追加 Start
                    //ExportProcessDataShopfloorManager.Current.BoardInStart(DateTime.Now, 1);
                    //// 20220712 进板到出板时间从BoardInStart开始计算 追加 End
                    // 20220713 进板时间从进板检测开始计算 删除 End
                    if (AutoRunSettings.Default.IsOfflineMode && AutoRunSettings.Default.AutoRunOfflineMode == (int)AutoRunOfflineMode.CyclingCapturing && context._isBoardIn)
                    {
                        //夹板一直拍照
                        //op.ReadySignal(false);
                        op.ClearLampBlink();
                        op.SetGreenLampOn();
                        opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                    }
                    else if (AutoRunSettings.Default.IsOfflineMode && AutoRunSettings.Default.AutoRunOfflineMode == (int)AutoRunOfflineMode.ExitToExit)
                    {
                        //出口到出口
                        IBatchOperationInline op1 = m.CreateBatchOperationInline();
                        op1.ClearCommand();
                        IOperationResult opResult1 = op1.Execute(MachineParams.Current.OperationStepTimeout);
                        opResult1.Wait();

                        op.ClearBoard();
                        opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                        opResult.Wait();
                        progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_ClearingBoard);

                        Holly.Log.HlLogger.Write("HOLLY AOI ============> Exit To Exit ClearBoard ");

                        /////////////////////////////////////////////////////////m.UpdateInline();
                        //context.CheckInlineMachineStatus();
                        while ((m.CommandStatusInline & CommandStatusInline.BoardInside) == 0)
                        {
                            if (context.StopFlag)
                                return ExitState.Current;
                            m.UpdateInline();
                            if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                            {
                                //20230706  查找E05 【徐明武】 修改 Start
                                //return DesyncState.Current;
                                {
                                    Holly.Log.HlLogger.Write("E05 => 9 ");
                                    return DesyncState.Current;
                                }
                                //20230706  查找E05 【徐明武】 修改 End 
                            }
                            //context.CheckInlineMachineStatus();
                            Thread.Sleep(50);
                        }

                        op = m.CreateBatchOperationInline();
                        op.BoardInManual();
                        opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                        opResult.Wait();
                        progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardIning);

                        m.UpdateInline();
                        //Holly.Log.HlLogger.Write("HOLLY AOI ============> Before M10 = " + ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardIn) != 0) + "  X15 = " + ((m.InputStatusInline & InputStatusInline.TopCylinderUp) != 0) + "  X16 = " + ((m.InputStatusInline & InputStatusInline.TopCylinderDown) != 0) + "  Y12 = " + ((m.OutputStatusInline & OutputStatusInline.TopCylinderUp) != 0));

                        //while (!(((m.CompleteProcessStatus & CompleteProcessStatus1.BoardIn) != 0) && ((m.InputStatusInline & InputStatusInline.TopCylinderUp) != 0) && ((m.InputStatusInline & InputStatusInline.TopCylinderDown) == 0) && ((m.OutputStatusInline & OutputStatusInline.TopCylinderUp) != 0)))
                        while (((m.CompleteProcessStatus & CompleteProcessStatus1.BoardIn) == 0))
                        {
                            if (context.StopFlag)
                                return ExitState.Current;

                            m.UpdateInline();
                            if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                            {
                                if (m.CurrentInputs.EmergencyButton)
                                {
                                    Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EmergencyButton return DesyncState");
                                }
                                if (m.CurrentInputs.SafeSensor)
                                {
                                    Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) SafeSensor return DesyncState");
                                }
                                if ((m.CommandStatusInline & CommandStatusInline.TimeOut) != 0)
                                {
                                    Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) TimeOut return DesyncState");
                                }
                                if ((m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                {
                                    Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) TwoBoardInside return DesyncState");
                                }

                                //20230706  查找E05 【徐明武】 修改 Start
                                //return DesyncState.Current;
                                {
                                    Holly.Log.HlLogger.Write("E05 => 10 ");
                                    return DesyncState.Current;
                                }
                                //20230706  查找E05 【徐明武】 修改 End 
                            }
                            //context.CheckInlineMachineStatus();

                            Thread.Sleep(100);
                        }
                    }
                    else
                    {
                        // 20220928 新预警 追加 Start
                        //报警元件列表启用并且机器报警启用
                        if (AutoRunSettings.Default.IsMachineAlarmEnabled)
                        {
                            // 20211221 武汉富士康报警预警 删除 Start
                            #region 老预警
                            // 20210910 武汉富士康报警预警 修改 Start
                            //if (App.Current.TryFindResource("MachineAlarmList") != null)
                            //{
                            //    op = m.CreateBatchOperationInline();
                            //    opResult = null;
                            //    op.ClearLampBlink();
                            //    op.SetRedAndBuzzer();
                            //    opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                            //    opResult.Wait();

                            //    UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                            //                    new Action(
                            //                        delegate()
                            //                        {
                            //                            IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                            //                            messageManager.ShowError(Lang.UI.UI_Status_CompAlarmExceed);
                            //                        }));
                            //    // 20210511 [机器报警][报警元件]时间冲突 修改 Start
                            //    //GlobalDataManager.Current.StartDateTime = DateTime.Now;

                            //    GlobalDataManager.Current.MachineAlarmStartDateTime = GlobalDataManager.Current.GetDateTimeNowSyncRepair();
                            //    // 20210511 [机器报警][报警元件]时间冲突 修改 End
                            //    App.Current.ThreadSafeSetResource("MachineAlarmList", null);

                            //    IBatchOperationInline op2 = m.CreateBatchOperationInline();
                            //    IOperationResult opResult2 = null;

                            //    op2.SetBuzzer(false);
                            //    opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                            //    opResult2.Wait();

                            ////if(Customization.Current.)

                            //    Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> AutoRunSettings.Default.IsMachineAlarmEnabled");
                            //    return DesyncState.Current;
                            //}
                            #endregion
                            #region 新预警
                            //bool isSlaveCheckAlarmList = false;
                            //string slaveAlarmList = string.Empty;
                            //if (Customization.Current.DoubleSideAOI.IsMaster)
                            //{
                            //    isSlaveCheckAlarmList = true;
                            //    //返回从面报警内容
                            //    //ExportCacheComAlarmManager.Current.GetSlaveAlarmList(slaveAlarmList, Customization.Current.DoubleSideAOI.Side == "A" ? "B" : "A", 1, GlobalDataManager.Current.BoardName);
                            //    slaveAlarmList = ExportCacheComAlarmManager.Current.GetSlaveAlarmList(slaveAlarmList, 1, Customization.Current.DoubleSideAOI.Side);
                            //    Holly.Log.HlLogger.Write($"HOLLY AOI   ============>ImageAcquisitionMachine.Visit(GoState) Customization.Current.DoubleSideAOI.IsMaster={Customization.Current.DoubleSideAOI.IsMaster}");
                            //}
                            //Holly.Log.HlLogger.Write($"HOLLY AOI ============>ImageAcquisitionMachine.Visit(GoState) isSlaveCheckAlarmList={isSlaveCheckAlarmList} slaveAlarmList=" + slaveAlarmList);
                            //Holly.Log.HlLogger.Write($"HOLLY AOI ============>ImageAcquisitionMachine.Visit(GoState) isMachineAlarmList={App.Current.TryFindResource("MachineAlarmList") != null} and isSlaveCheckAlarmList={isSlaveCheckAlarmList}");

                            //bool isNumberTimes = false;
                            //// 20211201 武汉富士康预警 修改 Start
                            ////主面报警（满足主面报警计数）
                            //bool isMasterAlarm = false;
                            //if (AutoRunSettings.Default.IsMachineAlarmBySameCompEnabled)
                            //{
                            //    Holly.Log.HlLogger.Write($"HOLLY AOI ============>ImageAcquisitionMachine.Visit(GoState) ExportCacheComAlarmManager.Current.numberTime=" + ExportCacheComAlarmManager.Current.numberTime);
                            //    Holly.Log.HlLogger.Write($"HOLLY AOI ============>ImageAcquisitionMachine.Visit(GoState) ExportCacheComAlarmManager.AutoRunSettings.Default.ContinuedSameCompPCs=" + AutoRunSettings.Default.ContinuedSameCompPCs);
                            //    //主面报警
                            //    if (Customization.Current.DoubleSideAOI.IsMaster)
                            //    {
                            //        if (AutoRunSettings.Default.ContinuedSameCompPCs == ExportCacheComAlarmManager.Current.numberTime || !string.IsNullOrEmpty(slaveAlarmList))
                            //        {
                            //            isMasterAlarm = true;
                            //            isNumberTimes = true;
                            //            //报警记录数
                            //            ExportCacheComAlarmManager.Current.numberTime = 0;
                            //            //板子记录数
                            //            ExportCacheComAlarmManager.Current.blockContinuationTimes = 0;
                            //            //Ok板记录数
                            //            ExportCacheComAlarmManager.Current.OKcontinuationTimes = 0;
                            //            ExportCacheComAlarmManager.Current.isAlarm = true;
                            //        }
                            //    }
                            //    else
                            //    {
                            //        if (AutoRunSettings.Default.ContinuedSameCompPCs == ExportCacheComAlarmManager.Current.numberTime)
                            //        {
                            //            //报警记录数
                            //            ExportCacheComAlarmManager.Current.numberTime = 0;
                            //            //板子记录数
                            //            ExportCacheComAlarmManager.Current.blockContinuationTimes = 0;
                            //            //Ok板记录数
                            //            ExportCacheComAlarmManager.Current.OKcontinuationTimes = 0;
                            //            ExportCacheComAlarmManager.Current.isAlarm = true;
                            //        }
                            //    }
                            //}
                            //// 20211201 武汉富士康预警 修改 End
                            //Holly.Log.HlLogger.Write($"HOLLY AOI ============>ImageAcquisitionMachine.Visit(GoState) ExportCacheComAlarmManager.Current.numberTime=" + ExportCacheComAlarmManager.Current.numberTime);
                            #endregion
                            // 20211221 武汉富士康报警预警 删除 End
                            // 20211221 武汉富士康报警预警 修改 Start
                            string alarmMsg = string.Empty;
                            if (Customization.Current.WarningStatistics.IsEnabled)
                            {
                                if (!Customization.Current.WarningStatistics.IsFoxTaiYuan)
                                    alarmMsg = ExportCacheComAlarmManager.Current.AlertAlarmInfoMsg(1);
                                Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine  报警提示 = " + alarmMsg);
                                //Log4Net.Info("HOLLY AOI =====>ImageAcquisitionMachine  报警提示 = " + alarmMsg);
                                if (!string.IsNullOrEmpty(alarmMsg))
                                {
                                    // 20211221 武汉富士康报警预警 修改 End
                                    // 20211221 武汉富士康报警预警 删除 Start
                                    //if ((ExportCacheComAlarmManager.Current.IsCacheMachineAlarmList() || !string.IsNullOrEmpty(slaveAlarmList)) && isSlaveCheckAlarmList && isNumberTimes)
                                    //{
                                    // 20211221 武汉富士康报警预警 删除 End
                                    // 20230206 报警windows锁屏 追加 Start
                                    if (AutoRunSettings.Default.IsWindowsLockScreenEnabled)
                                    {
                                        LockWorkStation();
                                    }
                                    // 20230206 报警windows锁屏 追加 End
                                    // 20230915 弹框提示使用WinForm 【刘亚杰】 修改 Start
                                    #region 删除
                                    //UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                    //                new Action(
                                    //                    delegate ()
                                    //                    {
                                    //                        op = m.CreateBatchOperationInline();
                                    //                        opResult = null;
                                    //                        op.ClearLampBlink();
                                    //                        op.SetRedAndBuzzer();
                                    //                        opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                    //                        opResult.Wait();

                                    //                        //20230717 log输出【ygs】 Start 
                                    //                        ExportLogOuputManager.Current.OuputLog(11, alarmMsg + Lang.UI.UI_Status_CompAlarmExceed);
                                    //                        //20230717 log输出【ygs】 End
                                    //                        IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                    //                        messageManager.ShowError(alarmMsg + Lang.UI.UI_Status_CompAlarmExceed);

                                    //                        // 20211207 武汉富士康报警预警 修改 Start
                                    //                        ExportCacheComAlarmManager.Current.ClearCacheMachineAlarmList();
                                    //                        // 20211207 武汉富士康报警预警 修改 End

                                    //                        IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                    //                        IOperationResult opResult2 = null;
                                    //                        op2.SetBuzzer(false);
                                    //                        opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                    //                        opResult2.Wait();
                                    //                    }));
                                    #endregion

                                    if (Customization.Current.IsAlarmUseProgress)
                                    {
                                        op = m.CreateBatchOperationInline();
                                        opResult = null;
                                        op.ClearLampBlink();
                                        op.SetRedAndBuzzer();
                                        opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                        opResult.Wait();

                                        //20230717 log输出【ygs】 Start 
                                        ExportLogOuputManager.Current.OuputLog(11, alarmMsg + Lang.UI.UI_Status_CompAlarmExceed);
                                        //20230717 log输出【ygs】 End
                                        //IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                        //messageManager.ShowError(alarmMsg + Lang.UI.UI_Status_CompAlarmExceed);

                                        MessageManagerForm.Message = alarmMsg + Lang.UI.UI_Status_CompAlarmExceed;

                                        UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Background,
                                        new Action(delegate ()
                                        {
                                            MessageManagerForm.getstatus().Show();
                                        }));

                                        while (true)
                                        {
                                            Thread.Sleep(200);
                                            if (!MessageManagerForm.IsRun)
                                                break;

                                            if (!GlobalDataManager.Current.IsAutoRun)
                                                break;
                                            Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.GoState Waitting ... MessageManagerForm.IsRun = " + MessageManagerForm.IsRun);
                                            //Log4Net.Info("HOLLY AOI =====>ImageAcquisitionMachine.GoState Waitting ... MessageManagerForm.IsRun = " + MessageManagerForm.IsRun);
                                        }

                                        MessageManagerForm.getstatus().Close();

                                        // 20211207 武汉富士康报警预警 修改 Start
                                        ExportCacheComAlarmManager.Current.ClearCacheMachineAlarmList(1);
                                        // 20211207 武汉富士康报警预警 修改 End

                                        IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                        IOperationResult opResult2 = null;
                                        op2.SetBuzzer(false);
                                        opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                        opResult2.Wait();
                                    }
                                    else
                                    {
                                        // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                        ExportShanWeiWatchBoardBYDShopfloorManager.Current.WriteAlarm(1, alarmMsg + Lang.UI.UI_Status_CompAlarmExceed, DateTime.Now);
                                        // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End
                                        UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                            new Action(
                                            delegate ()
                                            {
                                                op = m.CreateBatchOperationInline();
                                                opResult = null;
                                                op.ClearLampBlink();
                                                op.SetRedAndBuzzer();
                                                opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                                opResult.Wait();

                                                //20230717 log输出【ygs】 Start 
                                                ExportLogOuputManager.Current.OuputLog(11, alarmMsg + Lang.UI.UI_Status_CompAlarmExceed);
                                                //20230717 log输出【ygs】 End

                                                // 20240406 启动屏幕录制程序 追加 Start                                                    
                                                SocketScreenRecorder.Current.clientSendStart();
                                                // 20240406 启动屏幕录制程序 追加 End

                                                IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                                messageManager.ShowError(alarmMsg + Lang.UI.UI_Status_CompAlarmExceed);

                                                // 20211207 武汉富士康报警预警 修改 Start
                                                ExportCacheComAlarmManager.Current.ClearCacheMachineAlarmList(1);
                                                // 20211207 武汉富士康报警预警 修改 End

                                                IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                                IOperationResult opResult2 = null;
                                                op2.SetBuzzer(false);
                                                opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                                opResult2.Wait();
                                            }));
                                        // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                        ExportShanWeiWatchBoardBYDShopfloorManager.Current.UpdateAlarm(3, alarmMsg + Lang.UI.UI_Status_CompAlarmExceed, DateTime.Now);
                                        // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End
                                    }
                                    // 20230915 弹框提示使用WinForm 【刘亚杰】 修改 End

                                    GlobalDataManager.Current.MachineAlarmStartDateTime = GlobalDataManager.Current.GetDateTimeNowSyncRepair();

                                    // 报警后清空当前的空文件,避免重测之后信号错乱
                                    ExportCacheComAlarmManager.Current.ClearRetest(1, LC.SN);

                                    // 20240613 太原报警停机增加权限解锁功能 【王晨】 追加 Start
                                    ExportCommonShopfloorManager.Current.ShowDialog();
                                    // 20240613 太原报警停机增加权限解锁功能 【王晨】 追加 End

                                    // 20240304 太原LQ修改 【王晨】 追加 Start
                                    //if (Customization.Current.IsNoBoardOutNG)
                                    //{
                                    //    return ExitState.Current;
                                    //}
                                    // 20240304 太原LQ修改 【王晨】 追加 End

                                    // 20220610 报警解锁 追加 Start
                                    if (Customization.Current.IsMachineAlarmInputPwd)
                                    {
                                        ExportAlarmInputPwdManager.Current.ShowAlarmInputPwd();
                                    }
                                    // 20220610 报警解锁 追加 End
                                    Holly.Log.HlLogger.Write("HOLLY AOI ============>ImageAcquisitionMachine.Visit(GoState) return DesyncState.Current");
                                    //Log4Net.Warn("HOLLY AOI ============>ImageAcquisitionMachine.Visit(GoState) return DesyncState.Current");
                                    // 20230209 E05区分 追加 Start   
                                    GlobalDataManager.Current.EquipmentErrorCode = "E32";//新预警
                                    Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) 新预警 EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                    //Log4Net.Warn("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) 新预警 EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                    // 20230209 E05区分 追加 End 
                                    //20230706  查找E05 【徐明武】 修改 Start
                                    //return DesyncState.Current;
                                    {
                                        Holly.Log.HlLogger.Write("E05 => 11 ");
                                        return DesyncState.Current;
                                    }
                                    //20230706  查找E05 【徐明武】 修改 End 
                                }
                            }
                            // 20210910 武汉富士康报警预警 修改 End
                        }
                        // 20220918 新预警 追击 End


                        //检查气压
                        if (Customization.Current.CheckAirPressure && !AutoRunSettings.Default.IsOfflineMode && (m.InputStatusInline & InputStatusInline.AirPressureSwitch) == 0)
                        {
                            op = m.CreateBatchOperationInline();
                            opResult = null;
                            op.ClearLampBlink();
                            op.SetRedAndBuzzer();
                            opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                            opResult.Wait();
                            // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                            ExportShanWeiWatchBoardBYDShopfloorManager.Current.WriteAlarm(1, Lang.UI.UI_Status_AirPressureWarning, DateTime.Now);
                            // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End
                            UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                            new Action(
                                                delegate ()
                                                {
                                                    //20230717 log输出【ygs】 Start 
                                                    ExportLogOuputManager.Current.OuputLog(11, Lang.UI.UI_Status_AirPressureWarning);
                                                    //20230717 log输出【ygs】 End
                                                    // 20240406 启动屏幕录制程序 追加 Start                                                    
                                                    SocketScreenRecorder.Current.clientSendStart();
                                                    // 20240406 启动屏幕录制程序 追加 End
                                                    IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                                    messageManager.ShowError(Lang.UI.UI_Status_AirPressureWarning);
                                                }));

                            IBatchOperationInline op2 = m.CreateBatchOperationInline();
                            IOperationResult opResult2 = null;

                            op2.SetBuzzer(false);
                            opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                            opResult2.Wait();
                            // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                            ExportShanWeiWatchBoardBYDShopfloorManager.Current.UpdateAlarm(3, Lang.UI.UI_Status_AirPressureWarning, DateTime.Now);
                            // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End
                            //ExportEquipmentRunStatusManager.Current.Export("Alarm", Lang.UI.UI_Status_AirPressureWarning);
                            Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> Customization.Current.CheckAirPressure 1");
                            //Log4Net.Warn("HOLLY AOI DesyncState============> Customization.Current.CheckAirPressure 1");
                            // 20230209 E05区分 追加 Start   
                            GlobalDataManager.Current.EquipmentErrorCode = "E33";//气压报警
                            Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                            //Log4Net.Warn("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                            // 20230209 E05区分 追加 End 
                            //20230706  查找E05 【徐明武】 修改 Start
                            //return DesyncState.Current;
                            {
                                Holly.Log.HlLogger.Write("E05 => 12 ");
                                return DesyncState.Current;
                            }
                            //20230706  查找E05 【徐明武】 修改 End 
                        }

                        //op.ClearCommand();
                        //if (!context._isBoardIn)
                        //{

                        // 20220906 南京西门子 追加 Start
                        if (Customization.Current.NanJingSiemensShopfloor.IsByScanner)
                        {
                            int time = 0;
                            while (!ExportNanJingSiemensShopfloorManager.Current.IsReceiveRFIDDate)
                            {
                                Thread.Sleep(100);
                                time += 100;
                                if (time % 5000 == 0)
                                {
                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) call ExportNanJingSiemensShopfloorManager.Current.IsReceiveRFIDDate is false ...wait 5s");
                                }
                                if (context.StopFlag)
                                    return ExitState.Current;

                                m.UpdateInline();
                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                {
                                    //20230706  查找E05 【徐明武】 修改 Start
                                    //return DesyncState.Current;
                                    {
                                        Holly.Log.HlLogger.Write("E05 => 13 ");
                                        return DesyncState.Current;
                                    }
                                    //20230706  查找E05 【徐明武】 修改 End 
                                }
                            }
                            if (GlobalDataManager.Current.IsAutoRun)
                            {
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) call ExportNanJingSiemensShopfloorManager.Current.ChangeProgramBySiemensBarcodes()");
                                // 20230413 切换程序需更新板长板宽 【刘红绅】 修改 Start
                                //ExportNanJingSiemensShopfloorManager.Current.ChangeProgramBySiemensMessage()
                                if (ExportNanJingSiemensShopfloorManager.Current.ChangeProgramBySiemensMessage())
                                {
                                    if (ExportNanJingSiemensShopfloorManager.Current.IsNeedUpdateParms)
                                    {
                                        ExportChangeProgramByScannerShopfloorMannager.Current.ChangeParms();
                                        ExportNanJingSiemensShopfloorManager.Current.IsNeedUpdateParms = false;
                                    }
                                }
                                // 20230413 切换程序需更新板长板宽 【刘红绅】 修改 End
                                ExportNanJingSiemensShopfloorManager.Current.IsReceiveRFIDDate = false;
                            }
                        }
                        // 20220906 南京西门子 追加 end
                        //20230622 惠州欣旺达自动换线 追加 start
                        if (Customization.Current.HuiZhouXinWangDaShopfloor.IsEnabled && AutoRunSettings2.Default.IsHZXWDMesEnabled && Customization.Current.HuiZhouXinWangDaShopfloor.IsOpenChangeLine)
                        {
                            Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) IsReceiveCallMethodData:" + ExportHZXWDShopfloorManager.Current.IsReceiveCallMethodData);

                            if (GlobalDataManager.Current.IsAutoRun && ExportHZXWDShopfloorManager.Current.IsReceiveCallMethodData)
                            {
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) GlobalDataManager.Current.IsAutoRun:" + GlobalDataManager.Current.IsAutoRun);
                                //调用设备程序 切换程序
                                if (ExportHZXWDShopfloorManager.Current.ChangeProgram(ExportHZXWDShopfloorManager.Current.ProgramName))//2.切换程式成功
                                {
                                    HuiZhouXinWangDaLogonDialog.Current.ReLogin(ExportHZXWDShopfloorManager.Current.MoNumber, ExportHZXWDShopfloorManager.Current.MachineID);//3.重新登录 4.确认提交后调用过站成功给中控电脑发消息从而转消息给下一条线
                                }
                                else
                                {
                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) ChangeProgram Failed");
                                    return DesyncState.Current;
                                }
                                ExportHZXWDShopfloorManager.Current.IsReceiveCallMethodData = false;
                                HuiZhouXinWangDaLogonDialog.Current.Transfer();//发送消息换线完成
                            }
                        }
                        //20230622 惠州欣旺达自动换线 追加 End
                        // 20230207 条码枪切程序 追加 Start

                        // 20230223 矽迈威条码切换程式 追加 Start 
                        if (Customization.Current.XiMaiWeiShopfloor.IsEnabled)
                        {
                            bool isSuccess = ExportXiMaiWeiShopfloorManager.Current.ChangeProgram();
                            //if (!isSuccess)
                            //{
                            //    Thread.Sleep(100);
                            //    return GoState.Current;
                            //}
                        }
                        // 20230223 矽迈威条码切换程式 追加 End

                        if (Customization.Current.ChangeProgramByScanner.IsEnabled && !Customization.Current.ChangeProgramByScanner.IsInMachine)
                        {
                            int time = 0;
                            while (!ExportChangeProgramByScannerShopfloorMannager.Current.IsReceiveDate)
                            {
                                Thread.Sleep(100);
                                time += 100;
                                if (time % 5000 == 0)
                                {
                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) call ExportChangeProgramByScannerShopfloorMannager.Current.IsReceiveDate is false ...wait 2s");
                                }
                                if (context.StopFlag)
                                    return ExitState.Current;

                                m.UpdateInline();
                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                {
                                    //20230706  查找E05 【徐明武】 修改 Start
                                    //return DesyncState.Current;
                                    {
                                        Holly.Log.HlLogger.Write("E05 => 14 ");
                                        return DesyncState.Current;
                                    }
                                    //20230706  查找E05 【徐明武】 修改 End 
                                }
                            }
                            if (GlobalDataManager.Current.IsAutoRun)
                            {
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) call ExportChangeProgramByScannerShopfloorMannager.Current.ChangeProgramByMessage()");
                                ExportChangeProgramByScannerShopfloorMannager.Current.ChangeProgramByMessage();
                                ExportChangeProgramByScannerShopfloorMannager.Current.IsReceiveDate = false;
                            }
                            else
                            {
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) call ExportChangeProgramByScannerShopfloorMannager.Current.ChangeProgramByMessage() TimeOut");
                            }
                        }
                        // 20230207 条码枪切程序 追加 End

                        // 20230223 闻泰根据工单号切程序 【刘红绅】 追加 Start
                        if (!ExportWenTaiChangeProgramesShopfloor.Current.ChangePrograme())
                        {
                            return ExitState.Current;
                        }
                        // 20230223 闻泰根据工单号切程序 【刘红绅】 追加 End

                        //20230713 宁波均胜新能源汽车mes修改【张晨铖】 追加 Start
                        bool isNingBoJunShengChangeProgram = ExportNingBoJunShengShopfloorManager.Current.ChangeProgram();
                        //20230713 宁波均胜新能源汽车mes修改【张晨铖】 追加 End

                        //20230801 茂名欣旺达Mes【张晨铖】 追加 Start
                        if (!ExportMaoMingXWDShopfloorManager.Current.ChangeProgram())
                        {
                            return ExitState.Current;
                        }
                        //20230801 茂名欣旺达Mes【张晨铖】 追加 End

                        // 20230407 汇川TCP/IP[李伟峰] 追加 Start
                        if (Customization.Current.huiChuanTCPShopfloorParams.IsEnabled)
                        {
                            var readAndOptionIsSccuess = ExportHuiChuanDoubleSideManager.Current.ReadMW();
                            if (!readAndOptionIsSccuess)//切换程式不成功（机种没有提前做好程式 sn找不到匹配的|其它异常）
                            {
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> ExportHuiChuanDoubleSideManager ChangePrograme Failed");
                                return ExitState.Current;
                            }
                            if (AutoRunSettings2.Default.IsMaster)//主面 向plc发送 前机_有板要出 防撞
                            {
                                CentralControlPLCCommand.Current.SetDSinal(1, 6030);
                            }
                        }
                        // 20230407 汇川TCP/IP[李伟峰] 追加 End

                        // 20230712 昆山仁宝AI停机【刘剑】 追加 Start
                        if (Customization.Current.RenBao_KS.IsEnabled)
                        {
                            // restart 拿到机器的运行状态
                            string station = LC.SN;
                            string type = "stop";
                            Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAccquisitionMachine.Visit RenBao_KS 停机 start station=" + station);

                            string dirNameReq = Customization.Current.RenBao_KS.ServerDirectory + "\\REQUEST" + "\\" + type.ToUpper();
                            string dirNameRes = Customization.Current.RenBao_KS.ServerDirectory + "\\RESPONSE" + "\\" + type.ToUpper();

                            // 根据station 去拿文件，拿到了就退出 报警；没拿到就继续
                            Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAccquisitionMachine.Visit RenBao_KS 停机 start dirNameReq =" + dirNameReq);
                            string fileFullName = FileUtils.GetFilePath2(dirNameReq, station);
                            Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAccquisitionMachine.Visit RenBao_KS 停机  fileFullName=" + fileFullName);

                            if (!string.IsNullOrWhiteSpace(fileFullName))
                            {
                                string content = FileUtils.GetFileContent(fileFullName);
                                string[] fileNames = fileFullName.Split('\\');
                                string fileName = fileNames[fileNames.Length - 1];
                                string fileNameRes = fileName.Replace("request", "response");
                                Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAccquisitionMachine.Visit RenBao_KS 停机  fileNameReq=" + fileNameRes);
                                Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAccquisitionMachine.Visit RenBao_KS 停机  content=" + content);
                                // RequestData.STATION_ID + "-" + type + "-response-" + nowDateTimeStr;
                                FileUtils.CreateContentFileRb(dirNameRes, fileNameRes, content);
                                // 拿到停机文件了，需要报警停机
                                WaitVerifyForRenBao(m, content);
                            }
                        }

                        // 20230712 昆山仁宝AI停机【刘剑】 追加 End

                        // 20231122 维修站开始后AOI可以进板 【刘亚杰】 追加 Start
                        if (Customization.Current.RepairControlBoardIn.IsEnabled)
                        {
                            bool isAllowBoardIn = RepairControlBoardInManager.Current.IsAllowBoardIn();

                            if (!isAllowBoardIn)
                            {
                                WaitVerify(m, "维修站未开启，请打开维修站！");
                                return DesyncState.Current;
                            }
                        }
                        // 20231122 维修站开始后AOI可以进板 【刘亚杰】 追加 End

                        // 20240704 太原出差修改 【王晨】 追加 Start
                        if (AutoRunSettings.Default.IsRepairCommit || AutoRunSettings.Default.IsLocalAndRepairCommit)
                        {
                            Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Visit(GoState) HeartBeatDirectory =" + Customization.Current.HeartBeatDirectory);
                            if (!Customization.Current.HeartBeatDirectory.Equals(""))
                            {
                                string filePath = Path.Combine(Customization.Current.HeartBeatDirectory, FileUtils.REPAIR_HEARTBREAT);
                                double passSeconds = FileUtils.GetHeartBeatPassSeconds(filePath);
                                Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Visit(GoState) NowTime =" + DateTimeUtils.GetNow() + ",passSeconds = " + passSeconds);

                                if (passSeconds >= 60)
                                {
                                    Holly.Log.HlLogger.Write("HOLLY AOI ========> ImageAcquisitionMachine.Visit(GoState) Repair Station Heart Beat Error 60s");
                                    //Log4Net.Warn("HOLLY AOI ========> ImageAcquisitionMachine.Visit(GoState) Repair Station Heart Beat Error 60s");
                                    WaitVerify(m, "维修站未打开或HeartBeatDirectory配置错误，请打开维修站或检查相关配置");
                                }
                            }
                            Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Visit(GoState) Repair Station Heart Beat Check End");

                        }
                        // 20240704 太原出差修改 【王晨】 追加 End

                        if (context._isReBoardIn)
                        {
                            Holly.Log.HlLogger.Write("HOLLY AOI =====> Board In Main Start(ReBoardIn) " + DateTimeUtils.GetNow());
                            //Log4Net.Info("HOLLY AOI =====> Board In Main Start(ReBoardIn) " + DateTimeUtils.GetNow());
                            op.BoardInManual();
                            context._isReBoardIn = false;
                        }
                        else
                        {
                            //20250320 越南富士康AOI自动运行界面直通率优化，移植SPI进出板轨道信息【曹志鹏】追加 Start
                            ViewModels.RailInfoViewModel.Current.UpdateBoardIningData(1, 1);
                            //20250320 越南富士康AOI自动运行界面直通率优化，移植SPI进出板轨道信息【曹志鹏】追加 End

                            if (!AutoRunSettings.Default.IsOfflineMode || Customization.Current.UseOfflineModeAsInlineMode)//(AutoRunSettings.Default.IsSMEMAMode)
                            {
                                m.UpdateInline();
                                //Holly.Log.HlLogger.Write("HOLLY AOI ============> Before M10 = " + ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardIn) != 0) + "  X15 = " + ((m.InputStatusInline & InputStatusInline.TopCylinderUp) != 0) + "  X16 = " + ((m.InputStatusInline & InputStatusInline.TopCylinderDown) != 0) + "  Y12 = " + ((m.OutputStatusInline & OutputStatusInline.TopCylinderUp) != 0));

                                //op.ClearCommand();
                                op.BoardIn();

                                // 20241121 条码枪装机外条码处理对应前移(从AOI_REPAIR3D_2500W移植功能) 追加 Start 
                                if (!Customization.Current.IsBarcodeScannerInMachine)
                                {
                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> Customization.Current.IsBarcodeScannerInMachine = " + Customization.Current.IsBarcodeScannerInMachine);
                                    BarcodeDataControl.Current.HandleBarcode();
                                }
                                // 20241121 条码枪装机外条码处理对应前移(从AOI_REPAIR3D_2500W移植功能) 追加 End 

                                Holly.Log.HlLogger.Write("HOLLY AOI =====> Board In Main Start " + DateTimeUtils.GetNow());
                                //Log4Net.Info("HOLLY AOI =====> Board In Main Start " + DateTimeUtils.GetNow());
                                // 20230708 TraceLog【纪明】 追加 Start
                                LogManagerComm.Current.OutputLog(LogManagerComm.TRACE_LOG, DateTimeUtils.GetNow(DateTimeUtils.DATE_FORMAT1) + "\t" + "HOLLY AOI =====> Board In Main Start ");
                                // 20230708 TraceLog【纪明】 追加 End

                                // 20220108 淳华稼动率 追加 Start
                                ExportChunHuaShopfloorManager.Current.ExportBoardInLog();
                                // 20220108 淳华稼动率 追加 End

                                // 20201216 不发要板信号监控 追加 Start
                                GlobalDataManager.Current.SetBoardInTimestamp(1);
                                // 20201216 不发要板信号监控 追加 End

                                // 20201219 晋城状态接口对应 删除 Start
                                //// 20201109 晋城富士康 追加 Start
                                //// 进板等待Idle、进板完成Run
                                //if (Customization.Current.FoxconnShopfloor_JC.IsEnabled)
                                //{
                                //    ExportEquipmentRunStatusManager.Current.Export("Idle", "", "W01");
                                //}
                                //// 20201109 晋城富士康 追加 End
                                // 20201219 晋城状态接口对应 删除 End
                            }
                            else
                            {
                                op.BoardInManual();
                                Holly.Log.HlLogger.Write("HOLLY AOI =====> Board In Main(Manual)  Start " + DateTimeUtils.GetNow());
                                //Log4Net.Info("HOLLY AOI =====> Board In Main(Manual)  Start " + DateTimeUtils.GetNow());
                                // 20230708 TraceLog【纪明】 追加 Start
                                LogManagerComm.Current.OutputLog(LogManagerComm.TRACE_LOG, DateTimeUtils.GetNow(DateTimeUtils.DATE_FORMAT1) + "\t" + "HOLLY AOI =====> Board In Main(Manual)  Start ");
                                // 20230708 TraceLog【纪明】 追加 End

                                // 20220108 淳华稼动率 追加 Start
                                ExportChunHuaShopfloorManager.Current.ExportBoardInLog();
                                // 20220108 淳华稼动率 追加 End

                            }
                            //if (!MachineParams.Current.InlineMachine.BoardSameInOut && AutoRunSettings.Default.IsSMEMAMode)
                            //{
                            //    op.BoardIn();
                            //}
                            //else if (MachineParams.Current.InlineMachine.BoardSameInOut && !AutoRunSettings.Default.IsOfflineMode)
                            //{
                            //    op.BoardIn();
                            //}
                            //else
                            //{
                            //    op.BoardInManual();
                            //}
                        }

                        // 20230407 汇川TCP/IP[李伟峰] 追加 Start
                        opResult = op.Execute(MachineParams.Current.OperationStepTimeout);//向plc发送进板指令
                        if (Customization.Current.huiChuanTCPShopfloorParams.IsEnabled && AutoRunSettings2.Default.IsMaster)
                        {
                            ExportHuiChuanDoubleSideManager.Current.WriteBoradInCommand();//向提示机发送允许进班命令
                        }
                        // 20230407 汇川TCP/IP[李伟峰] 追加 End
                        //}
                        //else
                        //{
                        //    //op.ClearCommand();
                        //    op.ClearLampBlink();
                        //    op.SetGreenLampOn();
                        //    opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                        //}

                        // 20190907 OK / NG 信号Log输出追加 Start
                        Holly.Log.HlLogger.Write("HOLLY AOI ============> Board In ReportProgress");
                        //Log4Net.Info("HOLLY AOI ============> Board In ReportProgress");
                        // 20190907 OK / NG 信号Log输出追加 End
                        progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardIning);
                        //opResult.Wait(false);
                        ///////////////////////////////////////////////////m.UpdateInline();

                        Stopwatch stopwatch = new Stopwatch();
                        if (Customization.Current.EquipmentRunStatus.IsEnabled)
                        {
                            stopwatch.Start();
                        }

                        m.UpdateInline();
                        //Holly.Log.HlLogger.Write("HOLLY AOI ============> Before M10 = " + ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardIn) != 0) + "  X15 = " + ((m.InputStatusInline & InputStatusInline.TopCylinderUp) != 0) + "  X16 = " + ((m.InputStatusInline & InputStatusInline.TopCylinderDown) != 0) + "  Y12 = " + ((m.OutputStatusInline & OutputStatusInline.TopCylinderUp) != 0));

                        //while (!(((m.CompleteProcessStatus & CompleteProcessStatus1.BoardIn) != 0) && ((m.InputStatusInline & InputStatusInline.TopCylinderUp) != 0) && ((m.InputStatusInline & InputStatusInline.TopCylinderDown) == 0) && ((m.OutputStatusInline & OutputStatusInline.TopCylinderUp) != 0)))

                        // 20190906 OK/NG log修改 Start
                        // 心跳
                        DateTime dateTimePre = DateTime.Now;
                        DateTime dateTimeNow = DateTime.Now;
                        // 20190906 OK/NG log修改 End
                        // 20220713 进板时间从进板检测开始计算 追加 Start
                        bool isBoardEntrance = false;
                        // 20220713 进板时间从.进板检测开始计算 追加 End

                        // 20231128 新vision修改5（太原需求） 【陈凤丹】 追加 Start
                        bool isIdle = false;
                        // 20231128 新vision修改5（太原需求） 【陈凤丹】 追加 End
                        // 20230921 立臻中控状态上传 【ygs】 Start
                        // 20240622 设备状态修正 【王晨】 修改 Start
                        //ExportEquipmentRunStatusManager.Current.Export("Run", "", "Board In");

                        if (Customization.Current.LuxshareShopfloor_KS.IsKafkaMes)
                        {
                            ExportEquipmentRunStatusManager.Current.Export("Run", "", "Board In");
                        }
                        // 20240622 设备状态修正 【王晨】 修改 End
                        // 20230921 立臻中控状态上传 【ygs】 End

                        while (((m.CompleteProcessStatus & CompleteProcessStatus1.BoardIn) == 0))
                        {
                            // 20231128 新vision修改5（太原需求） 【陈凤丹】 追加 Start
                            //大于2秒，记为待板状态（预留的2秒是等待板子进来）
                            if (stopwatch.ElapsedMilliseconds / 1000 > 2 && Customization.Current.FoxconnNewVision.IsEnabled && !isIdle)
                            {
                                isIdle = true;
                                ExportEquipmentRunStatusManager.Current.Export("Idle", "", "N/A");
                            }
                            // 20231128 新vision修改5（太原需求） 【陈凤丹】 追加 End
                            //20240130 鹏鼎监控 【李逸凡】 追加 Start
                            if (DateTimeUtils.GetDiffSeconds(GlobalDataManager.Current.LastTime, DateTime.Now) > 300)
                            {
                                ExportMonitorFileShopfloor.Current.WriteStatus("1", "ImageAcquisitionMachine");
                                GlobalDataManager.Current.LastTime = DateTime.Now;
                            }
                            //20240130 鹏鼎监控 【李逸凡】 追加 End
                            // 20220713 进板时间从进板检测开始计算 追加 Start
                            if (((m.InputStatusInline & InputStatusInline.BoardIn) != 0) && !isBoardEntrance)
                            {
                                isBoardEntrance = true;
                                ExportProcessDataShopfloorManager.Current.BoardInStart(DateTime.Now, 1);
                            }
                            // 20220713 进板时间从进板检测开始计算 追加 End
                            // 20190907 OK / NG 信号Log输出追加 Start
                            dateTimeNow = DateTime.Now;
                            TimeSpan ts = dateTimeNow - dateTimePre;
                            if (ts.TotalSeconds >= 5)
                            {
                                dateTimePre = dateTimeNow;
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> Board In Wait CompleteProcessStatus Heart 5s ...... " + dateTimeNow);
                                //Log4Net.Info("HOLLY AOI ============> Board In Wait CompleteProcessStatus Heart 5s ...... " + dateTimeNow);

                                // 20230708 TraceLog【纪明】 追加 Start
                                LogManagerComm.Current.OutputLog(LogManagerComm.TRACE_LOG, DateTimeUtils.GetNow(DateTimeUtils.DATE_FORMAT1) + "\t" + "HOLLY AOI ============> Board In Wait CompleteProcessStatus Heart 5s ......");
                                // 20230708 TraceLog【纪明】 追加 End

                                // 20240622 设备状态修正 【王晨】 修改 Start
                                //ExportEquipmentRunStatusManager.Current.Export("Hold", "", "N/A");

                                //进板检测有板判定为Hold
                                if (isBoardEntrance)
                                {
                                    ExportEquipmentRunStatusManager.Current.Export("Hold", "", "N/A");
                                    // 20241101 郑州输出Hold状态后正常运行时没有变回Run状态对应 【陈凤丹】 追加 Start
                                    context._isHold = true;
                                    // 20241101 郑州输出Hold状态后正常运行时没有变回Run状态对应 【陈凤丹】 追加 End
                                }
                                // 20240622 设备状态修正 【王晨】 修改 End

                                // 20230223 矽迈威条码切换程式 追加 Start 
                                if (Customization.Current.XiMaiWeiShopfloor.IsEnabled)
                                {
                                    ExportXiMaiWeiShopfloorManager.Current.ChangeProgram();
                                }
                                // 20230223 矽迈威条码切换程式 追加 End
                            }
                            // 20190907 OK / NG 信号Log输出追加 End

                            //20230801 茂名欣旺达Mes【张晨铖】 追加 Start
                            if (!ExportMaoMingXWDShopfloorManager.Current.ChangeProgram())
                            {
                            }
                            //20230801 茂名欣旺达Mes【张晨铖】 追加 End

                            // 20201228 晋城富士康控制命令 追加 Start
                            if (ExportFoxconnShopfloor_JCManager.Current.IsHaveStopComand())
                            {
                                //20230613 监控E05异常 追加 Start
                                string addionalInformation = "ImageAcquisitionMachine JC1";
                                PLCErrorStatusManager.Current.SavePLCErrorToFile(m, addionalInformation);
                                //20230613 监控E05异常 追加 End

                                // 20201230 客户自定义Down 追加 Start
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> Board In ExportFoxconnShopfloor_JCManager has stop comand2");
                                // ExportEquipmentRunStatusManager.Current.Export("Alarm", "Error", "E05");
                                // 20201230 客户自定义Down 追加 End
                                return ExitState.Current;
                            }
                            // 20201228 晋城富士康控制命令 追加 End

                            // 20210309 接口请求心跳 追加 Start
                            if (ExportFoxconnShopfloor_JCManager.Current.IsConnectHostNG())
                            {
                                string msg = "设备与Socket服务器握手通讯超时！";
                                ExportFoxconnShopfloor_JCManager.Current.ShowConnectNGMsg(msg);
                            }
                            // 20210309 接口请求心跳 追加 End

                            if (Customization.Current.EquipmentRunStatus.IsEnabled)
                            {
                                if (stopwatch.ElapsedMilliseconds / 1000 > Customization.Current.EquipmentRunStatus.RunToHoldTime && !context._isHold)
                                {
                                    // 20190907 OK / NG 信号Log输出追加 Start
                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> Board In Hold " + dateTimeNow);
                                    //Log4Net.Info("HOLLY AOI ============> Board In Hold " + dateTimeNow);
                                    // 20190907 OK / NG 信号Log输出追加 End

                                    // 20240622 设备状态修正 【王晨】 修改 Start
                                    //ExportEquipmentRunStatusManager.Current.Export("Hold", "", "N/A");

                                    //进板检测有板判定为Hold
                                    if (isBoardEntrance)
                                    {
                                        ExportEquipmentRunStatusManager.Current.Export("Hold", "", "N/A");
                                    }
                                    // 20240622 设备状态修正 【王晨】 修改 End

                                    context._isHold = true;
                                }
                            }

                            if (context.StopFlag)
                                return ExitState.Current;

                            m.UpdateInline();
                            if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                            {
                                //20230706  查找E05 【徐明武】 修改 Start
                                //return DesyncState.Current;
                                {
                                    Holly.Log.HlLogger.Write("E05 => 15 ");
                                    return DesyncState.Current;
                                }
                                //20230706  查找E05 【徐明武】 修改 End 
                            }
                            //context.CheckInlineMachineStatus();

                            Thread.Sleep(100);
                        }
                        //BoradInEnd();进板结束跳出死循环
                        if (Customization.Current.huiChuanTCPShopfloorParams.IsEnabled && AutoRunSettings2.Default.IsMaster)
                        {
                            ExportHuiChuanDoubleSideManager.Current.ClearBoradInCommand();//进板完成允许进板命名置0
                            CentralControlPLCCommand.Current.SetDSinal(0, 6030);// 前机_有板要出 置0
                        }
                        // 20241223 常州理想rifd连接中断修改读取方式 【刘红绅】追加 Start
                        if (Customization.Current.S7ReadRFID.IsEnabled)
                        {
                            string LiXiangRead_stringRet = ExportLiXiangShopfloorManager.Current.S7Read_stringMain();
                            if (!string.IsNullOrEmpty(LiXiangRead_stringRet))
                            {
                                WaitVerify(m, LiXiangRead_stringRet);
                                return ExitState.Current;
                            }
                            string LiXiangIn = ExportLiXiangShopfloorManager.Current.MC18180InOutMain("in");
                            if (!string.IsNullOrEmpty(LiXiangIn))
                            {
                                string Message = "区域订单号:" + ExportLiXiangShopfloorManager.Current.currentRFID + ",主零件码:" + ExportLiXiangShopfloorManager.Current.currentBarcode + ",机型号:" + ExportLiXiangShopfloorManager.Current.currentPartNum;
                                bool resultYesNo = WaitVerifyWithYesNo(m, Message + ".入站异常:" + LiXiangIn, "重新入站", "入站屏蔽");
                                if (resultYesNo)
                                {
                                    string LiXiangInAgain = ExportLiXiangShopfloorManager.Current.MC18180InOutMain("in");
                                    if (!string.IsNullOrEmpty(LiXiangInAgain))
                                    {
                                        while (WaitVerifyWithYesNo(m, Message + ".重新入站异常:" + LiXiangInAgain, "重新入站", "入站屏蔽"))
                                        {
                                            LiXiangInAgain = ExportLiXiangShopfloorManager.Current.MC18180InOutMain("in");
                                            if (string.IsNullOrEmpty(LiXiangInAgain))
                                            {
                                                break;
                                            }
                                        }
                                    }

                                }
                            }
                        }
                        // 20241223 常州理想rifd连接中断修改读取方式 【刘红绅】追加 End
                        // 20220906 南京西门子 追加 Start
                        // 20220906 南京西门子 追加 Start
                        if (Customization.Current.NanJingSiemensShopfloor.IsEnabled)
                        {
                            ExportNanJingSiemensShopfloorManager.Current.IsBoardInEnd = true;
                            int timeOut = 10000;
                            int time = 0;
                            bool isTimeOut = false;
                            while (!ExportNanJingSiemensShopfloorManager.Current.IsReceiveRFIDDate)
                            {
                                Thread.Sleep(100);
                                time += 100;
                                if (time > timeOut)
                                {
                                    isTimeOut = true;
                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) call ExportNanJingSiemensShopfloorManager.Current.IsReceiveRFIDDate is false timeOut, not ChangeProgram");
                                    break;
                                }
                                if (time % 2000 == 0)
                                {
                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) call ExportNanJingSiemensShopfloorManager.Current.IsReceiveRFIDDate is false ...wait 2s");
                                }
                            }
                            if (!isTimeOut)
                            {
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) call ExportNanJingSiemensShopfloorManager.Current.ChangeProgramBySiemensBarcodes()");
                                ExportNanJingSiemensShopfloorManager.Current.ChangeProgramBySiemensMessage();
                                ExportNanJingSiemensShopfloorManager.Current.IsReceiveRFIDDate = false;
                            }
                            else
                            {
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) call ExportNanJingSiemensShopfloorManager.Current.ChangeProgramBySiemensBarcodes() TimeOut");
                                WaitVerify(m, "未读到工装信息！");
                                return ExitState.Current;
                            }
                        }
                        // 20220906 南京西门子 追加 end
                        // 20230207 条码枪切程序 追加 Start
                        if (Customization.Current.ChangeProgramByScanner.IsEnabled && Customization.Current.ChangeProgramByScanner.IsInMachine)
                        {
                            int time = 0;
                            while (!ExportChangeProgramByScannerShopfloorMannager.Current.IsReceiveDate)
                            {
                                Thread.Sleep(100);
                                time += 100;
                                if (time % 5000 == 0)
                                {
                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) call ExportChangeProgramByScannerShopfloorMannager.Current.IsReceiveDate is false ...wait 2s");
                                }
                                if (context.StopFlag)
                                    return ExitState.Current;

                                m.UpdateInline();
                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                {
                                    //20230706  查找E05 【徐明武】 修改 Start
                                    //return DesyncState.Current;
                                    {
                                        Holly.Log.HlLogger.Write("E05 => 16 ");
                                        return DesyncState.Current;
                                    }
                                    //20230706  查找E05 【徐明武】 修改 End 
                                }
                            }
                            if (GlobalDataManager.Current.IsAutoRun)
                            {
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) call ExportChangeProgramByScannerShopfloorMannager.Current.ChangeProgramByMessage()");
                                ExportChangeProgramByScannerShopfloorMannager.Current.ChangeProgramByMessage();
                                ExportChangeProgramByScannerShopfloorMannager.Current.IsReceiveDate = false;
                            }
                            else
                            {
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) call ExportChangeProgramByScannerShopfloorMannager.Current.ChangeProgramByMessage() TimeOut");
                            }
                        }
                        // 20230207 条码枪切程序 追加 End
                        if (Customization.Current.ZhengzhouFoxconnTime.IsEnabled)
                        {
                            DateTime boardInTime = DateTime.Now.AddSeconds(-1);
                            GlobalDataManager.Current.BoardInTime.Add(boardInTime);
                        }

                        //Holly.Log.HlLogger.Write("HOLLY AOI ============> After M10 = " + ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardIn) != 0) + "  X15 = " + ((m.InputStatusInline & InputStatusInline.TopCylinderUp) != 0) + "  X16 = " + ((m.InputStatusInline & InputStatusInline.TopCylinderDown) != 0) + "  Y12 = " + ((m.OutputStatusInline & OutputStatusInline.TopCylinderUp) != 0));
                        //Holly.Log.HlLogger.Write("HOLLY AOI ============> Board In Finished");

                        if (Customization.Current.EquipmentRunStatus.IsEnabled)
                        {
                            stopwatch.Stop();
                            if (context._isHold)
                            {
                                //if (AutoRunSettings.Default.IsAutoVerificationEnabled && AutoRunSettings.Default.IsAutoVerificationForAll)
                                //{
                                //    ExportEquipmentRunStatusManager.Current.Export("ByPass", "", "N/A");
                                //}
                                //else
                                //{
                                Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) Run State");
                                //}
                                context._isHold = false;

                                // 20240622 设备状态修正 【王晨】 追加 Start
                                ExportEquipmentRunStatusManager.Current.Export("Run", "", "N/A");
                                // 20240622 设备状态修正 【王晨】 追加 End
                            }
                            // 20231128 新vision修改5（太原需求） 【陈凤丹】 追加 Start
                            else if (isIdle)
                            {
                                ExportEquipmentRunStatusManager.Current.Export("Run", "", "N/A");
                            }
                            // 20231128 新vision修改5（太原需求） 【陈凤丹】 追加 End
                            // 20201219 晋城状态接口对应 删除 Start
                            //// 20201109 晋城富士康 追加 Start
                            //else
                            //{
                            //    if (Customization.Current.FoxconnShopfloor_JC.IsEnabled)
                            //    {
                            //        ExportEquipmentRunStatusManager.Current.Export("Run", "", "N/A");
                            //    }
                            //}
                            //// 20201109 晋城富士康 追加 End
                            // 20201219 晋城状态接口对应 删除 End
                        }

                        // 20190907 OK / NG 信号Log输出追加 Start
                        Holly.Log.HlLogger.Write("HOLLY AOI ============> Board In progressListener.Complete()");
                        // 20190907 OK / NG 信号Log输出追加 End

                        //20250320 越南富士康AOI自动运行界面直通率优化，移植SPI进出板轨道信息【曹志鹏】追加 Start
                        ViewModels.RailInfoViewModel.Current.UpdateBoardIningData(1, 2);
                        //20250320 越南富士康AOI自动运行界面直通率优化，移植SPI进出板轨道信息【曹志鹏】追加 End

                        //20240527 鹏鼎AOI偷停判定 【范克文】 追加 Start
                        //每次出板前都初始化
                        ExportPengDingShopfloorManager.Current.BoardOutHighSpeedFlag = false;
                        //20240527 鹏鼎AOI偷停判定 【范克文】 追加 End

                        // 20200420 汇川NG出板变清板 追加 Start
                        ExportHuiChuanManager.Current.DelectDir();
                        // 20200420 汇川NG出板变清板 追加 End
                        // 20221213 贝思特NG出板变清板 追加 Start
                        ExportBeiSiTeShopfloorManger.Current.DelectDir();
                        // 20221213 贝思特NG出板变清板 追加 End

                        progressListener.Complete();
                        context._isBoardIn = true;
                    }

                    if (opResult.HasError)
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> Board In opResult.HasError");
                        //Log4Net.Error("HOLLY AOI DesyncState============> Board In opResult.HasError");
                        GlobalDataManager.Current.IsPLCError = true;
                        // 20230209 E05区分 追加 Start   
                        GlobalDataManager.Current.EquipmentErrorCode = "E34 进板异常";//PLC报警
                        Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                        //Log4Net.Error("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                        // 20230209 E05区分 追加 End 
                        //20230706  查找E05 【徐明武】 修改 Start
                        //return DesyncState.Current;
                        {
                            Holly.Log.HlLogger.Write("E05 => 17 ");
                            return DesyncState.Current;
                        }
                        //20230706  查找E05 【徐明武】 修改 End 
                    }

                    // 20190907 OK / NG 信号Log输出追加 Start
                    Holly.Log.HlLogger.Write("HOLLY AOI =====> Board In Main End " + DateTimeUtils.GetNow());
                    //Log4Net.Info("HOLLY AOI =====> Board In Main End " + DateTimeUtils.GetNow());
                    // 20190907 OK / NG 信号Log输出追加 End

                    //20250320 越南富士康AOI自动运行界面直通率优化，移植SPI进出板轨道信息【曹志鹏】追加 Start
                    ViewModels.RailInfoViewModel.Current.UpdateBoardIningData(1, 2);
                    //20250320 越南富士康AOI自动运行界面直通率优化，移植SPI进出板轨道信息【曹志鹏】追加 End

                    // 20230708 TraceLog【纪明】 追加 Start
                    LogManagerComm.Current.OutputLog(LogManagerComm.TRACE_LOG, DateTimeUtils.GetNow(DateTimeUtils.DATE_FORMAT1) + "\t" + "HOLLY AOI =====> Board In Main End ");
                    // 20230708 TraceLog【纪明】 追加 End

                    //清空右下角结果
                    reportManager.ClearInspection(1);

                    //20240907 双面机数据库同步增加当前ID缓存，减少数据库交互【曹志鹏】追加 Start
                    DoubleSideDataControl.Current.InitID(1);
                    //20240907 双面机数据库同步增加当前ID缓存，减少数据库交互【曹志鹏】追加 End

                    // 20241028 拼板抽检 【李伟】 追加 Start
                    if (Customization.Current.IsShowJumpBlockSetting)
                    {
                        JumpBlockBoardManager.Current.GetInspectionNumber(1);
                    }
                    // 20241028 拼板抽检 【李伟】 追加 End

                    // 20221012 机外判定OKNG错乱对应 追加 Start
                    ProcessDataNotWaitControl.Current.AddToBoardInInfoList(1);
                    // 20221012 机外判定OKNG错乱对应 追加 End

                    // 20220801 机外判定OKNG信号(队列,先进先出) 追加 Start
                    ProcessDataNotWaitControl1.Current.SetBoardInfo(1);
                    // 20220801 机外判定OKNG信号(队列,先进先出) 追加 End

                    // 20211224 苏州万都海拉V轴非标设备控制补全及NG板AOI报警 追加 Start  
                    if (MachineParams.Current.AutoAdjustVAxis.IsWanDuHaiLa)
                    {
                        if (!CentralControlPLCCommand.Current.GetRegisterCurrentState(CentralControlPLCCommand.FlipModeAOICommandType.CarrierEmpty, MachineParams.Current.AutoAdjustVAxis.PLCCommandTimeout))
                        {
                            IBatchOperationInline opWanDuHaiLa = m.CreateBatchOperationInline();
                            opWanDuHaiLa.BoardOut();
                            Holly.Log.HlLogger.Write("HOLLY AOI  ============> ImageAcquisitionMachine.Visit(GoState) WanDuHaiLa CheckCarrier BoardOut Start = " + DateTimeUtils.GetNow());
                            IOperationResult opWanDuHaiLaResult = opWanDuHaiLa.Execute(MachineParams.Current.OperationStepTimeout);
                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);
                            m.UpdateInline();
                            System.Threading.Thread.Sleep(50);

                            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                            {
                                if (context.StopFlag)
                                {
                                    return ExitState.Current;
                                }
                                m.UpdateInline();
                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                {
                                    //20230706  查找E05 【徐明武】 修改 Start
                                    //return DesyncState.Current;
                                    {
                                        Holly.Log.HlLogger.Write("E05 => 18 ");
                                        return DesyncState.Current;
                                    }
                                    //20230706  查找E05 【徐明武】 修改 End 
                                }
                                Thread.Sleep(50);
                            }
                            Holly.Log.HlLogger.Write("HOLLY AOI  ============> ImageAcquisitionMachine.Visit(GoState) WanDuHaiLa CheckCarrier BoardOut End = " + DateTimeUtils.GetNow());

                            return GoState.Current;
                        }
                    }
                    // 20211224 苏州万都海拉V轴非标设备控制补全及NG板AOI报警 追加 End

                    //20250404 前机Smema信号发送NG直接出板【曹志鹏】追加 Start
                    if (Customization.Current.IsSmemaPcbNGBoardOut)
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI  ============> ImageAcquisitionMachine.Visit(GoState) Customization.Current.IsSmemaPcbNGBoardOut = " + Customization.Current.IsSmemaPcbNGBoardOut);
                        InputStatusInline2 inputsInline2 = m.InputStatusInline2;

                        if ((inputsInline2 & InputStatusInline2.SMEMAFrontPCBOK) != 0)
                        {
                            Holly.Log.HlLogger.Write("HOLLY AOI  ============> ImageAcquisitionMachine.Visit(GoState) SMEMAFrontPCBOK != 0");
                            IBatchOperationInline opSmema = m.CreateBatchOperationInline();
                            opSmema.BoardOut();
                            Holly.Log.HlLogger.Write("HOLLY AOI  ============> ImageAcquisitionMachine.Visit(GoState) SMEMAFrontPCBOK BoardOut Start = " + DateTimeUtils.GetNow());
                            IOperationResult opSmemaResult = opSmema.Execute(MachineParams.Current.OperationStepTimeout);
                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);
                            m.UpdateInline();
                            System.Threading.Thread.Sleep(50);

                            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                            {
                                if (context.StopFlag)
                                {
                                    return ExitState.Current;
                                }
                                m.UpdateInline();
                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                {
                                    //20230706  查找E05 【徐明武】 修改 Start
                                    //return DesyncState.Current;
                                    {
                                        Holly.Log.HlLogger.Write("E05 => 18 ");
                                        return DesyncState.Current;
                                    }
                                    //20230706  查找E05 【徐明武】 修改 End 
                                }
                                Thread.Sleep(50);
                            }
                            Holly.Log.HlLogger.Write("HOLLY AOI  ============> ImageAcquisitionMachine.Visit(GoState) SMEMAFrontPCBOK BoardOut End = " + DateTimeUtils.GetNow());

                            return GoState.Current;
                        }
                    }
                    //20250404 前机Smema信号发送NG直接出板【曹志鹏】追加 End

                    //if ((m.CommandStatusInline & CommandStatusInline.TimeOut) != 0)
                    //{
                    //    return DesyncState.Current;
                    //}

                    // 20211022 导出处理日期 追加 Start
                    ExportProcessDataShopfloorManager.Current.BoardInEnd(DateTime.Now, 1);
                    // 20211022 导出处理日期 追加 End

                    //// 20200612 天津双面机数据不同步对应 追加 Start
                    //DoubleSideDataControl.Current.GenerateData(1);
                    //// 20200612 天津双面机数据不同步对应 追加 End

                    // 20210715 双轨双头解锁条码变更对应 追加 Start
                    DoubleRailDoubleHeadDataControl.Current.InitData();
                    // 20210715 双轨双头解锁条码变更对应 追加 End

                    // 20201216 不发要板信号监控 追加 Start
                    GlobalDataManager.Current.SetBoardInCompleteTimestamp(1);
                    // 20201216 不发要板信号监控 追加 End

                    // 20210107 基恩士条码文件对应 追加 Start
                    BarcodeFileDataControl.Current.GetBarcodeFromFile(1);
                    // 20210107 基恩士条码文件对应 追加 End

                    // 20210922 鹏元晟MES 追加 Start
                    if (Customization.Current.PengYuanChengShopfloor.IsEnabled && MachineParams.Current.BarcodeSerialPort.IsEnabled)
                    {
                        bool checkSnResult = ExportPengYuanChengShopfloorManger.Current.BarcodeScannerCheckSnExport();
                        ExportPengYuanChengShopfloorManger.Current.WaitCheckBarcode(m);
                        //错误出板
                        if (!checkSnResult)
                        {
                            IBatchOperationInline opChekPengYuanChengBoardOut = m.CreateBatchOperationInline();
                            IOperationResult opCheckPengYuanChengBoardOutBoardOutResult = null;

                            opChekPengYuanChengBoardOut.BoardOutNG();
                            Holly.Log.HlLogger.Write("HOLLY AOI  ============> ImageAcquisitionMachine.Visit(GoState) PengYuanChengShopfloor CheckIn Error BoardOut Start = " + DateTimeUtils.GetNow());
                            opCheckPengYuanChengBoardOutBoardOutResult = opChekPengYuanChengBoardOut.Execute(MachineParams.Current.OperationStepTimeout);
                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);
                            m.UpdateInline();
                            System.Threading.Thread.Sleep(50);

                            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                            {
                                if (context.StopFlag)
                                {
                                    return ExitState.Current;
                                }

                                m.UpdateInline();
                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                {
                                    //20230706  查找E05 【徐明武】 修改 Start
                                    //return DesyncState.Current;
                                    {
                                        Holly.Log.HlLogger.Write("E05 => 19 ");
                                        return DesyncState.Current;
                                    }
                                    //20230706  查找E05 【徐明武】 修改 End 
                                }
                                Thread.Sleep(50);
                            }
                            Holly.Log.HlLogger.Write("HOLLY AOI  ============> ImageAcquisitionMachine.Visit(GoState) PengYuanChengShopfloor CheckIn Error BoardOut End = " + DateTimeUtils.GetNow());
                            return GoState.Current;
                        }
                    }
                    // 20210922 鹏元晟MES 追加 End

                    // 20210609 绵阳中科MES 追加 Start
                    if (Customization.Current.MianYangZhongKeShopfloor.IsEnabled)
                    {
                        string ret = ExportMianYangZhongKeShopfloorManager.Current.CheckInMain();

                        if (ret == string.Empty)
                        {
                            // 20210626 绵阳中科一次修改 追加 Start
                            ExportMianYangZhongKeShopfloorManager.Current.WaitingProgramChanged();
                            // 20210626 绵阳中科一次修改 追加 End
                        }
                        else
                        {
                            ExportMianYangZhongKeShopfloorManager.Current.ShowAlarmMsg(ret);

                            //出板
                            IBatchOperationInline opChekGoldenSampleBoardOut = m.CreateBatchOperationInline();
                            IOperationResult opCheckGoldenSampleBoardOutBoardOutResult = null;

                            opChekGoldenSampleBoardOut.BoardOut();
                            Holly.Log.HlLogger.Write("HOLLY AOI  ============> ImageAcquisitionMachine.Visit(GoState) MianYangZhongKeShopfloor CheckIn Error BoardOut Start = " + DateTimeUtils.GetNow());
                            opCheckGoldenSampleBoardOutBoardOutResult = opChekGoldenSampleBoardOut.Execute(MachineParams.Current.OperationStepTimeout);
                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);
                            m.UpdateInline();
                            System.Threading.Thread.Sleep(50);

                            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                            {
                                if (context.StopFlag)
                                {
                                    return ExitState.Current;
                                }

                                m.UpdateInline();
                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                {
                                    //20230706  查找E05 【徐明武】 修改 Start
                                    //return DesyncState.Current;
                                    {
                                        Holly.Log.HlLogger.Write("E05 => 20 ");
                                        return DesyncState.Current;
                                    }
                                    //20230706  查找E05 【徐明武】 修改 End 
                                }
                                Thread.Sleep(50);
                            }
                            Holly.Log.HlLogger.Write("HOLLY AOI  ============> ImageAcquisitionMachine.Visit(GoState) MianYangZhongKeShopfloor CheckIn Error BoardOut End = " + DateTimeUtils.GetNow());

                            return GoState.Current;
                        }
                    }
                    // 20210609 绵阳中科MES 追加 End

                    //20221117 惠州欣旺达Mes 追加 Start
                    if (Customization.Current.HuiZhouXinWangDaShopfloor.IsEnabled
                        && AutoRunSettings.Default.IsEnableMES && AutoRunSettings2.Default.IsHZXWDMesEnabled
                        && !Customization.Current.HuiZhouXinWangDaShopfloor.IsCloseBarcodeGun
                        && MachineParams.Current.BarcodeSerialPort.IsEnabled)
                    {
                        //条码枪过站
                        if (!ExportHZXWDShopfloorManager.Current.CheckBarcode(1))
                        {
                            //出板
                            IBatchOperationInline opChekOuLuTongBoardOut = m.CreateBatchOperationInline();
                            IOperationResult opCheckOuLuTongBoardOutBoardOutResult = null;
                            opChekOuLuTongBoardOut.BoardOut();

                            Holly.Log.HlLogger.Write("HOLLY AOI  ============> ImageAcquisitionMachine.Visit(GoState) HuiZhouXinWangDa Check Error BoardOut Start = " + DateTimeUtils.GetNow());
                            opCheckOuLuTongBoardOutBoardOutResult = opChekOuLuTongBoardOut.Execute(MachineParams.Current.OperationStepTimeout);
                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);
                            m.UpdateInline();
                            System.Threading.Thread.Sleep(50);
                            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                            {
                                if (context.StopFlag)
                                    return ExitState.Current;
                                m.UpdateInline();
                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                {
                                    //20230706  查找E05 【徐明武】 修改 Start
                                    //return DesyncState.Current;
                                    {
                                        Holly.Log.HlLogger.Write("E05 => 21 ");
                                        return DesyncState.Current;
                                    }
                                    //20230706  查找E05 【徐明武】 修改 End 
                                }
                                Thread.Sleep(50);
                            }
                            Holly.Log.HlLogger.Write("HOLLY AOI  ============> ImageAcquisitionMachine.Visit(GoState) HuiZhouXinWangDa Check Error BoardOut End = " + DateTimeUtils.GetNow());
                            return GoState.Current;
                        }
                    }
                    //20221117 惠州欣旺达Mes 追加 End

                    // 20221206 三星电表MES 追加 Start
                    if (Customization.Current.SamsungBarcodeMapping.IsEnabled && Customization.Current.SamsungBarcodeMapping.IsCheckRouteByScanner)
                    {
                        if (!ExportSamsungShopfloorManger.Current.CheckBarcode(1))
                        {
                            //出板
                            IBatchOperationInline opChekSamsungBoardOut = m.CreateBatchOperationInline();
                            IOperationResult opCheckSamsungBoardOutBoardOutResult = null;
                            opChekSamsungBoardOut.BoardOut();

                            Holly.Log.HlLogger.Write("HOLLY AOI  ============> ImageAcquisitionMachine.Visit(GoState) Samsung Check Error BoardOut Start = " + DateTimeUtils.GetNow());
                            opCheckSamsungBoardOutBoardOutResult = opChekSamsungBoardOut.Execute(MachineParams.Current.OperationStepTimeout);
                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);
                            m.UpdateInline();
                            System.Threading.Thread.Sleep(50);
                            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                            {
                                if (context.StopFlag)
                                    return ExitState.Current;
                                m.UpdateInline();
                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                {
                                    //20230706  查找E05 【徐明武】 修改 Start
                                    //return DesyncState.Current;
                                    {
                                        Holly.Log.HlLogger.Write("E05 => 22 ");
                                        return DesyncState.Current;
                                    }
                                    //20230706  查找E05 【徐明武】 修改 End 
                                }
                                Thread.Sleep(50);
                            }
                            Holly.Log.HlLogger.Write("HOLLY AOI  ============> ImageAcquisitionMachine.Visit(GoState) Samsung Check Error BoardOut End = " + DateTimeUtils.GetNow());
                            return GoState.Current;
                        }
                    }
                    // 20221206 三星电表MES 追加 End

                    // 20230104 龙华富士康MES 追加 Start
                    if (Customization.Current.FoxconnShopfloor_ACKH.IsEnabled && Customization.Current.FoxconnShopfloor_ACKH.IsCheckRouteByScanner)
                    {

                        if (!ExportFoxconnShopfloor_ACKHManager.Current.CheckBarcode(1))
                        {
                            //出板
                            IBatchOperationInline opChekACKHgBoardOut = m.CreateBatchOperationInline();
                            IOperationResult opCheckACKHBoardOutBoardOutResult = null;
                            opChekACKHgBoardOut.BoardOut();

                            Holly.Log.HlLogger.Write("HOLLY AOI  ============> ImageAcquisitionMachine.Visit(GoState) ACKH Check Error BoardOut Start = " + DateTimeUtils.GetNow());
                            opCheckACKHBoardOutBoardOutResult = opChekACKHgBoardOut.Execute(MachineParams.Current.OperationStepTimeout);
                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);
                            m.UpdateInline();
                            System.Threading.Thread.Sleep(50);
                            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                            {
                                if (context.StopFlag)
                                    return ExitState.Current;
                                m.UpdateInline();
                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                {
                                    //20230706  查找E05 【徐明武】 修改 Start
                                    //return DesyncState.Current;
                                    {
                                        Holly.Log.HlLogger.Write("E05 => 23 ");
                                        return DesyncState.Current;
                                    }
                                    //20230706  查找E05 【徐明武】 修改 End 
                                }
                                Thread.Sleep(50);
                            }
                            Holly.Log.HlLogger.Write("HOLLY AOI  ============> ImageAcquisitionMachine.Visit(GoState) ACKH Check Error BoardOut End = " + DateTimeUtils.GetNow());
                            return GoState.Current;
                        }
                    }
                    // 20230104 龙华富士康MES 追加 End

                    // 20210915 欧陆通MES 追加 Start
                    if (Customization.Current.OuLuTongShopfloor.IsEnabled && Customization.Current.OuLuTongShopfloor.IsCheckRouteByScanner)
                    {
                        //条码枪过站
                        if (!ExportOuLuTongShopfloorManager.Current.CheckBarcode(1))
                        {
                            //出板
                            IBatchOperationInline opChekOuLuTongBoardOut = m.CreateBatchOperationInline();
                            IOperationResult opCheckOuLuTongBoardOutBoardOutResult = null;
                            opChekOuLuTongBoardOut.BoardOut();

                            Holly.Log.HlLogger.Write("HOLLY AOI  ============> ImageAcquisitionMachine.Visit(GoState) OuLuTong Check Error BoardOut Start = " + DateTimeUtils.GetNow());
                            opCheckOuLuTongBoardOutBoardOutResult = opChekOuLuTongBoardOut.Execute(MachineParams.Current.OperationStepTimeout);
                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);
                            m.UpdateInline();
                            System.Threading.Thread.Sleep(50);
                            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                            {
                                if (context.StopFlag)
                                    return ExitState.Current;
                                m.UpdateInline();
                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                {
                                    //20230706  查找E05 【徐明武】 修改 Start
                                    //return DesyncState.Current;
                                    {
                                        Holly.Log.HlLogger.Write("E05 => 24 ");
                                        return DesyncState.Current;
                                    }
                                    //20230706  查找E05 【徐明武】 修改 End 
                                }
                                Thread.Sleep(50);
                            }
                            Holly.Log.HlLogger.Write("HOLLY AOI  ============> ImageAcquisitionMachine.Visit(GoState) OuLuTong Check Error BoardOut End = " + DateTimeUtils.GetNow());
                            return GoState.Current;
                        }
                    }
                    // 20210915 欧陆通MES 追加 End

                    //20221206 重庆海尔Mes 追加 Start
                    if (Customization.Current.ChongQingHaierShopfloor.IsEnabled && Customization.Current.ChongQingHaierShopfloor.IsCheckRouteByScanner && MachineParams.Current.BarcodeSerialPort.IsEnabled)
                    {
                        //条码枪过站
                        if (!ExportChongQingHaierShopfloorManager.Current.CheckBarcode(1))
                        {
                            //出板
                            IBatchOperationInline opChekChongQingHaierBoardOut = m.CreateBatchOperationInline();
                            IOperationResult opCheckChongQingHaierBoardOutBoardOutResult = null;
                            opChekChongQingHaierBoardOut.BoardOut();

                            Holly.Log.HlLogger.Write("HOLLY AOI  ============> ImageAcquisitionMachine.Visit(GoState) ChongQingHaier Check Error BoardOut Start = " + DateTimeUtils.GetNow());
                            opCheckChongQingHaierBoardOutBoardOutResult = opChekChongQingHaierBoardOut.Execute(MachineParams.Current.OperationStepTimeout);
                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);
                            m.UpdateInline();
                            System.Threading.Thread.Sleep(50);
                            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                            {
                                if (context.StopFlag)
                                    return ExitState.Current;
                                m.UpdateInline();
                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                {
                                    //20230706  查找E05 【徐明武】 修改 Start
                                    //return DesyncState.Current;
                                    {
                                        Holly.Log.HlLogger.Write("E05 => 25 ");
                                        return DesyncState.Current;
                                    }
                                    //20230706  查找E05 【徐明武】 修改 End 
                                }
                                Thread.Sleep(50);
                            }
                            Holly.Log.HlLogger.Write("HOLLY AOI  ============> ImageAcquisitionMachine.Visit(GoState) ChongQingHaier Check Error BoardOut End = " + DateTimeUtils.GetNow());
                            return GoState.Current;
                        }
                    }
                    //20221206 重庆海尔Mes 追加 End

                    // 20201222 GoldenSample 追加 Start
                    if (!ExportGoldenSampleShopfloorManager.Current.CheckBarcodeForGoldenSampleMain(1))
                    {
                        //出板
                        IBatchOperationInline opChekGoldenSampleBoardOut = m.CreateBatchOperationInline();
                        IOperationResult opCheckGoldenSampleBoardOutBoardOutResult = null;

                        opChekGoldenSampleBoardOut.BoardOut();
                        Holly.Log.HlLogger.Write("HOLLY AOI  ============> ImageAcquisitionMachine.Visit(GoState) GoldenSample Check Error BoardOut Start = " + DateTimeUtils.GetNow());
                        opCheckGoldenSampleBoardOutBoardOutResult = opChekGoldenSampleBoardOut.Execute(MachineParams.Current.OperationStepTimeout);
                        progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);
                        m.UpdateInline();
                        System.Threading.Thread.Sleep(50);

                        while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                        {
                            if (context.StopFlag)
                            {
                                return ExitState.Current;
                            }

                            m.UpdateInline();
                            if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                            {
                                //20230706  查找E05 【徐明武】 修改 Start
                                //return DesyncState.Current;
                                {
                                    Holly.Log.HlLogger.Write("E05 => 26 ");
                                    return DesyncState.Current;
                                }
                                //20230706  查找E05 【徐明武】 修改 End 
                            }
                            Thread.Sleep(50);
                        }
                        Holly.Log.HlLogger.Write("HOLLY AOI  ============> ImageAcquisitionMachine.Visit(GoState) GoldenSample Check Error BoardOut End = " + DateTimeUtils.GetNow());

                        return GoState.Current;
                    }
                    // 20201222 GoldenSample 追加 End

                    // 20200515 奥海 MES 追加 Start
                    string strAohai = string.Empty;
                    strAohai = string.Format("HOLLY AOI  =====> ImageAcquisitionMachine.Visit(GoState) AohaiShopfloor.IsEnabled:{0},BarcodeSerialPort.IsEnabled:{1}", Customization.Current.AohaiShopfloor.IsEnabled, MachineParams.Current.BarcodeSerialPort.IsEnabled);
                    Holly.Log.HlLogger.Write(strAohai);

                    if (Customization.Current.AohaiShopfloor.IsEnabled && MachineParams.Current.BarcodeSerialPort.IsEnabled)
                    {
                        //int railID = 1;  此为轨道1
                        Holly.Log.HlLogger.Write("HOLLY AOI  =====> ImageAcquisitionMachine.Visit(GoState) Aohai single rail start, Barcodes.Count" + GlobalDataManager.Current.Barcodes.Count);
                        ExportAohaiShopfloorManger exportAohaiShopfloorManger = new ExportAohaiShopfloorManger();
                        string curBarCode = string.Empty;
                        bool ret = false;
                        string errInf = string.Empty;

                        ////打印出条码
                        foreach (var ibarcode in GlobalDataManager.Current.Barcodes)
                        {
                            Holly.Log.HlLogger.Write("HOLLY AOI  =====> ImageAcquisitionMachine.Visit(GoState) Aohai read Barcode : " + ibarcode);
                        }

                        if (GlobalDataManager.Current.Barcodes.Count > 0)
                        {
                            curBarCode = GlobalDataManager.Current.Barcodes.Last();
                            if (curBarCode != string.Empty)
                            {
                                Holly.Log.HlLogger.Write("HOLLY AOI  =====> ImageAcquisitionMachine.Visit(GoState) Aohai single rail call Export 1 start curBarCode = " + curBarCode);

                                ret = exportAohaiShopfloorManger.Export(curBarCode, 1);

                                Holly.Log.HlLogger.Write("HOLLY AOI  =====> ImageAcquisitionMachine.Visit(GoState) Aohai single rail call Export 1 End ret = " + ret);

                                if (ret == false)
                                {
                                    errInf = exportAohaiShopfloorManger.errorMessage1;
                                }
                            }
                        }

                        Holly.Log.HlLogger.Write("HOLLY AOI  =====> ImageAcquisitionMachine.Visit(GoState)Aohai single rail get subBarcode .....");

                        if (ret == false)
                        {
                            string errorContent = string.Empty;
                            if (curBarCode.Equals(""))  ///条码枪没有读到条码，则报警
                            {
                                errorContent = "rail Barcode not scanned";
                            }
                            else if (!errInf.Equals(""))
                            {
                                errorContent = "Server error:\n" + errInf;
                            }

                            // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                            ExportShanWeiWatchBoardBYDShopfloorManager.Current.WriteAlarm(1, errorContent, DateTime.Now);
                            // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End

                            ///告警信息和灯光，蜂鸣器控制
                            UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                new Action(
                                    delegate ()
                                    {
                                        //控制告警灯和蜂鸣器
                                        IBatchOperationInline opAohai = m.CreateBatchOperationInline();
                                        IOperationResult opAohaiResult = null;
                                        opAohai.ClearLampBlink();
                                        opAohai.SetRedAndBuzzer();
                                        opAohaiResult = opAohai.Execute(MachineParams.Current.OperationStepTimeout);
                                        //告警信息
                                        Holly.Log.HlLogger.Write("HOLLY AOI  =====> ImageAcquisitionMachine.Visit(GoState) AohaiShopfloor SetRedAndBuzzer");
                                        //20230717 log输出【ygs】 Start 
                                        ExportLogOuputManager.Current.OuputLog(11, errorContent);
                                        //20230717 log输出【ygs】 End
                                        IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                        messageManager.ShowError(errorContent);

                                        Holly.Log.HlLogger.Write("HOLLY AOI  =====> ImageAcquisitionMachine.Visit(GoState) AohaiShopfloor ShowErrorMessage");

                                        IBatchOperationInline op10 = m.CreateBatchOperationInline();
                                        IOperationResult opResult10 = null;

                                        op10.ClearCommand();
                                        op10.ClearLampBuzzer();
                                        op10.SetBuzzer(false);
                                        opResult10 = op10.Execute(MachineParams.Current.OperationStepTimeout);
                                        Thread.Sleep(100);
                                        m.UpdateInline();
                                        Holly.Log.HlLogger.Write("HOLLY AOI  =====> ImageAcquisitionMachine.Visit(GoState) AohaiShopfloor Reset");
                                    }));

                            Holly.Log.HlLogger.Write("HOLLY AOI  ============> ImageAcquisitionMachine.Visit(GoState) AohaiShopfloor SN Check error");

                            // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                            ExportShanWeiWatchBoardBYDShopfloorManager.Current.UpdateAlarm(3, errorContent, DateTime.Now);
                            // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End

                            //出板
                            IBatchOperationInline opAohaiBoardOut = m.CreateBatchOperationInline();
                            IOperationResult opAohaiBoardOutResult = null;

                            opAohaiBoardOut.BoardOut();
                            Holly.Log.HlLogger.Write("HOLLY AOI  ============> ImageAcquisitionMachine.Visit(GoState) AohaiShopfloor SN Check error op.BoardOut() Start = " + DateTimeUtils.GetNow());
                            opAohaiBoardOutResult = opAohaiBoardOut.Execute(MachineParams.Current.OperationStepTimeout);
                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);
                            m.UpdateInline();
                            System.Threading.Thread.Sleep(50);

                            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                            {
                                if (context.StopFlag)
                                {
                                    return ExitState.Current;
                                }

                                m.UpdateInline();
                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                {
                                    //20230706  查找E05 【徐明武】 修改 Start
                                    //return DesyncState.Current;
                                    {
                                        Holly.Log.HlLogger.Write("E05 => 27 ");
                                        return DesyncState.Current;
                                    }
                                    //20230706  查找E05 【徐明武】 修改 End 
                                }
                                Thread.Sleep(50);
                            }
                            Holly.Log.HlLogger.Write("HOLLY AOI  ============> ImageAcquisitionMachine.Visit(GoState) AohaiShopfloor SN Check error op.BoardOut() End = " + DateTimeUtils.GetNow());

                            Holly.Log.HlLogger.Write("HOLLY AOI  ============> ImageAcquisitionMachine.Visit(GoState) AohaiShopfloor SN Check End");
                            return GoState.Current;
                        }
                    }
                    // 20200515 奥海 MES 追加 End  

                    //20230912 昆山立讯自动包装Mes 【曹志鹏】 追加 Start
                    //20231018 离线模式开关改为用户界面选项 【曹志鹏】 修改 Start
                    //if (Customization.Current.LuxshareShopfloor_KS3.IsEnabled)
                    if (Customization.Current.LuxshareShopfloor_KS3.IsEnabled && !AutoRunSettings.Default.IsOfflineExport)
                    //20231018 离线模式开关改为用户界面选项 【曹志鹏】 修改 End
                    {
                        string errormsg = ExportLuxshareShopfloor_KS3Manager.Current.CheckBoxNo2();
                        if (!string.IsNullOrEmpty(errormsg))
                        {
                            WaitVerify(m, errormsg);
                            return ExitState.Current;
                        }
                    }
                    //20230912 昆山立讯自动包装Mes 【曹志鹏】 追加 End

                    //20241124 太原富士康AVI条码同步校验改为维修站元件报警【曹志鹏】追加 Start
                    ExportFoxconnTYAVIManager.Current.GetOtherSideBarcode(1);
                    //20241124 太原富士康AVI条码同步校验改为维修站元件报警【曹志鹏】追加 End

                    //20230521 MES标准化 【曹志鹏】 追加 Start
                    if (!ExportMainShopfloorManager.Current.CheckBarcode(1))
                    {
                        //20241222 重庆海尔三段式需要先进行boardouthighspeed【曹志鹏】追加 Start
                        if (Customization.Current.Haier_ChongQingShopfloor.IsEnabled)
                        {
                            IBatchOperationInline opBoardOutHighSpeed = m.CreateBatchOperationInline();
                            IOperationResult opBoardOutHighSpeedResult = null;

                            opBoardOutHighSpeed.BoardOutHighSpeed();
                            // 停在出板口
                            opBoardOutHighSpeedResult = opBoardOutHighSpeed.Execute(MachineParams.Current.OperationStepTimeout);
                            opBoardOutHighSpeedResult.Wait();
                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                            // 等待板子到出板口
                            while (true)
                            {
                                m.UpdateInline();
                                if ((m.InputStatusInline & InputStatusInline.BoardOut) != 0)
                                    break;
                                if (context.StopFlag)
                                    return ExitState.Current;
                                if ((m.CommandStatusInline & CommandStatusInline.EmergencyButton) != 0 || (m.CommandStatusInline & CommandStatusInline.SafeSensor) != 0 || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                {
                                    return DesyncState.Current;
                                }
                                Thread.Sleep(500);
                                Holly.Log.HlLogger.Write("HOLLY AOI =====> Haier_ChongQingShopfloor Wait For The Board To BoardOut Location...");
                            }

                            progressListener.Complete();
                        }
                        //20241222 重庆海尔三段式需要先进行boardouthighspeed【曹志鹏】追加 End

                        #region BoardOutNG
                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportMainShopfloorManager Error BoardOut NG Start");
                        IBatchOperationInline opBoardOut = m.CreateBatchOperationInline();
                        IOperationResult opBoardOutRet = null;

                        opBoardOut.BoardOutNG();
                        opBoardOutRet = opBoardOut.Execute(MachineParams.Current.OperationStepTimeout);
                        progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                        HeartBeatUtils boardOutHeartBeat = new HeartBeatUtils(1);
                        while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                        {
                            if (boardOutHeartBeat.IsOutput())
                            {
                                Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportMainShopfloorManager wait BoardOut NG Complete");
                            }

                            if (context.StopFlag)
                            {
                                Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportMainShopfloorManager Error return ExitState.Current");
                                return ExitState.Current;
                            }

                            m.UpdateInline();
                            if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                            {
                                Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportMainShopfloorManager Error return DesyncState.Current");
                                //20230706  查找E05 【徐明武】 修改 Start
                                //return DesyncState.Current;
                                {
                                    Holly.Log.HlLogger.Write("E05 => 28 ");
                                    return DesyncState.Current;
                                }
                                //20230706  查找E05 【徐明武】 修改 End 
                            }
                            Thread.Sleep(50);
                        }

                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportMainShopfloorManager BoardOut NG End return GoState.Current");
                        return GoState.Current;
                        #endregion

                    }
                    //20230521 MES标准化 【曹志鹏】 追加 End

                    //检查气压
                    if (Customization.Current.CheckAirPressure && !AutoRunSettings.Default.IsOfflineMode && (m.InputStatusInline & InputStatusInline.AirPressureSwitch) == 0)
                    {
                        op = m.CreateBatchOperationInline();
                        opResult = null;
                        op.ClearLampBlink();
                        op.SetRedAndBuzzer();
                        opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                        opResult.Wait();

                        // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                        ExportShanWeiWatchBoardBYDShopfloorManager.Current.WriteAlarm(1, Lang.UI.UI_Status_AirPressureWarning, DateTime.Now);
                        // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End

                        UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                        new Action(
                                            delegate ()
                                            {
                                                //20230717 log输出【ygs】 Start 
                                                ExportLogOuputManager.Current.OuputLog(11, Lang.UI.UI_Status_AirPressureWarning);
                                                //20230717 log输出【ygs】 End
                                                // 20240406 启动屏幕录制程序 追加 Start                                                    
                                                SocketScreenRecorder.Current.clientSendStart();
                                                // 20240406 启动屏幕录制程序 追加 End
                                                IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                                messageManager.ShowError(Lang.UI.UI_Status_AirPressureWarning);
                                            }));

                        IBatchOperationInline op2 = m.CreateBatchOperationInline();
                        IOperationResult opResult2 = null;

                        op2.SetBuzzer(false);
                        opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                        opResult2.Wait();

                        // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                        ExportShanWeiWatchBoardBYDShopfloorManager.Current.UpdateAlarm(3, Lang.UI.UI_Status_AirPressureWarning, DateTime.Now);
                        // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End

                        Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> Customization.Current.CheckAirPressure 2");
                        //Log4Net.Warn("HOLLY AOI DesyncState============> Customization.Current.CheckAirPressure 2");
                        // 20230209 E05区分 追加 Start   
                        GlobalDataManager.Current.EquipmentErrorCode = "E33";//气压报警
                        Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                        //Log4Net.Warn("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                        // 20230209 E05区分 追加 End 
                        //20230706  查找E05 【徐明武】 修改 Start
                        //return DesyncState.Current;
                        {
                            Holly.Log.HlLogger.Write("E05 => 29 ");
                            return DesyncState.Current;
                        }
                        //20230706  查找E05 【徐明武】 修改 End 
                    }

                    IBatchOperationInline op0 = m.CreateBatchOperationInline();
                    IOperationResult opResult0 = null;
                    //op0.ClearLampBlink();
                    //op0.ReadySignal(false);
                    op0.SetGreenLampOn();
                    //op0.SetNoNextMachine(AutoRunSettings.Default.NoNextMachineSignal);
                    opResult0 = op0.Execute(MachineParams.Current.OperationStepTimeout);
                }

                IOperationResult result = null;

                bool isNoTest = false;
                if (Customization.Current.ZdtcoHalfTest.IsEnabled)
                {
                    GlobalDataManager.Current.TotalPCBs += 1;
                    if (GlobalDataManager.Current.TotalPCBs % 2 != (2 - Customization.Current.ZdtcoHalfTest.Sequence))
                    {
                        isNoTest = true;
                    }
                }

                //20240429 启动底部条码枪选项分为1，2轨单独设置 【曹志鹏】 修改 Start
                //if (AutoRunSettings.Default.IsBottomBarcodeScannerEnabled && MachineParams.Current.BarcodeSerialPort.IsEnabled)
                if (AutoRunSettings.Default.IsBottomBarcodeScannerEnabled1 && MachineParams.Current.BarcodeSerialPort.IsEnabled)
                //20240429 启动底部条码枪选项分为1，2轨单独设置 【曹志鹏】 修改 End
                {
                    if (Customization.Current.IsKeepLastBarcode && Customization.Current.IsBarcodeScannerInMachine)
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) RemoveBarcode At BoardIn End");
                        Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) RemoveBarcode At BoardIn End Barcodes Count = " + GlobalDataManager.Current.Barcodes.Count);

                        if (GlobalDataManager.Current.Barcodes.Count > 1)
                        {
                            int count = GlobalDataManager.Current.Barcodes.Count - 1;
                            for (int i = 0; i < count; i++)
                            {
                                Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) RemoveBarcode At BoardIn End Remove Item = " + GlobalDataManager.Current.Barcodes[0]);
                                GlobalDataManager.Current.Barcodes.RemoveAt(0);
                            }
                        }
                    }
                }

                //20240429 启动底部条码枪选项分为1，2轨单独设置 【曹志鹏】 修改 Start
                //if (isNoTest || (MachineParams.Current.BarcodeSerialPort.IsEnabled && AutoRunSettings.Default.IsBottomBarcodeScannerEnabled & Customization.Current.IsBottomBarcodeUnreadableByPass && GlobalDataManager.Current.Barcodes.Count <= GlobalDataManager.Current.InOutPCBs))
                if (isNoTest || (MachineParams.Current.BarcodeSerialPort.IsEnabled && AutoRunSettings.Default.IsBottomBarcodeScannerEnabled1 & Customization.Current.IsBottomBarcodeUnreadableByPass && GlobalDataManager.Current.Barcodes.Count <= GlobalDataManager.Current.InOutPCBs))
                //20240429 启动底部条码枪选项分为1，2轨单独设置 【曹志鹏】 修改 End
                {
                    IBatchOperationInline op = m.CreateBatchOperationInline();
                    IOperationResult opResult = null;
                    op.BoardOut();
                    opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                    progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);
                    //opResult.Wait();
                    /////////////////////////////////////////////////////////m.UpdateInline();
                    //context.CheckInlineMachineStatus();

                    // 20190906 OK/NG log修改 Start
                    // 心跳
                    DateTime dateTimePre2 = DateTime.Now;
                    DateTime dateTimeNow2 = DateTime.Now;
                    // 20190906 OK/NG log修改 End

                    while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                    {
                        // 20190907 OK / NG 信号Log输出追加 Start
                        dateTimeNow2 = DateTime.Now;
                        TimeSpan ts = dateTimeNow2 - dateTimePre2;
                        if (ts.TotalSeconds >= 5)
                        {
                            dateTimePre2 = dateTimeNow2;
                            Holly.Log.HlLogger.Write("HOLLY AOI ============> Board In Wait CompleteProcessStatus[2] Heart 5s ...... " + dateTimeNow2);
                        }
                        // 20190907 OK / NG 信号Log输出追加 End	
                        if (context.StopFlag)
                            return ExitState.Current;

                        //20231117 常州汇川简化自动点检功能 【金伟】 追加 Start 
                        if (ExportSpotCheckPreventShopfloorManager.Current.IsExportEnabled)
                        {
                            if (ExportSpotCheckPreventShopfloorManager.Current.isTimePoint)
                                return ExitState.Current;
                        }
                        //20231117 常州汇川简化自动点检功能 【金伟】 追加 End 

                        m.UpdateInline();
                        if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                        {
                            //20230706  查找E05 【徐明武】 修改 Start
                            //return DesyncState.Current;
                            {
                                Holly.Log.HlLogger.Write("E05 => 30 ");
                                return DesyncState.Current;
                            }
                            //20230706  查找E05 【徐明武】 修改 End 
                        }
                        //context.CheckInlineMachineStatus();

                        Thread.Sleep(50);
                    }

                    progressListener.Complete();

                    if (opResult.HasError)
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> Board Out opResult.HasError 1");
                        GlobalDataManager.Current.IsPLCError = true;
                        // 20230209 E05区分 追加 Start   
                        GlobalDataManager.Current.EquipmentErrorCode = "E34 出板异常";//PLC报警
                        Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                        // 20230209 E05区分 追加 End 
                        //20230706  查找E05 【徐明武】 修改 Start
                        //return DesyncState.Current;
                        {
                            Holly.Log.HlLogger.Write("E05 => 31 ");
                            return DesyncState.Current;
                        }
                        //20230706  查找E05 【徐明武】 修改 End 
                    }
                }
                else
                {
                    // 20240507 环旭相机切程序 【刘红绅】 追加 Start
                    // 20240709 环旭相机切程序_飞拍 【范克文】 删除 Start
                    //if (Customization.Current.CameraChangeProgramShopfloor.IsEnabled)
                    //{
                    //    if (!this.IsRequestOne && !CameraChangeProgramManager.Current.IsChangeProgramSucceed)
                    //    {
                    //        WaitVerify(m, "切换回条码程式失败，请退出检查后重新启动自动运行");
                    //        return ExitState.Current;
                    //    }
                    //}
                    // 20240709 环旭相机切程序_飞拍 【范克文】 删除 End
                    // 20240507 环旭相机切程序 【刘红绅】 追加 End
                    //拍照
                    if (Customization.Current.IsOnlyOneImageCapture)
                    {
                        // 20190906 OK/NG log修改 Start
                        Holly.Log.HlLogger.Write("HOLLY AOI ============> Board In Config IsOnlyOneImageCapture");
                        // 心跳
                        DateTime dateTimePre3 = DateTime.Now;
                        DateTime dateTimeNow3 = DateTime.Now;
                        // 20190906 OK/NG log修改 End
                        while (GlobalDataManager.Current.IsDoingInspection)
                        {
                            // 20190907 OK / NG 信号Log输出追加 Start
                            dateTimeNow3 = DateTime.Now;
                            TimeSpan ts = dateTimeNow3 - dateTimePre3;
                            if (ts.TotalSeconds >= 5)
                            {
                                dateTimePre3 = dateTimeNow3;
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> Board In Wait Inspection[3] Heart 5s ...... " + dateTimeNow3);
                            }
                            // 20190907 OK / NG 信号Log输出追加 End

                            Thread.Sleep(50);
                            if (context.StopFlag)
                            {
                                return ExitState.Current;
                            }

                            //20231117 常州汇川简化自动点检功能 【金伟】 追加 Start 
                            if (ExportSpotCheckPreventShopfloorManager.Current.IsExportEnabled)
                            {
                                if (ExportSpotCheckPreventShopfloorManager.Current.isTimePoint)
                                    return ExitState.Current;
                            }
                            //20231117 常州汇川简化自动点检功能 【金伟】 追加 End 
                        }
                    }

                    if (!Customization.Current.IsImageTransferNotWait)
                    {
                        bool isTransfer = GlobalDataManager.Current.IsImageTransfering;
                        // 20190906 OK/NG log修改 Start
                        Holly.Log.HlLogger.Write("HOLLY AOI ============> Board In IsImageTransfering " + isTransfer);
                        // 20190906 OK/NG log修改 End
                        while (isTransfer)
                        {
                            if (context.StopFlag)
                            {
                                Holly.Log.HlLogger.Write("HOLLY AOI Rail 1 ============> context.StopFlag ");
                                return ExitState.Current;
                            }

                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BitmapExporting);
                            isTransfer = GlobalDataManager.Current.IsImageTransfering;
                            Holly.Log.HlLogger.Write("HOLLY AOI Rail 1 ============> Check Image Transfer Status = " + isTransfer);
                            Thread.Sleep(150);
                        }
                    }

                    //20250320 越南富士康AOI自动运行界面直通率优化，移植SPI进出板轨道信息【曹志鹏】追加 Start
                    ViewModels.RailInfoViewModel.Current.UpdateCapturingImageData(1, 1);
                    //20250320 越南富士康AOI自动运行界面直通率优化，移植SPI进出板轨道信息【曹志鹏】追加 End

                    // 20220105 汇川多程式自动切换并调整V轴 追加 Start
                    // 正常拍照流程
                    if (!Customization.Current.AutoSwitchProgramsShopfloor.IsEnabled || this.IsRequestOne)
                    {
                        // 20240507 环旭相机切程序 【刘红绅】 修改 Start
                        #region old
                        //// 20220105 汇川多程式自动切换并调整V轴 追加 End
                        //Holly.Log.HlLogger.Write("HOLLY AOI ============> GrabByScanType Start " + DateTimeUtils.GetNow());
                        ////Log4Net.Info("HOLLY AOI ============> GrabByScanType Start " + DateTimeUtils.GetNow());
                        //// 20230209 WINCC通讯 追加 Start
                        //ExportNanJingSiemensShopfloorManager.Current.TestState("1");
                        //// 20230209 WINCC通讯 追加 End

                        //// 20211022 导出处理日期 追加 Start
                        //ExportProcessDataShopfloorManager.Current.GrabStart(DateTime.Now, 1);
                        //// 20211022 导出处理日期 追加 End

                        //if (AutoRunSettings2.Default.IsDoubleSideAOI && AutoRunSettings2.Default.IsGrabWait)
                        //{
                        //    Thread.Sleep((int)(AutoRunSettings2.Default.WaitSeconds * 1000));
                        //}

                        //// 20220119 立景双面机当单面机用 追加 Start
                        ////20230810 惠州欣旺达延迟拍照界面化 【张晨铖】 追加 Start
                        //if (Customization.Current.IsBoardOutDelay && AutoRunSettings2.Default.PhotoDelay > 0)
                        //{
                        //    Thread.Sleep((int)(AutoRunSettings2.Default.PhotoDelay * 1000));
                        //}
                        //else
                        //{
                        //    //20230810 惠州欣旺达延迟拍照界面化 【张晨铖】 追加 End
                        //    if (Customization.Current.WaitSeconds > 0)
                        //    {
                        //        Thread.Sleep((int)(Customization.Current.WaitSeconds * 1000));
                        //    }
                        //    //20230810 惠州欣旺达延迟拍照界面化 【张晨铖】 追加 Start
                        //}
                        ////20230810 惠州欣旺达延迟拍照界面化 【张晨铖】 追加 End
                        //// 20220119 立景双面机当单面机用 追加 End

                        //result = context.GrabByScanType(null);

                        //Holly.Log.HlLogger.Write("HOLLY AOI ============> GrabByScanType end " + DateTimeUtils.GetNow());
                        ////Log4Net.Info("HOLLY AOI ============> GrabByScanType end " + DateTimeUtils.GetNow());
                        //// 20230713 上饶立景双面机多程式切换 【徐明武】 追加 Start
                        ////注：拍完照直接回ReleaseBoardPosition
                        //string message = string.Format("E05 => LiJingShopfloor.IsEnabled :{0}, LiJingShopfloor.IsBeforeGrabGoReleaseBoardPosition:{1},IsDoubleSideAOI：={2},DoubleSideAOI.IsMaster:{3}", Customization.Current.LiJingShopfloor.IsEnabled, Customization.Current.LiJingShopfloor.IsBeforeGrabGoReleaseBoardPosition, AutoRunSettings2.Default.IsDoubleSideAOI, AutoRunSettings2.Default.IsMaster);
                        //Holly.Log.HlLogger.Write(message);
                        //if (Customization.Current.LiJingShopfloor.IsEnabled /*&& (!AutoRunSettings2.Default.IsMaster)*/ && Customization.Current.LiJingShopfloor.IsBeforeGrabGoReleaseBoardPosition && AutoRunSettings2.Default.IsDoubleSideAOI)
                        //{
                        //    var mReleaseBoardPosition = App.Current.GetService<Machine>();
                        //    var goOp = m.CreateBatchOperation();
                        //    goOp.LocateLoader(new int2(mReleaseBoardPosition.X, mReleaseBoardPosition.Y), MachineParams.Current.ReleaseBoardPosition.ToPlugs(), false);
                        //    Holly.Log.HlLogger.Write("E05 => HOLLY AOI =====> ImageAcquisitionMachine.Visit GoState ReleaseBoardPosition:" + MachineParams.Current.ReleaseBoardPosition.ToPlugs());
                        //    var opResult = goOp.Execute(MachineParams.Current.OperationStepTimeout);
                        //    opResult.Wait(false);
                        //}
                        //message = string.Format("E05 => mReleaseBoardPosition End");
                        //Holly.Log.HlLogger.Write(message);

                        //// 20230713 上饶立景双面机多程式切换 【徐明武】追加 End 
                        #endregion
                        if (Customization.Current.CameraChangeProgramShopfloor.IsEnabled && !this.IsRequestOne)
                        {
                            //相机切程序流程
                            Holly.Log.HlLogger.Write("HOLLY AOI ============> GrabByScanType CameraChangeProgramShopfloor Start");
                            CameraChangeProgramManager.Current.CurentProgramIndex = 0;
                            // 20240709 环旭相机切程序_飞拍 【范克文】 删除 Start
                            //CameraChangeProgramManager.Current.IsInspectionFinished = false;
                            // 20240709 环旭相机切程序_飞拍 【范克文】 删除 End

                            // 20240709 环旭相机切程序_飞拍 【范克文】 修改 Start
                            //result = context.GrabByScanType(null);
                            //if (GlobalDataManager.Current.IsCameraCancelled)
                            //{
                            //    WaitVerify(m, "采集图像超时，请退出检查后重新启动自动运行");
                            //    return ExitState.Current;
                            //}

                            Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) _isReCaptureInspection = " + CameraChangeProgramManager.Current.IsReCaptureInspection);
                            if (!CameraChangeProgramManager.Current.IsReCaptureInspection)
                            {
                                result = context.GrabByScanType(null);
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) GrabByScanType ");
                                if (GlobalDataManager.Current.IsCameraCancelled)
                                    CameraChangeProgramManager.Current.IsReCaptureGuide = true;
                                else
                                    CameraChangeProgramManager.Current.IsReCaptureGuide = false;
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) _isReCaptureGuide = " + CameraChangeProgramManager.Current.IsReCaptureGuide);
                            }
                            // 20240709 环旭相机切程序_飞拍 【范克文】 修改 End

                            // 20240709 环旭相机切程序_飞拍 【范克文】 删除 Start
                            //if (CameraChangeProgramManager.Current.WaitInspectionComplete())
                            //{
                            //    WaitVerify(m, "等待检测结果超时，请退出检查后重新启动自动运行");
                            //    return ExitState.Current;
                            //}
                            //if (!CameraChangeProgramManager.Current.IsChangeProgramSucceed)
                            //{
                            //    WaitVerify(m, "切换检测程式失败，请退出检查后重新启动自动运行");
                            //    return ExitState.Current;
                            //}
                            // 20240709 环旭相机切程序_飞拍 【范克文】 删除 End
                            CameraChangeProgramManager.Current.CurentProgramIndex = 1;

                            // 20240709 环旭相机切程序_飞拍 【范克文】 修改 Start
                            //result = context.GrabByScanType(null);

                            Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) _isReCaptureGuide = " + CameraChangeProgramManager.Current.IsReCaptureGuide);
                            if (!CameraChangeProgramManager.Current.IsReCaptureGuide)
                            {
                                result = context.GrabByScanType(null);
                                if (GlobalDataManager.Current.IsCameraCancelled)
                                    CameraChangeProgramManager.Current.IsReCaptureInspection = true;
                                else
                                    CameraChangeProgramManager.Current.IsReCaptureInspection = false;
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) _isReCaptureInspection = " + CameraChangeProgramManager.Current.IsReCaptureInspection);
                            }
                            // 20240709 环旭相机切程序_飞拍 【范克文】 修改 End

                            // 20240709 环旭相机切程序_飞拍 【范克文】 删除 Start
                            //CameraChangeProgramManager.Current.IsChangeProgramSucceed = false;
                            // 20240709 环旭相机切程序_飞拍 【范克文】 删除 End
                            Holly.Log.HlLogger.Write("HOLLY AOI ============> GrabByScanType CameraChangeProgramShopfloor End");
                        }
                        else
                        {
                            //正常拍照流程
                            // 20220105 汇川多程式自动切换并调整V轴 追加 End
                            Holly.Log.HlLogger.Write("HOLLY AOI ============> GrabByScanType Start " + DateTimeUtils.GetNow());
                            //Log4Net.Info("HOLLY AOI ============> GrabByScanType Start " + DateTimeUtils.GetNow());
                            if (Customization.Current.CameraChangeProgramShopfloor.IsEnabled && this.IsRequestOne)
                            {
                                CameraChangeProgramManager.Current.IsRequestOne = true;
                                CameraChangeProgramManager.Current.CurentProgramIndex = 0;
                            }
                            // 20230209 WINCC通讯 追加 Start
                            ExportNanJingSiemensShopfloorManager.Current.TestState("1");
                            // 20230209 WINCC通讯 追加 End

                            // 20211022 导出处理日期 追加 Start
                            ExportProcessDataShopfloorManager.Current.GrabStart(DateTime.Now, 1);
                            // 20211022 导出处理日期 追加 End

                            if (AutoRunSettings2.Default.IsDoubleSideAOI && AutoRunSettings2.Default.IsGrabWait)
                            {
                                Thread.Sleep((int)(AutoRunSettings2.Default.WaitSeconds * 1000));
                            }

                            // 20220119 立景双面机当单面机用 追加 Start
                            //20230810 惠州欣旺达延迟拍照界面化 【张晨铖】 追加 Start
                            if (Customization.Current.IsBoardOutDelay && AutoRunSettings2.Default.PhotoDelay > 0)
                            {
                                Thread.Sleep((int)(AutoRunSettings2.Default.PhotoDelay * 1000));
                            }
                            else
                            {
                                //20230810 惠州欣旺达延迟拍照界面化 【张晨铖】 追加 End
                                if (Customization.Current.WaitSeconds > 0)
                                {
                                    Thread.Sleep((int)(Customization.Current.WaitSeconds * 1000));
                                }
                                //20230810 惠州欣旺达延迟拍照界面化 【张晨铖】 追加 Start
                            }
                            //20230810 惠州欣旺达延迟拍照界面化 【张晨铖】 追加 End
                            // 20220119 立景双面机当单面机用 追加 End

                            result = context.GrabByScanType(null);

                            Holly.Log.HlLogger.Write("HOLLY AOI ============> GrabByScanType end " + DateTimeUtils.GetNow());
                            //Log4Net.Info("HOLLY AOI ============> GrabByScanType end " + DateTimeUtils.GetNow());
                            // 20230713 上饶立景双面机多程式切换 【徐明武】 追加 Start
                            //注：拍完照直接回ReleaseBoardPosition
                            string message = string.Format("E05 => LiJingShopfloor.IsEnabled :{0}, LiJingShopfloor.IsBeforeGrabGoReleaseBoardPosition:{1},IsDoubleSideAOI：={2},DoubleSideAOI.IsMaster:{3}", Customization.Current.LiJingShopfloor.IsEnabled, Customization.Current.LiJingShopfloor.IsBeforeGrabGoReleaseBoardPosition, AutoRunSettings2.Default.IsDoubleSideAOI, AutoRunSettings2.Default.IsMaster);
                            Holly.Log.HlLogger.Write(message);
                            if (Customization.Current.LiJingShopfloor.IsEnabled /*&& (!AutoRunSettings2.Default.IsMaster)*/ && Customization.Current.LiJingShopfloor.IsBeforeGrabGoReleaseBoardPosition && AutoRunSettings2.Default.IsDoubleSideAOI)
                            {
                                var mReleaseBoardPosition = App.Current.GetService<Machine>();
                                var goOp = m.CreateBatchOperation();
                                goOp.LocateLoader(new int2(mReleaseBoardPosition.X, mReleaseBoardPosition.Y), MachineParams.Current.ReleaseBoardPosition.ToPlugs(), false);
                                Holly.Log.HlLogger.Write("E05 => HOLLY AOI =====> ImageAcquisitionMachine.Visit GoState ReleaseBoardPosition:" + MachineParams.Current.ReleaseBoardPosition.ToPlugs());
                                var opResult = goOp.Execute(MachineParams.Current.OperationStepTimeout);
                                opResult.Wait(false);
                            }
                            message = string.Format("E05 => mReleaseBoardPosition End");
                            Holly.Log.HlLogger.Write(message);

                            // 20230713 上饶立景双面机多程式切换 【徐明武】追加 End 
                        }
                        // 20240507 环旭相机切程序 【刘红绅】 修改 End


                        // 20220105 汇川多程式自动切换并调整V轴 追加 Start
                    }
                    // 多程式自动切换拍照流程
                    else
                    {
                        // 初始化测试过程控制变量
                        ExportAutoSwitchProgramsShopfloorManager.Current.InitAllProcessValue();

                        // 20230406 上饶立景双面机多程序切换功能需要等待 【刘红绅】 追加 Start
                        if (AutoRunSettings2.Default.IsDoubleSideAOI && AutoRunSettings2.Default.IsGrabWait)
                        {
                            Thread.Sleep((int)(AutoRunSettings2.Default.WaitSeconds * 1000));
                        }
                        // 20230406 上饶立景双面机多程序切换功能需要等待 【刘红绅】 追加 End

                        Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) 111, ExportAutoSwitchProgramsShopfloorManager.Current.CurrentInspectionPrograms.Count =" +
                               ExportAutoSwitchProgramsShopfloorManager.Current.CurrentInspectionPrograms.Count + " ," + DateTimeUtils.GetNow());

                        // 根据当前存储程式数量进行检测
                        for (int i = 0; i < ExportAutoSwitchProgramsShopfloorManager.Current.CurrentInspectionPrograms.Count; i++)
                        {
                            Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) GrabByScanType Start, ExportAutoSwitchProgramsShopfloorManager.Current.CurrentInspectionNumber =" +
                                ExportAutoSwitchProgramsShopfloorManager.Current.CurrentInspectionNumber.ToString() + " ," + DateTimeUtils.GetNow());

                            result = context.GrabByScanType(null);

                            if (GlobalDataManager.Current.IsCameraCancelled)
                            {
                                WaitVerify(m, "采集图像超时，请退出检查后重新启动自动运行");
                                return ExitState.Current;
                            }

                            //20231027 立景双面机v轴切换ct优化 【曹志鹏】 追加 Start
                            //等另外一面拍照完成后再进行下一段程序的拍照，避免光源干扰
                            DateTime dateTimePre = DateTime.Now;
                            //20231027 立景双面机v轴切换ct优化 【曹志鹏】 追加 End

                            // 20230713 上饶立景双面机多程式切换 【徐明武】 追加 Start
                            //注：拍完照直接回ReleaseBoardPosition
                            string message = string.Format("E05 => LiJingShopfloor.IsEnabled :{0},LiJingShopfloor.IsBeforeGrabGoReleaseBoardPosition:{1},IsDoubleSideAOI:{2},DoubleSideAOI.IsMaster:{3}",
                                Customization.Current.LiJingShopfloor.IsEnabled.ToString(),
                                Customization.Current.LiJingShopfloor.IsBeforeGrabGoReleaseBoardPosition.ToString(),
                                AutoRunSettings2.Default.IsDoubleSideAOI.ToString(),
                                AutoRunSettings2.Default.IsMaster.ToString());
                            Holly.Log.HlLogger.Write(message);
                            if (Customization.Current.LiJingShopfloor.IsEnabled && Customization.Current.LiJingShopfloor.IsBeforeGrabGoReleaseBoardPosition && AutoRunSettings2.Default.IsDoubleSideAOI)
                            {
                                var mReleaseBoardPosition = App.Current.GetService<Machine>();
                                var goOp = m.CreateBatchOperation();
                                goOp.LocateLoader(new int2(mReleaseBoardPosition.X, mReleaseBoardPosition.Y), MachineParams.Current.ReleaseBoardPosition.ToPlugs(), false);
                                Holly.Log.HlLogger.Write("E05 => HOLLY AOI =====> ImageAcquisitionMachine.Visit GoState ReleaseBoardPosition:" + MachineParams.Current.ReleaseBoardPosition.ToPlugs());
                                var opResult = goOp.Execute(MachineParams.Current.OperationStepTimeout);
                                opResult.Wait(false);
                            }
                            message = string.Format("E05 => mReleaseBoardPosition End");
                            Holly.Log.HlLogger.Write(message);
                            // 20230713 上饶立景双面机多程式切换 【徐明武】追加 End 

                            // 20230427 上饶立景双面机多程式切换 追加 Start
                            //20230721 立景底面拍照结束后不需回零点直接运动到ReleaseBoardPosition处 【徐明武】删除 Start
                            //注：多程序模式下，在最后一张图像采集结束执行GrabEnd
                            Holly.Log.HlLogger.Write("E05 =>  i = DoubleSideDataControl Status Start ");
                            //20230818 立景双面机多程式切换优化 【曹志鹏】 修改 Start
                            //if (i == 0)
                            //{
                            //    Holly.Log.HlLogger.Write("E05 => HOLLY AOI =====> DoubleSideDataControl.Current.GrabEnd: i = " + i.ToString());
                            //    DoubleSideDataControl.Current.GrabEnd(1);
                            //}
                            //else
                            //{
                            //    Holly.Log.HlLogger.Write("E05 => HOLLY AOI =====> DoubleSideDataControl.Current.GrabEndFromInspection: i = " + i.ToString());
                            //    DoubleSideDataControl.Current.GrabEndFromInspection(1);
                            //}
                            if (i == ExportAutoSwitchProgramsShopfloorManager.Current.CurrentInspectionPrograms.Count - 1)
                            {
                                Holly.Log.HlLogger.Write("E05 => HOLLY AOI =====> DoubleSideDataControl.Current.GrabEnd: i = " + i.ToString());
                                DoubleSideDataControl.Current.GrabEnd(1);
                            }
                            //20230818 立景双面机多程式切换优化 【曹志鹏】 修改 End
                            Holly.Log.HlLogger.Write("E05 =>  i = DoubleSideDataControl Status End ");

                            //20230721 立景底面拍照结束后不需回零点直接运动到ReleaseBoardPosition处 【徐明武】删除 End
                            // 20230427 上饶立景双面机多程式切换 追加 End
                            // 20221207 常州汇川最后一次不用等检测结束 修改 Start
                            //if (ExportAutoSwitchProgramsShopfloorManager.Current.WaitInspectionComplete())
                            //{
                            //    WaitVerify(m, "等待检测结果超时，请退出检查后重新启动自动运行");
                            //    return ExitState.Current;
                            //}

                            //20230717 立景多程式不等待结果拍照 [徐明武] 追加 Start
                            //注:此处修改目的是，在多程式拍照过程中，让拍照和数据处理并行，提升效率。
                            if (!Customization.Current.LiJingShopfloor.IsNotWaitInspectionResult)
                            {
                                //20230717 立景多程式不等待结果拍照 [徐明武] 追加 End

                                if (i != ExportAutoSwitchProgramsShopfloorManager.Current.CurrentInspectionPrograms.Count - 1)
                                {
                                    if (ExportAutoSwitchProgramsShopfloorManager.Current.WaitInspectionComplete())
                                    {
                                        WaitVerify(m, "等待检测结果超时，请退出检查后重新启动自动运行");
                                        return ExitState.Current;
                                    }
                                }
                                // 20230330 上饶立景切程式 追加 Start
                                else if (AutoRunSettings2.Default.IsDoubleSideAOI)
                                {
                                    if (ExportAutoSwitchProgramsShopfloorManager.Current.WaitInspectionComplete())
                                    {
                                        WaitVerify(m, "等待检测结果超时，请退出检查后重新启动自动运行");
                                        return ExitState.Current;
                                    }
                                }

                                // 20230330 上饶立景切程式 追加 End
                                // 20221207 常州汇川最后一次不用等检测结束 修改 End

                                if (!ExportAutoSwitchProgramsShopfloorManager.Current.IsChangeProgramSucceed)
                                {
                                    WaitVerify(m, "切换程式失败，请退出检查后重新启动自动运行");
                                    return ExitState.Current;
                                }


                                //20230717 立景多程式不等待结果拍照 [徐明武] 追加 Start
                            }
                            //20230717 立景多程式不等待结果拍照 [徐明武] 追加 End
                            //20230823 立景双面机多程式切换优化 【曹志鹏】 追加 Start
                            else
                            {
                                if (ExportAutoSwitchProgramsShopfloorManager.Current.WaitChangeProgramComplete())
                                {
                                    WaitVerify(m, "等待切换程序超时，请退出检查后重新启动自动运行");
                                    return ExitState.Current;
                                }
                                ExportAutoSwitchProgramsShopfloorManager.Current.HaveChangedProgram = false;
                            }
                            //20230823 立景双面机多程式切换优化 【曹志鹏】 追加 End

                            //20230818 立景双面机多程式切换优化 【曹志鹏】 删除 Start
                            //ExportAutoSwitchProgramsShopfloorManager.Current.CurrentInspectionNumber++;
                            //Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) GrabByScanType End, ExportAutoSwitchProgramsShopfloorManager.Current.CurrentInspectionNumber =" +
                            //    ExportAutoSwitchProgramsShopfloorManager.Current.CurrentInspectionNumber.ToString() + " ," + DateTimeUtils.GetNow());

                            //Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) GrabByScanType index :"  + i.ToString() + ",CurrentInspectionNumber:" +
                            //    ExportAutoSwitchProgramsShopfloorManager.Current.CurrentInspectionPrograms.Count.ToString());
                            //20230818 立景双面机多程式切换优化 【曹志鹏】 删除 End

                            //20231027 立景双面机v轴切换ct优化 【曹志鹏】 追加 Start
                            //等另外一面拍照完成后再进行下一段程序的拍照，避免光源干扰
                            if (AutoRunSettings2.Default.IsDoubleSideAOI && !AutoRunSettings2.Default.IsGrabWait && i == 0)
                            {
                                TimeSpan timeSpend = DateTime.Now - dateTimePre;

                                if (timeSpend.TotalMilliseconds < AutoRunSettings2.Default.WaitSeconds * 1000)
                                {
                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> DoubleSideDataControl wait otherside grab Milliseconds：" + (AutoRunSettings2.Default.WaitSeconds * 1000 - timeSpend.TotalMilliseconds));
                                    Thread.Sleep((int)(AutoRunSettings2.Default.WaitSeconds * 1000 - timeSpend.TotalMilliseconds));
                                }
                            }
                            //20231027 立景双面机v轴切换ct优化 【曹志鹏】 追加 End
                        }

                        //20230721 立景底面拍照结束后不需回零点直接运动到ReleaseBoardPosition处 【徐明武】追加 Start
                        //注：多程序模式下，在最后一张图像采集结束执行GrabEnd
                        //202030811 多程序切换拍照异常 删除 Start
                        //Holly.Log.HlLogger.Write("HOLLY AOI ============> DoubleSideDataControl.Current.GrabEnd(1),1,Start Customization.Current.DoubleSideAOI.IsMaster:" + Customization.Current.DoubleSideAOI.IsMaster.ToString());
                        //DoubleSideDataControl.Current.GrabEnd(1);
                        //Holly.Log.HlLogger.Write("HOLLY AOI ============> DoubleSideDataControl.Current.GrabEnd(1),1,End Customization.Current.DoubleSideAOI.IsMaster:" + Customization.Current.DoubleSideAOI.IsMaster.ToString());
                        //202030811 多程序切换拍照异常 删除 End    
                        //20230721 立景底面拍照结束后不需回零点直接运动到ReleaseBoardPosition处 【徐明武】追加 End
                    }
                    // 20220105 汇川多程式自动切换并调整V轴 追加 End
                    // 20241223 常州理想rifd连接中断修改读取方式 【刘红绅】追加 Start
                    if (Customization.Current.S7ReadRFID.IsEnabled)
                    {
                        string LiXiangOut = ExportLiXiangShopfloorManager.Current.MC18180InOutMain("out");
                        if (!string.IsNullOrEmpty(LiXiangOut))
                        {
                            string Message = "区域订单号:" + ExportLiXiangShopfloorManager.Current.currentRFID + ",主零件码:" + ExportLiXiangShopfloorManager.Current.currentBarcode + ",机型号:" + ExportLiXiangShopfloorManager.Current.currentPartNum;
                            bool resultYesNo = WaitVerifyWithYesNo(m, Message + ".出站异常:" + LiXiangOut, "重新出站", "出站屏蔽");
                            if (resultYesNo)
                            {
                                string LiXiangInAgain = ExportLiXiangShopfloorManager.Current.MC18180InOutMain("out");
                                if (!string.IsNullOrEmpty(LiXiangInAgain))
                                {
                                    while (WaitVerifyWithYesNo(m, Message + ".重新出站异常:" + LiXiangInAgain, "重新出站", "出站屏蔽"))
                                    {
                                        LiXiangInAgain = ExportLiXiangShopfloorManager.Current.MC18180InOutMain("out");
                                        if (string.IsNullOrEmpty(LiXiangInAgain))
                                        {
                                            break;
                                        }
                                    }
                                }

                            }
                        }
                    }
                    // 20241223 常州理想rifd连接中断修改读取方式 【刘红绅】追加 End
                    // 20211022 导出处理日期 追加 Start
                    ExportProcessDataShopfloorManager.Current.GrabEnd(DateTime.Now, 1);
                    // 20211022 导出处理日期 追加 End

                    // 20201105 通用版本切换程序 追加 Start
                    // 第一次拍照前，设置是否编译程序为True           
                    if (Customization.Current.SwitchProgram.IsEnabled)
                    {
                        ExportSwitchProgramManager.Current.isReCompileInspectionProgram = true;
                        ExportSwitchProgramManager.Current.currentInspectionID = DateTime.Now.ToString("yyyyMMddHHmmss");
                        Holly.Log.HlLogger.Write("HOLLY AOI ====> SwitchProgram ImageAcquisitionMachine visit Time ID:" + ExportSwitchProgramManager.Current.currentInspectionID);
                    }
                    // 20201105 通用版本切换程序 追加 End

                    //result = context.GrabByScanType(null);

                    Holly.Log.HlLogger.Write("HOLLY AOI ============> GrabByScanType end " + DateTimeUtils.GetNow());
                    //Log4Net.Info("HOLLY AOI ============> GrabByScanType end " + DateTimeUtils.GetNow());
                    // 20191205 廊坊报警信息 追加 Start
                    GlobalDataManager.Current.IsNoBoardOutAlarming = false;
                    // 20191205 廊坊报警信息 追加 End
                    GlobalDataManager.Current.IsGrabing = false;
                    GlobalDataManager.Current.GrabDateTime = DateTime.Now;
                    //context.CheckInlineMachineStatus();

                    // 20210913 NVT检测结果生成信号及空文件丢失问题对应 追加 Start
                    ProcessDataControl.Current.DelOverdueRecord();
                    ProcessDataControl.Current.grabEndList1.Add(DateTime.Now);
                    Holly.Log.HlLogger.Write("HOLLY AOI =====> GrabByScanType end  ProcessDataControl.grabEndList1.Add() grabEndTime = " + DateTime.Now.ToString());
                    //Log4Net.Info("HOLLY AOI =====> GrabByScanType end  ProcessDataControl.grabEndList1.Add() grabEndTime = " + DateTime.Now.ToString());
                    // 20210913 NVT检测结果生成信号及空文件丢失问题对应 追加 End

                    if (result == null || (result != null && result.HasError) || GlobalDataManager.Current.IsCameraCancelled)
                    {
                        if (!this.IsRequestOne) //if (MachineParams.Current.IsInlineMode && !this.IsRequestOne)                           
                        {
                            Holly.Log.HlLogger.Write("HOLLY AOI ============> GrabByScanType result null. Recapture.");
                            //Log4Net.Info("HOLLY AOI ============> GrabByScanType result null. Recapture.");
                            //if (!AutoRunSettings.Default.IsOfflineMode || (AutoRunSettings.Default.IsOfflineMode && AutoRunSettings.Default.AutoRunOfflineMode != 2))
                            //{
                            //    IBatchOperationInline op = m.CreateBatchOperationInline();
                            //    IOperationResult opResult = null;
                            //    op.ClearBoard();
                            //    op.LocateLoader(GlobalDataManager.Current.LastPosition, GlobalDataManager.Current.ReleaseBoardPosition, false);
                            //    opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                            //    progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_ClearingBoard);
                            //    //opResult.Wait();
                            //    m.UpdateInline();
                            //    while ((m.CompleteProcessStatus & CompleteProcessStatus1.ClearBoard) == 0 && (m.CommandStatusInline & CommandStatusInline.BoardInside) == 0)
                            //    {
                            //        if (context.StopFlag)
                            //            return ExitState.Current;
                            //        m.UpdateInline();
                            //        Thread.Sleep(100);
                            //    }
                            //    progressListener.Complete();
                            //}

                            // 20200321 相机复位 追加 Start
                            if (Customization.Current.IsForceResetCamera)
                            {
                                //Holly.Log.HlLogger.Write("HOLLY AOI ============> GrabByScanType result null. Recapture. ResetCamera Start");
                                //IOperationResult opResultReset = null;
                                //var origin = context.GetOriginPosition();
                                //opResultReset = m.SmartReleaseBoard(origin, true);
                                //opResultReset.Wait(false);
                                //if (opResultReset.HasError)
                                //{
                                //    Holly.Log.HlLogger.Write("HOLLY AOI ============> GrabByScanType result null. Recapture. ResetCamera Has Error");
                                //    return DesyncState.Current;
                                //}
                                //Holly.Log.HlLogger.Write("HOLLY AOI ============> GrabByScanType result null. Recapture. ResetCamera End");

                                Holly.Log.HlLogger.Write("HOLLY AOI ============> GrabByScanType result null. return DesyncState.Current");
                                //Log4Net.Warn("HOLLY AOI ============> GrabByScanType result null. return DesyncState.Current");
                                // 20230209 E05区分 追加 Start   
                                GlobalDataManager.Current.EquipmentErrorCode = "E36"; //拍照报警
                                Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                //Log4Net.Info("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                // 20230209 E05区分 追加 End 
                                //20230706  查找E05 【徐明武】 修改 Start
                                //return DesyncState.Current;
                                {
                                    Holly.Log.HlLogger.Write("E05 => 32 ");
                                    return DesyncState.Current;
                                }
                                //20230706  查找E05 【徐明武】 修改 End 
                            }
                            // 20200321 相机复位 追加 End

                            context._isReCapture = true;

                            IBatchOperationInline op = m.CreateBatchOperationInline();
                            IOperationResult opResult = null;
                            op.CameraLostFrame(true);
                            opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                            opResult.Wait();

                            //return GoState.Current;
                            //var initialResult = context.PrepareMachineAndDigitizer(true, progressListener);

                            //Holly.Log.HlLogger.Write("HOLLY AOI ============> Recapture PrepareMachineAndDigitizer.");

                            //initialResult.Wait(false);

                            //Holly.Log.HlLogger.Write("HOLLY AOI ============> Recapture PrepareMachineAndDigitizer end.");

                            context.OpenCamera();

                            op = m.CreateBatchOperationInline();
                            op.CameraLostFrame(false);
                            opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                            opResult.Wait();

                            if (opResult.HasError)
                            {
                                Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> opResult.HasError");
                                //Log4Net.Error("HOLLY AOI DesyncState============> opResult.HasError");
                                GlobalDataManager.Current.IsPLCError = true;
                                // 20230209 E05区分 追加 Start   
                                GlobalDataManager.Current.EquipmentErrorCode = "E34 拍照异常"; //PLC报警
                                Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                //Log4Net.Error("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                // 20230209 E05区分 追加 End 
                                //20230706  查找E05 【徐明武】 修改 Start
                                //return DesyncState.Current;
                                {
                                    // 20250221 报警后提供排查原因 【ygs】 追加 Start
                                    string errorContent = ExportCommonShopfloorManager.Current.GetAlarmStr(1);
                                    // 20250221 报警后提供排查原因 【ygs】 追加 End
                                    System.Windows.MessageBox.Show("拍照异常,请退出自动运行检查相机环境 "+errorContent);
                                    Holly.Log.HlLogger.Write("E05 => 33 ");
                                    return DesyncState.Current;
                                }
                                //20230706  查找E05 【徐明武】 修改 End 
                            }
                            else
                            {
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> Recapture goto GoState.Current");
                                return GoState.Current;
                            }
                        }
                        else
                        {
                            Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> GrabByScanType IsRequestOne");
                            //Log4Net.Info("HOLLY AOI DesyncState============> GrabByScanType IsRequestOne");
                            // 20230209 E05区分 追加 Start   
                            GlobalDataManager.Current.EquipmentErrorCode = "E36"; //拍照报警
                            Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                            //Log4Net.Info("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                            // 20230209 E05区分 追加 End 
                            //20230706  查找E05 【徐明武】 修改 Start
                            //return DesyncState.Current;
                            {
                                Holly.Log.HlLogger.Write("E05 => 34 ");
                                return DesyncState.Current;
                            }
                            //20230706  查找E05 【徐明武】 修改 End 
                        }
                    }
                    else
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI ============> GrabByScanType result wait");
                        //Log4Net.Info("HOLLY AOI ============> GrabByScanType result wait");
                        // 20200723 result.Wait(false) 异常故障对应 追加 Start

                        //20230415 手动拍照出图慢【张晨铖】 修改 Start
                        //DoubleSideDataControl.Current.GrabEnd(1);
                        // 20230427 上饶立景双面机多程式切换 修改 Start
                        //if (!this.IsRequestOne)
                        if (!this.IsRequestOne && !Customization.Current.AutoSwitchProgramsShopfloor.IsEnabled)
                        // 20230427 上饶立景双面机多程式切换 修改 End
                        {
                            //20230721 立景底面拍照结束后不需回零点直接运动到ReleaseBoardPosition处 【徐明武】追加 Start
                            Holly.Log.HlLogger.Write("HOLLY AOI ============> DoubleSideDataControl.Current.GrabEnd(1),2,Start AutoRunSettings2.Default.IsMaster:" + AutoRunSettings2.Default.IsMaster.ToString());
                            //20230721 立景底面拍照结束后不需回零点直接运动到ReleaseBoardPosition处 【徐明武】追加 End

                            DoubleSideDataControl.Current.GrabEnd(1);

                            //20230721 立景底面拍照结束后不需回零点直接运动到ReleaseBoardPosition处 【徐明武】追加 Start
                            Holly.Log.HlLogger.Write("HOLLY AOI ============> DoubleSideDataControl.Current.GrabEnd(1),2,End AutoRunSettings2.Default.IsMaster:" + AutoRunSettings2.Default.IsMaster.ToString());
                            //20230721 立景底面拍照结束后不需回零点直接运动到ReleaseBoardPosition处 【徐明武】追加 End
                        }
                        //20230415 手动拍照出图慢【张晨铖】 修改 End

                        // 20200723 result.Wait(false) 异常故障对应 追加 End

                        result.Wait(false);
                    }

                    Holly.Log.HlLogger.Write("HOLLY AOI ============> GrabByScanType End");

                    //20250320 越南富士康AOI自动运行界面直通率优化，移植SPI进出板轨道信息【曹志鹏】追加 Start
                    ViewModels.RailInfoViewModel.Current.UpdateCapturingImageData(1, 2);
                    //20250320 越南富士康AOI自动运行界面直通率优化，移植SPI进出板轨道信息【曹志鹏】追加 End

                    // 20250106 本机确认检测结果蜂鸣提示_检测NG没报警对应 【陈凤丹】 追加 Start
                    //场合：本机确认-自动确认仅合格场合
                    //故障现象：频繁发生，板子检测NG但是直接流走了，勾选的“检测结果蜂鸣提示”达到报警条件了却没报警
                    //原因： ExportBitmapManager存整板图用时4秒，导致自动确认延迟了,后一片板子没能清掉上一片板子的IsPassOK信号，被错位的信号发走了
                    GlobalDataManager.Current.IsPassOK1 = string.Empty;
                    // 20250106 本机确认检测结果蜂鸣提示_检测NG没报警对应 【陈凤丹】 追加 End

                    // 20230209 WINCC通讯 追加 Start
                    ExportNanJingSiemensShopfloorManager.Current.TestState("2");
                    // 20230209 WINCC通讯 追加 End

                    // 20230927 TraceLog格式整理 【陈凤丹】 追加 Start
                    LogManagerComm.Current.OutputLog(LogManagerComm.TRACE_LOG, DateTimeUtils.GetNow(DateTimeUtils.DATE_FORMAT1) + "\t" + "HOLLY AOI ============> GrabByScanType End");
                    // 20230927 TraceLog格式整理 【陈凤丹】 追加 End

                    // 20200723 result.Wait(false) 异常故障对应 删除 Start
                    //// 20200612 天津双面机数据不同步对应 追加 Start
                    //DoubleSideDataControl.Current.GrabEnd(1);
                    //// 20200612 天津双面机数据不同步对应 追加 End
                    // 20200723 result.Wait(false) 异常故障对应 删除 End

                    if (!result.HasError)
                    {
                        context._isReCapture = false;
                    }

                    // 20210622 版本恢复 追加
                    // 20210602 相机头复位延迟 删除 Start
                    Holly.Log.HlLogger.Write("HOLLY AOI ============> DoubleRailDoubleHead Step");
                    //Log4Net.Info("HOLLY AOI ============> DoubleRailDoubleHead Step");
                    if (Customization.Current.DoubleRailDoubleHead.IsEnabled && MachineParams.Current.SerialPort.IsHuichuan)
                    {
                        // 20231222 双轨双头倒立机器拍照后回原后又移动，加配置后正常 【刘少锋】 修改 Start
                        //// 20210622 相机头先复位 追加 Start
                        //LocateCamera(m);
                        //// 20210622 相机头先复位 追加 End

                        Holly.Log.HlLogger.Write("HOLLY AOI ====> ImageAcquisitionMachine.Vist  IsDoubleRailHeadHandstandToOrigin:" + MachineParams.Current.IsDoubleRailHeadHandstandToOrigin);
                        //Log4Net.Info("HOLLY AOI ====> ImageAcquisitionMachine.Vist  IsDoubleRailHeadHandstandToOrigin:" + MachineParams.Current.IsDoubleRailHeadHandstandToOrigin);
                        if (!MachineParams.Current.IsDoubleRailHeadHandstandToOrigin)
                        {
                            LocateCamera(m);
                        }
                        // 20231222 双轨双头倒立机器拍照后回原后又移动，加配置后正常 【刘少锋】 修改 End

                        Holly.Log.HlLogger.Write("HOLLY AOI ====> SetY24(false)");
                        //Log4Net.Info("HOLLY AOI ====> SetY24(false)");
                        CentralControlPLCCommand.Current.SetY24(false);

                        // 20210715 双轨双头解锁条码变更对应 追加 Start
                        DoubleRailDoubleHeadDataControl.Current.UpdateGrabRows(0);
                        // 20210715 双轨双头解锁条码变更对应 追加 End

                        //m40.UpdateInline();
                        //Holly.Log.HlLogger.Write("HOLLY AOI ====> SetY14(false) = " + ((m.OutputStatusInline & OutputStatusInline.SMEMAReadyOut) != 0));
                    }
                    // 20210602 相机头复位延迟 删除 End

                    Holly.Log.HlLogger.Write("HOLLY AOI ============> BottomBarcodeScanner Step");
                    //Log4Net.Info("HOLLY AOI ============> BottomBarcodeScanner Step");

                    // 20241121 条码枪装机外条码处理对应前移(从AOI_REPAIR3D_2500W移植功能) 追加 Start 
                    if (Customization.Current.IsBarcodeScannerInMachine)
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI ============> Customization.Current.IsBarcodeScannerInMachine = " + Customization.Current.IsBarcodeScannerInMachine);
                        BarcodeDataControl.Current.HandleBarcode();
                    }
                    // 20241121 条码枪装机外条码处理对应前移(从AOI_REPAIR3D_2500W移植功能) 追加 End 

                    #region 旧代码
                    // 20201019 MarkError（检测太快）对应 删除 Start
                    //if (AutoRunSettings.Default.IsBottomBarcodeScannerEnabled)
                    //{
                    //    GlobalDataManager.Current.InOutPCBs += 1;

                    //    if (Customization.Current.AUXBottomBarcode.IsEnabled)
                    //    {
                    //        if (MachineParams.Current.BarcodeSerialPort.IsEnabled)
                    //        {
                    //            Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) BottomBarcodesNumPerScanner = " + Customization.Current.AUXBottomBarcode.BottomBarcodesNumPerScanner);
                    //            Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) Add Empty Barcode Before Count = " + GlobalDataManager.Current.Barcodes.Count);
                    //            for (int i = GlobalDataManager.Current.Barcodes.Count; i < GlobalDataManager.Current.InOutPCBs * Customization.Current.AUXBottomBarcode.BottomBarcodesNumPerScanner; i++)
                    //            {
                    //                Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) Add Empty Barcode");
                    //                GlobalDataManager.Current.Barcodes.Add(string.Empty);
                    //            }
                    //            Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) Add Empty Barcode End Count = " + GlobalDataManager.Current.Barcodes.Count);

                    //            // 20200814 计数不正对应 追加 Start
                    //            // GlobalDataManager.Current.InOutPCBs 计数不对
                    //            if (GlobalDataManager.Current.Barcodes.Count < Customization.Current.AUXBottomBarcode.BottomBarcodesNumPerScanner)
                    //            {
                    //                Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) Add Empty Step2 Barcode Before Count = " + GlobalDataManager.Current.Barcodes.Count);
                    //                for (int i = GlobalDataManager.Current.Barcodes.Count; i < Customization.Current.AUXBottomBarcode.BottomBarcodesNumPerScanner; i++)
                    //                {
                    //                    GlobalDataManager.Current.Barcodes.Add(string.Empty);
                    //                }
                    //                Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) Add Empty Step2 Barcode End Count = " + GlobalDataManager.Current.Barcodes.Count);
                    //            }
                    //            // 20200814 计数不正对应 追加 End

                    //            // 20200930 计数不正对应 追加 Start
                    //            int step3AddCountTemp = GlobalDataManager.Current.Barcodes.Count % Customization.Current.AUXBottomBarcode.BottomBarcodesNumPerScanner;
                    //            if (step3AddCountTemp > 0)
                    //            {
                    //                int step3AddCount = Customization.Current.AUXBottomBarcode.BottomBarcodesNumPerScanner - step3AddCountTemp;
                    //                Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) Add Empty Step3 Barcode Before Count = " + GlobalDataManager.Current.Barcodes.Count);
                    //                for (int i = 0; i < step3AddCount; i++)
                    //                {
                    //                    GlobalDataManager.Current.Barcodes.Add(string.Empty);
                    //                }
                    //                Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) Add Empty Step3 Barcode End Count = " + GlobalDataManager.Current.Barcodes.Count);
                    //            }
                    //            // 20200930 计数不正对应 追加 End
                    //        }
                    //    if (MachineParams.Current.BarcodeSerialPort2.IsEnabled)
                    //        {
                    //            for (int i = GlobalDataManager.Current.Barcodes2.Count; i < GlobalDataManager.Current.InOutPCBs * Customization.Current.AUXBottomBarcode.BottomBarcodesNumPerScanner; i++)
                    //            {
                    //                GlobalDataManager.Current.Barcodes2.Add(string.Empty);
                    //            }
                    //        }
                    //        if (MachineParams.Current.BarcodeSerialPort3.IsEnabled)
                    //        {
                    //            for (int i = GlobalDataManager.Current.Barcodes3.Count; i < GlobalDataManager.Current.InOutPCBs * Customization.Current.AUXBottomBarcode.BottomBarcodesNumPerScanner; i++)
                    //            {
                    //                GlobalDataManager.Current.Barcodes3.Add(string.Empty);
                    //            }
                    //        }
                    //        if (MachineParams.Current.BarcodeSerialPort4.IsEnabled)
                    //        {
                    //            for (int i = GlobalDataManager.Current.Barcodes4.Count; i < GlobalDataManager.Current.InOutPCBs * Customization.Current.AUXBottomBarcode.BottomBarcodesNumPerScanner; i++)
                    //            {
                    //                GlobalDataManager.Current.Barcodes4.Add(string.Empty);
                    //            }
                    //        }
                    //    }
                    //    else if (Customization.Current.SamsungBarcodeMapping.IsEnabled)
                    //    {
                    //        if (GlobalDataManager.Current.Barcodes.Count > 0)
                    //        {
                    //            if (Customization.Current.AUXBottomBarcode.IsKeepOnlyOneBarcode)
                    //            {
                    //                string readoutBarcode = string.Empty;
                    //                for (int w = 0; w < Customization.Current.AUXBottomBarcode.BottomBarcodesNumPerScanner; w++)
                    //                {
                    //                    if (GlobalDataManager.Current.Barcodes.Count > 0)
                    //                    {
                    //                        readoutBarcode = GlobalDataManager.Current.Barcodes.First();
                    //                        GlobalDataManager.Current.Barcodes.RemoveAt(0);

                    //                        Holly.Log.HlLogger.Write("HOLLY AOI: Create Repair============> GlobalDataManager.Current.Barcodes.RemoveAt(0) readoutBarcode = " + readoutBarcode);
                    //                    }
                    //                }
                    //                GlobalDataManager.Current.ReadoutBarcode = readoutBarcode;
                    //            }
                    //            else
                    //            {
                    //                GlobalDataManager.Current.ReadoutBarcode = GlobalDataManager.Current.Barcodes.First();
                    //                GlobalDataManager.Current.Barcodes.RemoveAt(0);
                    //            }
                    //            //GlobalDataManager.Current.Barcodes.Clear();
                    //        }
                    //        else
                    //        {
                    //            GlobalDataManager.Current.ReadoutBarcode = string.Empty;
                    //        }
                    //    }
                    //    else
                    //    {
                    //        if (MachineParams.Current.BarcodeSerialPort.IsEnabled)
                    //        {
                    //            //Holly.Log.HlLogger.Write("HOLLY_TEST: Board Out============> GlobalDataManager.Current.InOutPCBs: " + GlobalDataManager.Current.InOutPCBs + ";----GlobalDataManager.Current.Barcodes : " + GlobalDataManager.Current.Barcodes.Count);

                    //            if (GlobalDataManager.Current.Barcodes.Count < GlobalDataManager.Current.InOutPCBs && !Customization.Current.IsBottomBarcodeUnreadableNotIn && !Customization.Current.IsBarcodeScannerInMachine)
                    //            {
                    //                GlobalDataManager.Current.Barcodes.Add(string.Empty);
                    //            }
                    //            GlobalDataManager.Current.hasBottomBarcode = (GlobalDataManager.Current.Barcodes.Count > 0);

                    //            ////预防A板已读取预存，但被从前轨道取走，后面B板进入AOI 测试
                    //            //while (GlobalDataManager.Current.Barcodes.Count > GlobalDataManager.Current.InOutPCBs)
                    //            //{
                    //            //    for (int i = GlobalDataManager.Current.InOutPCBs - 1; i < GlobalDataManager.Current.Barcodes.Count - 1; i++)
                    //            //    {
                    //            //        GlobalDataManager.Current.Barcodes.RemoveAt(i);
                    //            //    }
                    //            //}

                    //            //Holly.Log.HlLogger.Write("HOLLY_TEST: Board Out============> GlobalDataManager.Current.InOutPCBs: " + GlobalDataManager.Current.InOutPCBs + ";----GlobalDataManager.Current.Barcodes : " + GlobalDataManager.Current.Barcodes.Count);

                    //            //GlobalDataManager.Current.ReadoutBarcode = GlobalDataManager.Current.Barcodes.First();
                    //            //GlobalDataManager.Current.Barcodes.RemoveAt(0);   
                    //            //else
                    //            //{
                    //            //    GlobalDataManager.Current.ReadoutBarcode = string.Empty;
                    //            //}
                    //        }
                    //    }
                    //}
                    // 20201019 MarkError（检测太快）对应 删除 End
                    #endregion

                    //gowatch.Stop();
                    //GlobalDataManager.Current.CycleTimes.Add(Math.Round((double)gowatch.ElapsedMilliseconds / 1000, 2));

                    // 20191106 双面机控制退出自动运行 追加 Start
                    Holly.Log.HlLogger.Write("HOLLY AOI ============> DoubleSideAOI Step");
                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState)  AutoRunSettings2.Default.IsDoubleSideAOI=" + AutoRunSettings2.Default.IsDoubleSideAOI);
                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState)  Customization.Current.UnitedAutomotiveShopfloor.IsEnabled=" + Customization.Current.UnitedAutomotiveShopfloor.IsEnabled);
                    if (!this.IsRequestOne && AutoRunSettings2.Default.IsDoubleSideAOI && Customization.Current.UnitedAutomotiveShopfloor.IsEnabled)
                    {
                        HeartBeatUtils heartBeat = new HeartBeatUtils(5);
                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > DoubleSide wait other side data Start curTime =" + DateTimeUtils.GetNow());
                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > DoubleSide wait other side data GlobalDataManager.Current.IsHaveOtherSideResult =" + GlobalDataManager.Current.IsHaveOtherSideResult);
                        while (!GlobalDataManager.Current.IsHaveOtherSideResult)
                        {
                            if (heartBeat.IsOutput())
                            {
                                Holly.Log.HlLogger.Write("HOLLY AOI ===== > DoubleSide wait other side data(ImageAcquisitionMachine) curTime =" + DateTimeUtils.GetNow());
                            }

                            if (GlobalDataManager.Current.IsHaveOtherSideResult)
                            {
                                GlobalDataManager.Current.IsHaveOtherSideResult = false;
                                break;
                            }
                        }

                        bool isWaitOtherSideTimeout = GlobalDataManager.Current.IsWaitOtherSideTimeout;
                        bool isOtherSideDBError = GlobalDataManager.Current.IsOtherSideDBError;
                        bool isDBError = GlobalDataManager.Current.IsDBError;

                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > DoubleSide wait other side data isWaitOtherSideTimeout = " + isWaitOtherSideTimeout);
                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > DoubleSide wait other side data isOtherSideDBError = " + isOtherSideDBError);
                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > DoubleSide wait other side data isDBError = " + isDBError);

                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > DoubleSide wait other side data End curTime =" + DateTimeUtils.GetNow());

                        if (isWaitOtherSideTimeout || isOtherSideDBError || isDBError)
                        {
                            string showMessage = "";
                            if (isWaitOtherSideTimeout)
                            {
                                showMessage = Lang.UI.UI_Error_WaitOtherSideDataTimeout;
                            }
                            else if (isOtherSideDBError)
                            {
                                showMessage = Lang.UI.UI_Error_OtherSideDataDBError;
                            }
                            else if (isDBError)
                            {
                                showMessage = "Write DB Error";
                                // 20210324 DB异常对应 追加 Start
                                // 重置
                                GlobalDataManager.Current.IsDBError = false;
                                // 20210324 DB异常对应 追加 End
                            }
                            // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                            ExportShanWeiWatchBoardBYDShopfloorManager.Current.WriteAlarm(1, showMessage, DateTime.Now);
                            // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End
                            UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                new Action(
                                    delegate ()
                                    {
                                        IBatchOperationInline opDoubleSideTimeout = m.CreateBatchOperationInline();
                                        IOperationResult opDoubleSideTimeoutRet = null;

                                        opDoubleSideTimeout.ClearLampBlink();
                                        opDoubleSideTimeout.SetRedAndBuzzer();
                                        opDoubleSideTimeoutRet = opDoubleSideTimeout.Execute(MachineParams.Current.OperationStepTimeout);
                                        m.UpdateInline();
                                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > DoubleSide Error SetRedAndBuzzer");
                                        //20230717 log输出【ygs】 Start 
                                        ExportLogOuputManager.Current.OuputLog(11, showMessage);
                                        //20230717 log输出【ygs】 End
                                        // 20240406 启动屏幕录制程序 追加 Start                                                    
                                        SocketScreenRecorder.Current.clientSendStart();
                                        // 20240406 启动屏幕录制程序 追加 End
                                        IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                        messageManager.ShowError(showMessage);
                                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > DoubleSide Error ShowErrorMessage");

                                        IBatchOperationInline opDoubleSideTimeoutReset = m.CreateBatchOperationInline();
                                        IOperationResult opDoubleSideTimeoutResetRet = null;

                                        opDoubleSideTimeoutReset.ClearCommand();
                                        opDoubleSideTimeoutReset.ClearLampBuzzer();
                                        opDoubleSideTimeoutReset.SetBuzzer(false);
                                        opDoubleSideTimeoutResetRet = opDoubleSideTimeoutReset.Execute(MachineParams.Current.OperationStepTimeout);
                                        m.UpdateInline();
                                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > DoubleSide Error Reset");
                                    }));

                            // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                            ExportShanWeiWatchBoardBYDShopfloorManager.Current.UpdateAlarm(3, showMessage, DateTime.Now);
                            // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End

                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > DoubleSide Error Board Out");
                            IBatchOperationInline opDoubleSideOutBoard = m.CreateBatchOperationInline();
                            IOperationResult opDoubleSideOutBoardRet = null;

                            opDoubleSideOutBoard.BoardOut();

                            //opDoubleSideOutBoard.LocateLoader(GlobalDataManager.Current.LastPosition, GlobalDataManager.Current.ReleaseBoardPosition, false);
                            opDoubleSideOutBoardRet = opDoubleSideOutBoard.Execute(MachineParams.Current.OperationStepTimeout);
                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                            HeartBeatUtils boardOutHeartBeat = new HeartBeatUtils(1);
                            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                            {
                                if (boardOutHeartBeat.IsOutput())
                                {
                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > DoubleSide wait BoardOut Complete");
                                }

                                if (context.StopFlag)
                                {
                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > DoubleSide Error return ExitState.Current");
                                    return ExitState.Current;
                                }

                                m.UpdateInline();
                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                {
                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > DoubleSide Error return DesyncState.Current");
                                    //20230706  查找E05 【徐明武】 修改 Start
                                    //return DesyncState.Current;
                                    {
                                        Holly.Log.HlLogger.Write("E05 => 35 ");
                                        return DesyncState.Current;
                                    }
                                    //20230706  查找E05 【徐明武】 修改 End 
                                }
                                //context.CheckInlineMachineStatus();
                                Thread.Sleep(50);
                            }

                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > DoubleSide Error return DesyncState.Current");
                            // 20230209 E05区分 追加 Start   
                            GlobalDataManager.Current.EquipmentErrorCode = "E37"; //双面报警
                            Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                            // 20230209 E05区分 追加 End 
                            //20230706  查找E05 【徐明武】 修改 Start
                            //return DesyncState.Current;
                            {
                                Holly.Log.HlLogger.Write("E05 => 36 ");
                                return DesyncState.Current;
                            }
                            //20230706  查找E05 【徐明武】 修改 End 
                        }
                    }
                    // 20191106 双面机控制退出自动运行 追加 End

                    // 20191121 秦皇岛 追加 Start
                    if (Customization.Current.IsOutBoardWaitDBResult && !AutoRunSettings.Default.IsLocalCommit)
                    {
                        DateTime dateTimePre = DateTime.Now;
                        while (GlobalDataManager.Current.DBException == -1)
                        {
                            TimeSpan ts = DateTime.Now - dateTimePre;
                            if (ts.TotalSeconds > 20)
                            {
                                Holly.Log.HlLogger.Write("HOLLY AOI ===== > IsOutBoardWaitDBResult is wait DBException Timeout");
                                break;
                            }
                            //Holly.Log.HlLogger.Write("HOLLY AOI ===== > IsOutBoardWaitDBResult is wait DBException");
                            Thread.Sleep(100);
                        }
                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > IsOutBoardWaitDBResult GlobalDataManager.Current.DBException : " + GlobalDataManager.Current.DBException.ToString());
                        if (GlobalDataManager.Current.DBException == 2)
                        {
                            GlobalDataManager.Current.DBException = -1;
                            string showMessage = "Write DB Error\r\n" + GlobalDataManager.Current.DBExceptionContent;

                            // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                            ExportShanWeiWatchBoardBYDShopfloorManager.Current.WriteAlarm(1, showMessage, DateTime.Now);
                            // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End

                            UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                            new Action(
                                delegate ()
                                {
                                    IBatchOperationInline opDoubleSideTimeout = m.CreateBatchOperationInline();
                                    IOperationResult opDoubleSideTimeoutRet = null;

                                    opDoubleSideTimeout.ClearLampBlink();
                                    opDoubleSideTimeout.SetRedAndBuzzer();
                                    opDoubleSideTimeoutRet = opDoubleSideTimeout.Execute(MachineParams.Current.OperationStepTimeout);
                                    m.UpdateInline();
                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > IsOutBoardWaitDBResult Error SetRedAndBuzzer");
                                    //20230717 log输出【ygs】 Start 
                                    ExportLogOuputManager.Current.OuputLog(11, showMessage);
                                    //20230717 log输出【ygs】 End
                                    // 20240406 启动屏幕录制程序 追加 Start                                                    
                                    SocketScreenRecorder.Current.clientSendStart();
                                    // 20240406 启动屏幕录制程序 追加 End
                                    IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                    messageManager.ShowError(showMessage);
                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > IsOutBoardWaitDBResult Error ShowErrorMessage");

                                    IBatchOperationInline opDoubleSideTimeoutReset = m.CreateBatchOperationInline();
                                    IOperationResult opDoubleSideTimeoutResetRet = null;

                                    opDoubleSideTimeoutReset.ClearCommand();
                                    opDoubleSideTimeoutReset.ClearLampBuzzer();
                                    opDoubleSideTimeoutReset.SetBuzzer(false);
                                    opDoubleSideTimeoutResetRet = opDoubleSideTimeoutReset.Execute(MachineParams.Current.OperationStepTimeout);
                                    m.UpdateInline();
                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > IsOutBoardWaitDBResult Error Reset");
                                }));

                            // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                            ExportShanWeiWatchBoardBYDShopfloorManager.Current.UpdateAlarm(3, showMessage, DateTime.Now);
                            // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End

                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > IsOutBoardWaitDBResult Error Board Out");
                            IBatchOperationInline opDoubleSideOutBoard = m.CreateBatchOperationInline();
                            IOperationResult opDoubleSideOutBoardRet = null;

                            opDoubleSideOutBoard.BoardOut();

                            opDoubleSideOutBoardRet = opDoubleSideOutBoard.Execute(MachineParams.Current.OperationStepTimeout);
                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                            HeartBeatUtils boardOutHeartBeat = new HeartBeatUtils(1);
                            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                            {
                                if (boardOutHeartBeat.IsOutput())
                                {
                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > IsOutBoardWaitDBResult wait BoardOut Complete");
                                }

                                if (context.StopFlag)
                                {
                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > IsOutBoardWaitDBResult Error return ExitState.Current");
                                    return ExitState.Current;
                                }

                                m.UpdateInline();
                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                {
                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > IsOutBoardWaitDBResult Error return DesyncState.Current");
                                    //20230706  查找E05 【徐明武】 修改 Start
                                    //return DesyncState.Current;
                                    {
                                        Holly.Log.HlLogger.Write("E05 => 37 ");
                                        return DesyncState.Current;
                                    }
                                    //20230706  查找E05 【徐明武】 修改 End 
                                }
                                //context.CheckInlineMachineStatus();
                                Thread.Sleep(50);
                            }

                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > IsOutBoardWaitDBResult Error return DesyncState.Current");
                            // 20230209 E05区分 追加 Start   
                            GlobalDataManager.Current.EquipmentErrorCode = "E38";//出板相关报警
                            Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                            // 20230209 E05区分 追加 End 
                            //20230706  查找E05 【徐明武】 修改 Start
                            //return DesyncState.Current;
                            {
                                Holly.Log.HlLogger.Write("E05 => 38 ");
                                return DesyncState.Current;
                            }
                            //20230706  查找E05 【徐明武】 修改 End 
                        }
                    }
                    // 20191121 秦皇岛 追加 End

                    //20240416 离线机增加AlarmNotification报警功能 【曹志鹏】 追加 Start
                    Holly.Log.HlLogger.Write("HOLLY AOI ============> checkAlarm Step");
                    if (!MachineParams.Current.IsInlineMode)
                    {
                        // 20201125 指定错误类型停机报警优化 追加 Start
                        if (Customization.Current.AlarmNotification.IsEnabled)
                        {
                            Holly.Log.HlLogger.Write("HOLLY AOI =====> CheckAlarm Start");
                            ExportAlarmNotificationManager.Current.CheckAlarm(m);
                            if (ExportAlarmNotificationManager.Current.checkAlarm)
                            {
                                Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportAlarmNotificationManager.Current.checkAlarm return DesyncState.Current");
                                //return DesyncState.Current;
                            }
                        }
                        // 20201125 指定错误类型停机报警优化 追加 End
                    }
                    //20240416 离线机增加AlarmNotification报警功能 【曹志鹏】 追加 End

                    Holly.Log.HlLogger.Write("HOLLY AOI ============> InlineMode Step");
                    //Log4Net.Info("HOLLY AOI ============> InlineMode Step");
                    if (!MachineParams.Current.IsInlineMode && !this.IsRequestOne)
                    {
                        //王氏报警超出个数，退出自动运行
                        if (Customization.Current.AlarmExceedExitRun.IsEnabled)
                        {
                            bool hasReport = false;
                            while (!hasReport)
                            {
                                System.Threading.Thread.Sleep(50);
                                //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 Start
                                //hasReport = reportManager.HasReport;
                                hasReport = reportManager.HasReport(1);
                                //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 End
                            }

                            //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 Start
                            //if (reportManager.AlarmCompCount >= Customization.Current.AlarmExceedExitRun.AlarmCompCount)
                            if (reportManager.AlarmCompCount(1) >= Customization.Current.AlarmExceedExitRun.AlarmCompCount)
                            //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 End
                            {
                                // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                ExportShanWeiWatchBoardBYDShopfloorManager.Current.WriteAlarm(1, Lang.UI.UI_Label_ExceedeAlarmQty, DateTime.Now);
                                // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End
                                UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                    new Action(
                                        delegate ()
                                        {
                                            //20230717 log输出【ygs】 Start 
                                            ExportLogOuputManager.Current.OuputLog(11, string.Format(Lang.UI.UI_Label_ExceedeAlarmQty, Customization.Current.AlarmExceedExitRun.AlarmCompCount));
                                            //20230717 log输出【ygs】 End
                                            // 20240406 启动屏幕录制程序 追加 Start                                                    
                                            SocketScreenRecorder.Current.clientSendStart();
                                            // 20240406 启动屏幕录制程序 追加 End
                                            IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                            messageManager.ShowError(string.Format(Lang.UI.UI_Label_ExceedeAlarmQty, Customization.Current.AlarmExceedExitRun.AlarmCompCount));
                                        }));
                                // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                ExportShanWeiWatchBoardBYDShopfloorManager.Current.UpdateAlarm(3, Lang.UI.UI_Label_ExceedeAlarmQty, DateTime.Now);
                                // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End

                                // 20230209 E05区分 追加 Start   
                                GlobalDataManager.Current.EquipmentErrorCode = "E39";//王氏报警
                                Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                //Log4Net.Info("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                // 20230209 E05区分 追加 End  
                                //20230706  查找E05 【徐明武】 修改 Start
                                //return DesyncState.Current;
                                {
                                    Holly.Log.HlLogger.Write("E05 => 39 ");
                                    return DesyncState.Current;
                                }
                                //20230706  查找E05 【徐明武】 修改 End 
                            }
                        }
                    }
                    // 2020303 测量高度 追加 Start

                    // 20230915 单轨没有测高动作【张晨铖】 修改 Start
                    //if (MachineParams.Current.MeasuringHeightPort.IsEnabled && !IsRequestOne && MeasuringHeightManagerRail1.Current.isNeedMeasureHeight)

                    // 20230724 测高问题(测高路径，一二轨同时进板，无测高时不测高等)对应【刘剑】 修改 Start
                    if (MachineParams.Current.MeasuringHeightPort.IsEnabled && !IsRequestOne)
                    // 20230724 测高问题(测高路径，一二轨同时进板，无测高时不测高等)对应【刘剑】 修改 End
                    // 20230915 单轨没有测高动作【张晨铖】 修改 End
                    {
                        // 20200622 测量高度(优化1) 修改 Start
                        //if (MeasuringHeightManager.Current.IsHasMeasurementData(5))
                        //{
                        //    MeasuringHeightManager.Current.ShowData();
                        //    MeasuringHeightManager.Current.MeasuringHeight(m, context);
                        //}

                        Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Visit IsMeasurementDataPrePareOK Start");
                        //Log4Net.Warn("HOLLY AOI =====> ImageAcquisitionMachine.Visit IsMeasurementDataPrePareOK Start");
                        DateTime dateTimePre = DateTime.Now;
                        bool isTimeOut = false;

                        //20230823 测高时退出自动运行卡死对应【张晨铖】 修改 Start
                        //while ( true)

                        while (MeasuringHeightManagerRail1.Current.IsAutoRun && true)
                        //20230823 测高时退出自动运行卡死对应【张晨铖】 修改 End
                        {
                            TimeSpan ts = DateTime.Now - dateTimePre;
                            // 20200725 测量高度(优化1) 修改 Start
                            // if (ts.TotalSeconds > 5)

                            if (ts.TotalSeconds > 120)
                            // 20200725 测量高度(优化1) 修改 End
                            {
                                isTimeOut = true;
                                Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Visit IsMeasurementDataPrePareOK Timeout");
                                //Log4Net.Warn("HOLLY AOI =====> ImageAcquisitionMachine.Visit IsMeasurementDataPrePareOK Timeout");
                                break;
                            }
                            // 20211123 【测高】CT优化 修改 Start
                            //if (MeasuringHeightManager.Current.IsMeasurementDataPrePareOK())
                            //{
                            //    break;
                            //}

                            if (MeasuringHeightManagerRail1.Current.IsMeasurementDataPrePareOK())
                            {
                                break;
                            }
                            // 20230321 MarkErr和BadMark仍然测高 追加 Start
                            if (!GlobalDataManager.Current.IsMeasuringHeight)
                            {
                                break;
                            }
                            // 20230321 MarkErr和BadMark仍然测高 追加 End
                            // 20211123 【测高】CT优化 修改 End
                            System.Threading.Thread.Sleep(100);
                        }
                        Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Visit IsMeasurementDataPrePareOK End");
                        //Log4Net.Info("HOLLY AOI =====> ImageAcquisitionMachine.Visit IsMeasurementDataPrePareOK End");
                        // 20230321 MarkErr和BadMark仍然测高 修改 Start
                        //if (!isTimeOut)

                        // 20230915 单轨没有测高动作【张晨铖】 修改 Start
                        //if (!isTimeOut && GlobalDataManager.Current.IsMeasuringHeight && MeasuringHeightManagerRail1.Current.isNeedMeasureHeight)

                        // 20230724 测高问题(测高路径，一二轨同时进板，无测高时不测高等)对应【刘剑】 修改 Start
                        if (!isTimeOut && GlobalDataManager.Current.IsMeasuringHeight)
                        // 20230724 测高问题(测高路径，一二轨同时进板，无测高时不测高等)对应【刘剑】 修改 End
                        // 20230915 单轨没有测高动作【张晨铖】 修改 End
                        {
                            // 20211123 【测高】CT优化 修ss改 Start
                            //MeasuringHeightManager.Current.ShowData();

                            MeasuringHeightManagerRail1.Current.ShowData();
                            // 20211123 【测高】CT优化 修改 End
                            // 20200904 测量高度基准点优化 修改 Start

                            //MeasuringHeightManager.Current.MeasuringHeight(m, context);
                            // 20211123 【测高】CT优化 修改 Start
                            //if (MeasuringHeightManager.Current.IsUseMultiBasePoint)
                            //    MeasuringHeightManager.Current.MeasuringHeightMultiBP(m, context);
                            //else
                            //    MeasuringHeightManager.Current.MeasuringHeight(m, context);

                            if (MeasuringHeightManagerRail1.Current.IsUseMultiBasePoint)
                                MeasuringHeightManagerRail1.Current.MeasuringHeightMultiBP(m, context);
                            else
                                MeasuringHeightManagerRail1.Current.MeasuringHeight(m, context);
                            // 20211123 【测高】CT优化 修改 End
                            // 20200904 测量高度基准点优化 修改 End
                        }
                        // 20230321 MarkErr和BadMark仍然测高 追加 Start
                        //GlobalDataManager.Current.IsMeasuringHeight = true;
                        // 20230321 MarkErr和BadMark仍然测高 追加 End
                        // 20200622 测量高度(优化1) 修改 End
                        // 20240428 markerror测高死等 【王晨】 追加 Start
                        MeasuringHeightManagerRail1.Current.IsHaveError = false;
                        // 20240428 markerror测高死等 【王晨】 追加 End
                    }
                    // 2020303 测量高度 追加 End
                    Holly.Log.HlLogger.Write("HOLLY AOI ============> ink jet Step");
                    //Log4Net.Info("HOLLY AOI ============> ink jet Step");
                    //喷码机
                    // 20200826 异物检测 喷码机修改 Start
                    //if (MachineParams.Current.IsInlineMode && !this.IsRequestOne && MachineParams.Current.InkjetPrinter.IsEnabled)

                    // 维修站确认后喷码对应
                    if (MachineParams.Current.IsInlineMode && !this.IsRequestOne && MachineParams.Current.InkjetPrinter.IsEnabled && !Customization.Current.SpotShopfloor.IsEnabled)
                    // 20200826 异物检测 喷码机修改 End
                    {
                        bool hasReport = false;
                        while (!hasReport)
                        {
                            //Holly.Log.HlLogger.Write("HOLLY PRINT ===> hasReport = GlobalDataManager.Current.PrintPoints.Count > 0   " + GlobalDataManager.Current.PrintPoints.Count);
                            System.Threading.Thread.Sleep(50);
                            hasReport = GlobalDataManager.Current.PrintPoints.Count > 0; // reportManager.HasReport;
                        }

                        //var points = reportManager.getPrintPoint();
                        //if (points != null && points.Count > 0)
                        //{
                        bool hasAlarm = true;
                        if (GlobalDataManager.Current.PrintPoints.Count == 1)
                        {
                            if (GlobalDataManager.Current.PrintPoints[0].X.Value == -99999)
                            {
                                hasAlarm = false;
                            }
                        }
                        Holly.Log.HlLogger.Write("HOLLY PRINT ===> hasAlarm = " + hasAlarm);

                        if (hasAlarm)
                        {
                            // 20230315 喷码异常对应【纪明】 追加 Start
                            int i = 0;
                            // 20230315 喷码异常对应【纪明】 追加 End
                            foreach (var p in GlobalDataManager.Current.PrintPoints)
                            {
                                Holly.Log.HlLogger.Write("HOLLY PRITNT =====> point.X = " + p.X + " ,  point.Y = " + p.Y);

                                IBatchOperationInline printOp = m.CreateBatchOperationInline();
                                printOp.ReadySignal(false);
                                var printResult = printOp.Execute(MachineParams.Current.OperationStepTimeout);
                                printResult.Wait();

                                Holly.Log.HlLogger.Write("HOLLY PRITNT =====> printOp.ReadySignal(false)");

                                var goOp = m.CreateBatchOperation();
                                var pos0 = p.ToPlugs();
                                //goOp.LocateLoader(new int2(m.X, m.Y), pos0, false);
                                goOp.LocateCamera(pos0);
                                var goResult = goOp.Execute(MachineParams.Current.OperationStepTimeout);
                                goResult.Wait();

                                Holly.Log.HlLogger.Write("HOLLY PRITNT =====> LocateCamera");

                                //System.Threading.Thread.Sleep(10);

                                printOp = m.CreateBatchOperationInline();
                                printOp.ReadySignal(true);
                                printResult = printOp.Execute(MachineParams.Current.OperationStepTimeout);
                                printResult.Wait();

                                Holly.Log.HlLogger.Write("HOLLY PRITNT =====> printOp.ReadySignal(true)");

                                // 20230315 喷码异常对应【纪明】 追加 Start
                                // 第二片不喷码
                                i = i + 1;

                                Holly.Log.HlLogger.Write("HOLLY PRITNT =====> printOp i = " + i);

                                if (i == GlobalDataManager.Current.PrintPoints.Count)
                                {
                                    printOp = m.CreateBatchOperationInline();
                                    printOp.ReadySignal(false);
                                    printResult = printOp.Execute(MachineParams.Current.OperationStepTimeout);
                                    printResult.Wait();

                                    Holly.Log.HlLogger.Write("HOLLY PRITNT =====> printOp.ReadySignal(false) last One");
                                }
                                // 20230315 喷码异常对应【纪明】 追加 End
                                //System.Threading.Thread.Sleep(10);
                            }

                            var origin = context.GetOriginPosition();
                            var goOp1 = m.CreateBatchOperation();
                            var pos1 = origin.ToPlugs();
                            goOp1.LocateCamera(pos1);
                            var goResult1 = goOp1.Execute(MachineParams.Current.OperationStepTimeout);
                            goResult1.Wait();
                        }
                        //}
                    }

                    Holly.Log.HlLogger.Write("HOLLY AOI ============> check air press Step");
                    //Log4Net.Info("HOLLY AOI ============> check air press Step");
                    //检查气压
                    if (MachineParams.Current.IsInlineMode && !AutoRunSettings.Default.IsOfflineMode && Customization.Current.CheckAirPressure)
                    {
                        /////////////////////////////////////////////////////////m.UpdateInline();
                        //context.CheckInlineMachineStatus();
                        if ((m.InputStatusInline & InputStatusInline.AirPressureSwitch) == 0)
                        {
                            IBatchOperationInline op = m.CreateBatchOperationInline();
                            IOperationResult opResult = null;
                            op.ClearLampBlink();
                            op.SetRedAndBuzzer();
                            opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                            opResult.Wait();

                            // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                            ExportShanWeiWatchBoardBYDShopfloorManager.Current.WriteAlarm(1, Lang.UI.UI_Status_AirPressureWarning, DateTime.Now);
                            // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End

                            UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                            new Action(
                                                delegate ()
                                                {
                                                    //20230717 log输出【ygs】 Start 
                                                    ExportLogOuputManager.Current.OuputLog(11, Lang.UI.UI_Status_AirPressureWarning);
                                                    //20230717 log输出【ygs】 End
                                                    // 20240406 启动屏幕录制程序 追加 Start                                                    
                                                    SocketScreenRecorder.Current.clientSendStart();
                                                    // 20240406 启动屏幕录制程序 追加 End
                                                    IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                                    messageManager.ShowError(Lang.UI.UI_Status_AirPressureWarning);
                                                }));

                            IBatchOperationInline op2 = m.CreateBatchOperationInline();
                            IOperationResult opResult2 = null;

                            op2.SetBuzzer(false);
                            opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                            opResult2.Wait();

                            // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                            ExportShanWeiWatchBoardBYDShopfloorManager.Current.UpdateAlarm(3, Lang.UI.UI_Status_AirPressureWarning, DateTime.Now);
                            // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End

                            Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> CheckAirPressure 3");
                            //Log4Net.Info("HOLLY AOI DesyncState============> CheckAirPressure 3");
                            // 20230209 E05区分 追加 Start   
                            GlobalDataManager.Current.EquipmentErrorCode = "E33";//气压报警
                            Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                            //Log4Net.Info("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                            // 20230209 E05区分 追加 End 
                            //20230706  查找E05 【徐明武】 修改 Start
                            //return DesyncState.Current;
                            {
                                Holly.Log.HlLogger.Write("E05 => 98 ");
                                return DesyncState.Current;
                            }
                            //20230706  查找E05 【徐明武】 修改 End 
                        }
                    }

                    //等待维修站发送OKNG信号，先删除原有数据
                    if (AutoRunSettings.Default.IsWaitRepairSendOKNG && AutoRunSettings.Default.IsRepairCommit && !AutoRunSettings.Default.IsRepairControlNotWait)// Customization.Current.IsRepairControlNotWait)
                    {
                        DeleteCentralControlFile();
                    }

                    // 20201104 通用版本切换程序 追加 Start
                    if (Customization.Current.SwitchProgram.IsEnabled)
                    {
                        int programFullPathCount = ExportSwitchProgramManager.Current.GetProgramFullPathCount();
                        string nextProgramFullPath = ExportSwitchProgramManager.Current.GetNextProgramFullPath();
                        Holly.Log.HlLogger.Write("HOLLY AOI ====> SwitchProgram ImageAcquisitionMachine programFullPathCount:" + programFullPathCount.ToString());
                        Holly.Log.HlLogger.Write("HOLLY AOI ====> SwitchProgram ImageAcquisitionMachine nextProgramFullPath:" + nextProgramFullPath);
                        //Log4Net.Info("HOLLY AOI ====> SwitchProgram ImageAcquisitionMachine programFullPathCount:" + programFullPathCount.ToString());
                        //Log4Net.Info("HOLLY AOI ====> SwitchProgram ImageAcquisitionMachine nextProgramFullPath:" + nextProgramFullPath);
                        // 如果程序同级目录下个数不是1，并且下个程序的全路径名称不等于""，并且不是单次检测
                        if (programFullPathCount != 1 && nextProgramFullPath != "" && !IsRequestOne)
                        {
                            for (int i = 0; i < programFullPathCount - 1; i++)
                            {
                                //lock (this)
                                //{
                                Holly.Log.HlLogger.Write("HOLLY AOI ====> SwitchProgram ImageAcquisitionMachine Visit Start Time:" + (i + 2).ToString());
                                //Log4Net.Info("HOLLY AOI ====> SwitchProgram ImageAcquisitionMachine Visit Start Time:" + (i + 2).ToString());
                                //ExportSwitchProgramManager.Current.isReCompileInspectionProgram = false;
                                context.SetNextState(InitialState.Current);
                                result = context.GrabByScanType(null);
                                Holly.Log.HlLogger.Write("HOLLY AOI ====> SwitchProgram ImageAcquisitionMachine Visit End Time" + (i + 2).ToString());
                                //Log4Net.Info("HOLLY AOI ====> SwitchProgram ImageAcquisitionMachine Visit End Time" + (i + 2).ToString());
                                //}
                            }
                        }
                    }
                    // 20201104 通用版本切换程序 追加 End

                    // 20211224 苏州万都海拉V轴非标设备控制补全及NG板AOI报警 追加 Start
                    if (Customization.Current.CommonShopfloor.IsNgBoardAlarm)
                    {
                        ExportCommonShopfloorManager.Current.CheckNgBoardHasAlarm();

                        if (ExportCommonShopfloorManager.Current.isAlarmQtyExceed == 1)
                        {
                            WaitVerify(m, "存在报警信息，请确认！");
                        }
                    }
                    // 20211224 苏州万都海拉V轴非标设备控制补全及NG板AOI报警 追加 End

                    Holly.Log.HlLogger.Write("HOLLY AOI ============> board out Step");
                    //Log4Net.Info("HOLLY AOI ============> board out Step");
                    if (MachineParams.Current.IsInlineMode && !this.IsRequestOne && (!AutoRunSettings.Default.IsOfflineMode || (AutoRunSettings.Default.IsOfflineMode && AutoRunSettings.Default.AutoRunOfflineMode != 2)))
                    {
                        IBatchOperationInline op = m.CreateBatchOperationInline();
                        IOperationResult opResult = null;
                        // 20220425 昆山环鸿(进出板时间统计) 追加 Start 
                        ExportProcessDataShopfloorManager.Current.BoardOutHighSpeed(DateTime.Now, 1);
                        // 20220425 昆山环鸿(进出板时间统计) 追加 End
                        //在线机出板
                        //联合汽车电子
                        Holly.Log.HlLogger.Write("HOLLY AOI ============> UnitedAutomotiveShopfloor Step");
                        if (Customization.Current.UnitedAutomotiveShopfloor.IsEnabled)
                        {
                            IBatchOperationInline op1 = m.CreateBatchOperationInline();
                            IOperationResult opResult1 = null;
                            //op1.LocateCamera(GlobalDataManager.Current.ReleaseBoardPosition);

                            //20230504 惠州欣旺达软件增加延时出板功能【张晨铖】 追加 Start 
                            if (Customization.Current.IsBoardOutDelay)
                            {
                                int boardOutDelay = Convert.ToInt32(AutoRunSettings2.Default.BoardOutDelay) * 1000;
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> BoardOut boardOutDelay = " + boardOutDelay);
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> BoardOut boardOutDelay Start");
                                Thread.Sleep(boardOutDelay);
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> BoardOut boardOutDelay End");
                            }
                            //20230504 惠州欣旺达软件增加延时出板功能【张晨铖】 追加 End

                            op1.BoardOutHighSpeed();
                            op1.LocateLoader(GlobalDataManager.Current.LastPosition, GlobalDataManager.Current.ReleaseBoardPosition, false);
                            opResult1 = op1.Execute(MachineParams.Current.OperationStepTimeout);
                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);
                            //opResult1.Wait();
                            /////////////////////////////////////////////////////////m.UpdateInline();
                            //context.CheckInlineMachineStatus();
                            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOutHighSpeed) == 0 && (m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                            {

                                if (context.StopFlag)
                                    return ExitState.Current;
                                m.UpdateInline();
                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                {
                                    //20230706  查找E05 【徐明武】 修改 Start
                                    //return DesyncState.Current;
                                    {
                                        Holly.Log.HlLogger.Write("E05 => 40 ");
                                        return DesyncState.Current;
                                    }
                                    //20230706  查找E05 【徐明武】 修改 End 
                                }
                                //context.CheckInlineMachineStatus();
                                Thread.Sleep(50);
                            }

                            //20240527 鹏鼎AOI偷停判定 【范克文】 追加 Start
                            ExportPengDingShopfloorManager.Current.BoardOutHighSpeedFlag = true;
                            //20240527 鹏鼎AOI偷停判定 【范克文】 追加 End

                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > UnitedAutomotiveShopfloor waiting hasReport");
                            bool hasReport = false;
                            while (!hasReport)
                            {
                                if (context.StopFlag)
                                    return ExitState.Current;

                                System.Threading.Thread.Sleep(50);
                                //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 Start
                                //hasReport = reportManager.HasReport;
                                hasReport = reportManager.HasReport(1);
                                //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 End
                            }
                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > UnitedAutomotiveShopfloor waiting hasReport end");

                            string UAmessage = GlobalDataManager.Current.UnitedAutomotiveMessage; // string.Empty;

                            //var inspection = reportManager.getInspection;
                            //Holly.Log.HlLogger.Write("HOLLY AOI ===== > UnitedAutomotiveShopfloor inspection id = " + inspection.ID.ToString());

                            //if (inspection != null)
                            //{
                            //UAmessage = ExportUnitedAutomotiveShopfloorManager.Current.Export(inspection);
                            if (UAmessage != "")
                            {
                                // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                ExportShanWeiWatchBoardBYDShopfloorManager.Current.WriteAlarm(1, UAmessage, DateTime.Now);
                                // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End
                                UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                new Action(
                                    delegate ()
                                    {
                                        op.ClearLampBlink();
                                        op.SetRedAndBuzzer();
                                        opResult = op.Execute(MachineParams.Current.OperationStepTimeout);

                                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > UnitedAutomotiveShopfloor SetRedAndBuzzer");
                                        //20230717 log输出【ygs】 Start 
                                        ExportLogOuputManager.Current.OuputLog(11, UAmessage);
                                        //20230717 log输出【ygs】 End
                                        // 20240406 启动屏幕录制程序 追加 Start                                                    
                                        SocketScreenRecorder.Current.clientSendStart();
                                        // 20240406 启动屏幕录制程序 追加 End
                                        IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                        messageManager.ShowError(UAmessage);

                                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > UnitedAutomotiveShopfloor ShowErrorMessage");

                                        IBatchOperationInline op10 = m.CreateBatchOperationInline();
                                        IOperationResult opResult10 = null;

                                        op10.ClearCommand();
                                        op10.ClearLampBuzzer();
                                        op10.SetBuzzer(false);
                                        opResult10 = op10.Execute(MachineParams.Current.OperationStepTimeout);
                                        m.UpdateInline();
                                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > UnitedAutomotiveShopfloor SetBuzzer(false)");

                                    }));

                                // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                ExportShanWeiWatchBoardBYDShopfloorManager.Current.UpdateAlarm(3, UAmessage, DateTime.Now);
                                // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End

                                Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> UA error");

                                GlobalDataManager.Current.UnitedAutomotiveError = true;
                                //System.Threading.Thread.Sleep(50);
                                // 20230209 E05区分 追加 Start   
                                GlobalDataManager.Current.EquipmentErrorCode = "E40";//联合汽车电子报警
                                Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                // 20230209 E05区分 追加 End 
                                //20230706  查找E05 【徐明武】 修改 Start
                                //return DesyncState.Current;
                                {
                                    Holly.Log.HlLogger.Write("E05 => 41 ");
                                    return DesyncState.Current;
                                }
                                //20230706  查找E05 【徐明武】 修改 End 
                            }
                            //}                               
                        }

                        Holly.Log.HlLogger.Write("HOLLY AOI ============> buzzer Step");
                        //Log4Net.Info("HOLLY AOI ============> buzzer Step");
                        // 20201009 秦皇岛AOI卡关追溯 修改 Start
                        //if ((AutoRunSettings.Default.IsInspectionResultBuzzerEnabled || AutoRunSettings.Default.IsBarcodeUnreadableBuzzerEnabled || Customization.Current.IsBuzzerForBadBlock1 || Customization.Current.IsBuzzerForAllBadBlock || Customization.Current.IsBuzzerForRepeatBarcode || Customization.Current.ZdtcoAOIReplaceInfo.IsEnabled || Customization.Current.ZdtcoPLASMA.IsEnabled || (Customization.Current.ZdtcoSPINGInfo.IsEnabled && Customization.Current.ZdtcoSPINGInfo.IsCKHour) || (Customization.Current.ZdtcoSPINGInfo.IsEnabled && (Customization.Current.ZdtcoSPINGInfo.IsAlarmNotLink || Customization.Current.ZdtcoSPINGInfo.IsAlarmPCsNotMatch))) && !AutoRunSettings.Default.IsOfflineMode)

                        int checkRailID = 1;
                        if (MachineParams.Current.InlineMachine.IsDoubleRail && !MachineParams.Current.InlineMachine.IsSingleHead && MachineParams.Current.InlineMachine.IsFourthRailFixed)
                        {
                            checkRailID = 2;
                        }

                        if ((AutoRunSettings.Default.IsInspectionResultBuzzerEnabled ||
                            AutoRunSettings.Default.IsBarcodeUnreadableBuzzerEnabled ||
                            Customization.Current.IsBuzzerForBadBlock1 ||
                            Customization.Current.IsBuzzerForAllBadBlock ||
                            Customization.Current.IsBuzzerForRepeatBarcode ||
                            Customization.Current.ZdtcoAOIReplaceInfo.IsEnabled ||
                            Customization.Current.ZdtcoPLASMA.IsEnabled ||
                            //20231229 鹏鼎脚印不报警 【李逸凡】 追加 Start
                            Customization.Current.ZdtcoMisMatchShopfloor.IsEnabled ||
                            //20231229 鹏鼎脚印不报警 【李逸凡】 追加 End
                            (Customization.Current.ZdtcoSPINGInfo.IsEnabled && (Customization.Current.ZdtcoSPINGInfo.IsAlarmNotLink ||
                                                                                Customization.Current.ZdtcoSPINGInfo.IsAlarmPCsNotMatch ||
                                                                                Customization.Current.ZdtcoSPINGInfo.IsCKHour ||
                                                                                Customization.Current.ZdtcoSPINGInfo.IsUseStateControl))) &&
                            !AutoRunSettings.Default.IsOfflineMode)
                        // 20201009 秦皇岛AOI卡关追溯 修改 End
                        {
                            // 20201126 报警同步 追加 Start
                            MachineAlarmDataControl.Current.WaitAlarmCheckEnd(1);
                            // 20201126 报警同步 追加 End

                            //m.stopPLC();

                            //20240416 抚州比亚迪2D设备机内判定出板方式修改【陆志福】追加 Start
                            IBatchOperationInline op1 = m.CreateBatchOperationInline();
                            var noBoardOutHighSpeed = Customization.Current.NoBoardOutHighSpeed;
                            if (!noBoardOutHighSpeed)
                            {
                                //20240416 抚州比亚迪2D设备机内判定出板方式修改【陆志福】追加 End
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> IsInspectionResultBuzzerEnabled Board Out HighSpeed send command");
                                //Log4Net.Info("HOLLY AOI ============> IsInspectionResultBuzzerEnabled Board Out HighSpeed send command");
                                ////foxconn 检测结果报警 或者 BYD A面扫不到条码报警  或者BYD三部拼板1为叉板时报警
                                //20240416 抚州比亚迪2D设备机内判定出板方式修改【陆志福】删除 Start
                                // 移到if外面
                                //IBatchOperationInline op1 = m.CreateBatchOperationInline();
                                //20240416 抚州比亚迪2D设备机内判定出板方式修改【陆志福】删除 End
                                IOperationResult opResult1 = null;
                                //op1.LocateCamera(GlobalDataManager.Current.ReleaseBoardPosition);

                                //20230504 惠州欣旺达软件增加延时出板功能【张晨铖】 追加 Start 
                                if (Customization.Current.IsBoardOutDelay)
                                {
                                    int boardOutDelay = Convert.ToInt32(AutoRunSettings2.Default.BoardOutDelay) * 1000;
                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> BoardOut boardOutDelay = " + boardOutDelay);
                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> BoardOut boardOutDelay Start");
                                    Thread.Sleep(boardOutDelay);
                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> BoardOut boardOutDelay End");
                                }
                                //20230504 惠州欣旺达软件增加延时出板功能【张晨铖】 追加 End

                                op1.BoardOutHighSpeed();
                                op1.LocateLoader(GlobalDataManager.Current.LastPosition, GlobalDataManager.Current.ReleaseBoardPosition, false);
                                opResult1 = op1.Execute(MachineParams.Current.OperationStepTimeout);
                                progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);
                                opResult1.Wait();
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> IsInspectionResultBuzzerEnabled Board Out HighSpeed wait");
                                //Log4Net.Info("HOLLY AOI ============> IsInspectionResultBuzzerEnabled Board Out HighSpeed wait");
                                /////////////////////////////////////////////////////////m.UpdateInline();
                                //context.CheckInlineMachineStatus();
                                Stopwatch timeoutStopwatch1 = Stopwatch.StartNew();
                                // 20230308 E05区分报警延时修改【王小雪】 修改 Start
                                // TimeSpan timeout1 = new TimeSpan(0, 0, 15);

                                TimeSpan timeout1 = new TimeSpan(0, 0, 5);
                                // 20230308 E05区分报警延时修改【王小雪】 修改 End   
                                bool isTimeOut1 = false;

                                // 20201104 通用版本切换程序 修改 Start
                                //while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOutHighSpeed) == 0 && (m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                //{
                                //    if (context.StopFlag)
                                //        return ExitState.Current;

                                //    bool mResult = m.UpdateInline();
                                //    if (!mResult)
                                //    {
                                //        Holly.Log.HlLogger.Write("HOLLY AOI ============> m.UpdateInline() result for test = " + mResult);
                                //    }
                                //    if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                //    {
                                //        return DesyncState.Current;
                                //    }

                                //    if (isTimeOut1)
                                //    {
                                //        GlobalDataManager.Current.IsPLCError = true;
                                //        // 20230209 E05区分 追加 Start   
                                //        GlobalDataManager.Current.EquipmentErrorCode = "E34";//PLC报警
                                //        Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                //        // 20230209 E05区分 追加 End 
                                //        return DesyncState.Current;
                                //    }

                                //    if (timeoutStopwatch1.Elapsed >= timeout1)
                                //    {
                                //        isTimeOut1 = true;
                                //        Holly.Log.HlLogger.Write("HOLLY AOI ============> Board Out HighSpeed timeout");
                                //    }
                                //    //context.CheckInlineMachineStatus();
                                //    Thread.Sleep(50);
                                //}
                                //progressListener.Complete();

                                //20231026 立景多程式切换出板超时优化 【曹志鹏】 修改 Start
                                //if (!Customization.Current.SwitchProgram.IsEnabled)
                                if (!Customization.Current.SwitchProgram.IsEnabled || !Customization.Current.AutoSwitchProgramsShopfloor.IsEnabled)
                                //20231026 立景多程式切换出板超时优化 【曹志鹏】 修改 End
                                {
                                    while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOutHighSpeed) == 0 && (m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                    {
                                        if (context.StopFlag)
                                            return ExitState.Current;

                                        bool mResult = m.UpdateInline();
                                        if (!mResult)
                                        {
                                            Holly.Log.HlLogger.Write("HOLLY AOI ============> m.UpdateInline() result for test = " + mResult);
                                        }
                                        if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                        {
                                            //20230706  查找E05 【徐明武】 修改 Start
                                            //return DesyncState.Current;
                                            {
                                                Holly.Log.HlLogger.Write("E05 => 42 ");
                                                return DesyncState.Current;
                                            }
                                            //20230706  查找E05 【徐明武】 修改 End 
                                        }

                                        if (isTimeOut1)
                                        {
                                            GlobalDataManager.Current.IsPLCError = true;
                                            // 20230209 E05区分 追加 Start   
                                            GlobalDataManager.Current.EquipmentErrorCode = "E34 hightspeed出板异常";//PLC报警
                                            Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                            // 20230209 E05区分 追加 End 
                                            //20230706  查找E05 【徐明武】 修改 Start
                                            //return DesyncState.Current;
                                            {
                                                Holly.Log.HlLogger.Write("E05 => 43 ");
                                                return DesyncState.Current;
                                            }
                                            //20230706  查找E05 【徐明武】 修改 End 
                                        }

                                        if (timeoutStopwatch1.Elapsed >= timeout1)
                                        {
                                            isTimeOut1 = true;
                                            Holly.Log.HlLogger.Write("HOLLY AOI ============> Board Out HighSpeed timeout");
                                        }
                                        //context.CheckInlineMachineStatus();
                                        Thread.Sleep(50);
                                    }
                                    progressListener.Complete();
                                }
                                // 20201104 通用版本切换程序 修改 End

                                //20240527 鹏鼎AOI偷停判定 【范克文】 追加 Start
                                ExportPengDingShopfloorManager.Current.BoardOutHighSpeedFlag = true;
                                //20240527 鹏鼎AOI偷停判定 【范克文】 追加 End

                                Holly.Log.HlLogger.Write("HOLLY AOI ============> IsInspectionResultBuzzerEnabled Board Out HighSpeed end");
                                //Log4Net.Info("HOLLY AOI ============> IsInspectionResultBuzzerEnabled Board Out HighSpeed end");
                                //20240416 抚州比亚迪2D设备机内判定出板方式修改【陆志福】追加 Start
                            }
                            //20240416 抚州比亚迪2D设备机内判定出板方式修改【陆志福】追加 End

                            //底部条码枪未读到，不等待检测结果
                            //20240429 启动底部条码枪选项分为1，2轨单独设置 【曹志鹏】 修改 Start
                            //if (AutoRunSettings.Default.IsBarcodeUnreadableBuzzerEnabled && AutoRunSettings.Default.IsBottomBarcodeScannerEnabled)
                            if (AutoRunSettings.Default.IsBarcodeUnreadableBuzzerEnabled && AutoRunSettings.Default.IsBottomBarcodeScannerEnabled1)
                            //20240429 启动底部条码枪选项分为1，2轨单独设置 【曹志鹏】 修改 End
                            {
                                if (!GlobalDataManager.Current.hasBottomBarcode)//(GlobalDataManager.Current.Barcodes.Count == 0)
                                {
                                    //while ((m.InputStatusInline & InputStatusInline.BoardIn) != 0 || (m.InputStatusInline & InputStatusInline.SlowDown) != 0 || (m.InputStatusInline & InputStatusInline.Stopper) != 0 || (m.InputStatusInline & InputStatusInline.BoardOut) != 0)
                                    //{

                                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                    ExportShanWeiWatchBoardBYDShopfloorManager.Current.WriteAlarm(1, Lang.UI.UI_Label_BarcodeUnreadable, DateTime.Now);
                                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End
                                    UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                        new Action(
                                            delegate ()
                                            {
                                                op.ClearLampBlink();
                                                op.SetRedAndBuzzer();
                                                opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                                //opResult.Wait();

                                                Holly.Log.HlLogger.Write("HOLLY AOI ====> ImageAcquisitionMachine.Visit(GoState) Alarm=" + Lang.UI.UI_Label_BarcodeUnreadable);
                                                //20230717 log输出【ygs】 Start 
                                                ExportLogOuputManager.Current.OuputLog(11, Lang.UI.UI_Label_BarcodeUnreadable);
                                                //20230717 log输出【ygs】 End
                                                // 20240406 启动屏幕录制程序 追加 Start                                                    
                                                SocketScreenRecorder.Current.clientSendStart();
                                                // 20240406 启动屏幕录制程序 追加 End
                                                IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                                messageManager.ShowError(Lang.UI.UI_Label_BarcodeUnreadable);

                                                IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                                IOperationResult opResult2 = null;

                                                op1.ClearLampBuzzer();
                                                op2.SetBuzzer(false);
                                                opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                                //opResult2.Wait();
                                            }));

                                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                    ExportShanWeiWatchBoardBYDShopfloorManager.Current.UpdateAlarm(3, Lang.UI.UI_Label_BarcodeUnreadable, DateTime.Now);
                                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End

                                    Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> IsBarcodeUnreadableBuzzerEnabled");
                                    // 20230209 E05区分 追加 Start   
                                    GlobalDataManager.Current.EquipmentErrorCode = "E41"; //条码枪相关报警
                                    Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                    // 20230209 E05区分 追加 End

                                    //20230321 江西奥海：条码枪未读到码弹窗报警逻辑调整 【曹志鹏】 修改 Start
                                    //return DesyncState.Current;
                                    if (Customization.Current.JXAohaiShopfloor.IsEnabled)
                                    {
                                        op = m.CreateBatchOperationInline();
                                        opResult = null;

                                        Thread.Sleep(50);
                                        op.BoardOutNG();
                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> StateTransitionVisitor.GoState NoBarcode Board Out NG Start");

                                        opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                        progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);
                                        opResult.Wait();
                                        while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                        {
                                            if (context.StopFlag)
                                                return ExitState.Current;
                                            m.UpdateInline();
                                            if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                            {
                                                //20230706  查找E05 【徐明武】 修改 Start
                                                //return DesyncState.Current;
                                                {
                                                    Holly.Log.HlLogger.Write("E05 => 44 ");
                                                    return DesyncState.Current;
                                                }
                                                //20230706  查找E05 【徐明武】 修改 End 
                                            }
                                            Thread.Sleep(50);
                                        }
                                        progressListener.Complete();
                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> StateTransitionVisitor.GoState NoBarcode Board Out NG Finish ");
                                        return GoState.Current;
                                    }
                                    else
                                    {
                                        //20230706  查找E05 【徐明武】 修改 Start
                                        //return DesyncState.Current;
                                        {
                                            Holly.Log.HlLogger.Write("E05 => 45 ");
                                            return DesyncState.Current;
                                        }
                                        //20230706  查找E05 【徐明武】 修改 End 
                                    }
                                    //20230321 江西奥海：条码枪未读到码弹窗报警逻辑调整 【曹志鹏】 修改 End
                                }
                            }

                            // 20240411 兆驰偏心距不良报警【陆志福】追加 Start
                            EventSignals.CenterDeviationTestSignal.Instance.Wait();   // 等待报告生成
                            // 20240411 兆驰偏心距不良报警【陆志福】追加 End

                            // 20201125 指定错误类型停机报警优化 追加 Start
                            if (Customization.Current.AlarmNotification.IsEnabled)
                            {
                                bool isNeedAlarm = false;

                                isNeedAlarm = ExportAlarmNotificationManager.Current.CheckAlarm(m);
                                if (isNeedAlarm)
                                {
                                    // 20240304 太原LQ修改 【王晨】 追加 Start
                                    if (Customization.Current.IsNoBoardOutNG)
                                    {
                                        return ExitState.Current;
                                    }
                                    // 20241031 华瑞TCL本机确认提交后出板 【李伟】 追加 Start
                                    else if (Customization.Current.AlarmNotification.IsNotBoardOut && Customization.Current.IsWaitLocalCommit)
                                    {
                                        Holly.Log.HlLogger.Write("HOLLY AOI ======> ImageAcquistionMachine Visit AlarmNotification IsNotBoardOut");
                                    }
                                    // 20241031 华瑞TCL本机确认提交后出板 【李伟】 追加 End
                                    else
                                    {
                                        // 20240304 太原LQ修改 【王晨】 追加 End
                                        op = m.CreateBatchOperationInline();
                                        opResult = null;

                                        Thread.Sleep(50);
                                        if (AutoRunSettings.Default.IsSendOKNGToNextMachine)
                                        {
                                            op.BoardOutNG();
                                        }
                                        else
                                        {
                                            op.BoardOut();
                                        }
                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> StateTransitionVisitor.GoState AlarmNotification Board Out");
                                        //Log4Net.Info("HOLLY AOI ============> StateTransitionVisitor.GoState AlarmNotification Board Out");
                                        opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                        progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);
                                        opResult.Wait();
                                        while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                        {
                                            if (context.StopFlag)
                                                return ExitState.Current;
                                            m.UpdateInline();
                                            if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                            {
                                                //20230706  查找E05 【徐明武】 修改 Start
                                                //return DesyncState.Current;
                                                {
                                                    Holly.Log.HlLogger.Write("E05 => 46 ");
                                                    return DesyncState.Current;
                                                }
                                                //20230706  查找E05 【徐明武】 修改 End 
                                            }
                                            Thread.Sleep(50);
                                        }
                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> StateTransitionVisitor.GoState AlarmNotification Board Out Finish ");
                                        //Log4Net.Info("HOLLY AOI ============> StateTransitionVisitor.GoState AlarmNotification Board Out Finish ");
                                        progressListener.Complete();
                                        return GoState.Current;
                                        // 20240304 太原LQ修改 【王晨】 追加 Start
                                    }
                                    // 20240304 太原LQ修改 【王晨】 追加 End
                                }
                            }
                            // 20201125 指定错误类型停机报警优化 追加 End
                            int isAlarmBuzzer = -1;// reportManager.IsAlarmBuzzer;
                            // 20240807 鹏鼎左拼板报警、右拼板不报警 【范克文】 追加 Start
                            int isAlarmBuzzerMultPanel = -1;
                            // 20240807 鹏鼎左拼板报警、右拼板不报警 【范克文】 追加 End
                            bool isTimeOut = false;

                            // 20240816 淮安鹏鼎多pannel二次卡关&markerror&nobarcode报警不生成数据功能移动位置 【刘亚杰】 追加 Start
                            //20231221 淮安鹏鼎多pannel二次卡关&markerror&nobarcode报警不生成数据【张晨铖】 追加 Start
                            if (Customization.Current.IsMarkErrorOrNoBarcodeAlarm)
                            {
                                bool isOK = BarcodeRepeatAlarmManager.Current.IsMarkErrorOrNoBarcodeAlarm(1);
                                //二次重测（条码重复）出板
                                if (!isOK)
                                {
                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) errorMsg:" + BarcodeRepeatAlarmManager.Current.errorMsg);
                                    if (BarcodeRepeatAlarmManager.Current.errorMsg.Equals(""))
                                    {
                                        BarcodeRepeatAlarmManager.Current.errorMsg = "Mark Error OR No Barcode!";
                                    }
                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) errorMsg:" + BarcodeRepeatAlarmManager.Current.errorMsg);

                                    WaitVerify(m, BarcodeRepeatAlarmManager.Current.errorMsg);

                                    // 20240815 报警MarkError或者NoBarcode后不出板 【刘亚杰】 追加 Start
                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager.IsMarkErrorOrNoBarcodeAlarm return DesyncState.Current");
                                    return DesyncState.Current;
                                    // 20240815 报警MarkError或者NoBarcode后不出板 【刘亚杰】 追加 End

                                    #region BoardOutNG1

                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager.IsMarkErrorOrNoBarcodeAlarm Board Out Start");
                                    //Log4Net.Warn("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager.IsMarkErrorOrNoBarcodeAlarm Board Out Start");
                                    IBatchOperationInline opBarcodeRepeatAlarmManagerBoardOut = m.CreateBatchOperationInline();
                                    IOperationResult opBarcodeRepeatAlarmManagerBoardOutRet = null;

                                    opBarcodeRepeatAlarmManagerBoardOut.BoardOutNG();
                                    opBarcodeRepeatAlarmManagerBoardOutRet = opBarcodeRepeatAlarmManagerBoardOut.Execute(MachineParams.Current.OperationStepTimeout);
                                    progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                                    HeartBeatUtils boardOutHeartBeat = new HeartBeatUtils(1);
                                    while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                    {
                                        if (boardOutHeartBeat.IsOutput())
                                        {
                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager.IsMarkErrorOrNoBarcodeAlarm wait BoardOut Complete");
                                            //Log4Net.Info("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager.IsMarkErrorOrNoBarcodeAlarm wait BoardOut Complete");
                                        }

                                        if (context.StopFlag)
                                        {
                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager.IsMarkErrorOrNoBarcodeAlarm Error return ExitState.Current");
                                            //Log4Net.Info("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager.IsMarkErrorOrNoBarcodeAlarm Error return ExitState.Current");
                                            return ExitState.Current;
                                        }

                                        m.UpdateInline();
                                        if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                        {
                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager.IsMarkErrorOrNoBarcodeAlarm Error return DesyncState.Current");
                                            //Log4Net.Info("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager.IsMarkErrorOrNoBarcodeAlarm Error return DesyncState.Current");
                                            //20230706  查找E05 【徐明武】 修改 Start
                                            //return DesyncState.Current;
                                            {
                                                Holly.Log.HlLogger.Write("E05 => 47 ");
                                                return DesyncState.Current;
                                            }
                                            //20230706  查找E05 【徐明武】 修改 End 
                                        }
                                        Thread.Sleep(50);
                                    }
                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager.IsMarkErrorOrNoBarcodeAlarm BoardOut End return GoState.Current");
                                    //Log4Net.Info("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager.IsMarkErrorOrNoBarcodeAlarm BoardOut End return GoState.Current");
                                    return GoState.Current;
                                    #endregion
                                }
                            }
                            //20231221 淮安鹏鼎多pannel二次卡关&markerror&nobarcode报警不生成数据【张晨铖】 追加 End
                            // 20240816 淮安鹏鼎多pannel二次卡关&markerror&nobarcode报警不生成数据功能移动位置 【刘亚杰】 追加 End

                            // 20221020 二次测板报警停机不测试 追加 Start
                            // 20221102 ZdtcoSPINGInfo 对应
                            if (Customization.Current.BarcodeRepeatAlarm.IsEnabled)
                            {
                                bool isCheckSnOK = BarcodeRepeatAlarmManager.Current.IsSnCheckOK(1);
                                //二次重测（条码重复）出板
                                if (!isCheckSnOK)
                                {
                                    WaitVerify(m, "该板为二次测试，停机报警出板");
                                    //Log4Net.Warn("该板为二次测试，停机报警出板");

                                    //20240809 鹏鼎二次卡关直接退出自动运行 【范克文】 追加 Start
                                    if (Customization.Current.IsBarcodeRepeatExitAuto)
                                    {
                                        return ExitState.Current;
                                    }
                                    else
                                    {
                                        //20240809 鹏鼎二次卡关直接退出自动运行 【范克文】 追加 End
                                        #region BoardOutNG1

                                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager Board Out Start");
                                        //Log4Net.Info("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager Board Out Start");
                                        IBatchOperationInline opBarcodeRepeatAlarmManagerBoardOut = m.CreateBatchOperationInline();
                                        IOperationResult opBarcodeRepeatAlarmManagerBoardOutRet = null;

                                        opBarcodeRepeatAlarmManagerBoardOut.BoardOutNG();
                                        opBarcodeRepeatAlarmManagerBoardOutRet = opBarcodeRepeatAlarmManagerBoardOut.Execute(MachineParams.Current.OperationStepTimeout);
                                        progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                                        HeartBeatUtils boardOutHeartBeat = new HeartBeatUtils(1);
                                        while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                        {
                                            if (boardOutHeartBeat.IsOutput())
                                            {
                                                Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager wait BoardOut Complete");
                                                //Log4Net.Info("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager wait BoardOut Complete");
                                            }

                                            if (context.StopFlag)
                                            {
                                                Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager Error return ExitState.Current");
                                                //Log4Net.Info("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager Error return ExitState.Current");
                                                return ExitState.Current;
                                            }

                                            m.UpdateInline();
                                            if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                            {
                                                Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager Error return DesyncState.Current");
                                                //Log4Net.Info("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager Error return DesyncState.Current");
                                                //20230706  查找E05 【徐明武】 修改 Start
                                                //return DesyncState.Current;
                                                {
                                                    Holly.Log.HlLogger.Write("E05 => 47 ");
                                                    return DesyncState.Current;
                                                }
                                                //20230706  查找E05 【徐明武】 修改 End 
                                            }
                                            Thread.Sleep(50);
                                        }
                                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager BoardOut End return GoState.Current");
                                        //Log4Net.Info("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager BoardOut End return GoState.Current");
                                        return GoState.Current;
                                        #endregion
                                        //20240809 鹏鼎二次卡关直接退出自动运行 【范克文】 追加 Start
                                    }
                                    //20240809 鹏鼎二次卡关直接退出自动运行 【范克文】 追加 End
                                }
                            }
                            // 20221020 二次测板报警停机不测试 追加 End

                            // 20240816 淮安鹏鼎多pannel二次卡关&markerror&nobarcode报警不生成数据功能移动位置 【刘亚杰】 删除 Start
                            #region 删除
                            ////20231221 淮安鹏鼎多pannel二次卡关&markerror&nobarcode报警不生成数据【张晨铖】 追加 Start
                            //if (Customization.Current.IsMarkErrorOrNoBarcodeAlarm)
                            //{
                            //    bool isOK = BarcodeRepeatAlarmManager.Current.IsMarkErrorOrNoBarcodeAlarm();
                            //    //二次重测（条码重复）出板
                            //    if (!isOK)
                            //    {
                            //        WaitVerify(m, BarcodeRepeatAlarmManager.Current.errorMsg);
                            //        #region BoardOutNG1

                            //        Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager.IsMarkErrorOrNoBarcodeAlarm Board Out Start");
                            //        //Log4Net.Warn("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager.IsMarkErrorOrNoBarcodeAlarm Board Out Start");
                            //        IBatchOperationInline opBarcodeRepeatAlarmManagerBoardOut = m.CreateBatchOperationInline();
                            //        IOperationResult opBarcodeRepeatAlarmManagerBoardOutRet = null;

                            //        opBarcodeRepeatAlarmManagerBoardOut.BoardOutNG();
                            //        opBarcodeRepeatAlarmManagerBoardOutRet = opBarcodeRepeatAlarmManagerBoardOut.Execute(MachineParams.Current.OperationStepTimeout);
                            //        progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                            //        HeartBeatUtils boardOutHeartBeat = new HeartBeatUtils(1);
                            //        while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                            //        {
                            //            if (boardOutHeartBeat.IsOutput())
                            //            {
                            //                Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager.IsMarkErrorOrNoBarcodeAlarm wait BoardOut Complete");
                            //                //Log4Net.Info("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager.IsMarkErrorOrNoBarcodeAlarm wait BoardOut Complete");
                            //            }

                            //            if (context.StopFlag)
                            //            {
                            //                Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager.IsMarkErrorOrNoBarcodeAlarm Error return ExitState.Current");
                            //                //Log4Net.Info("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager.IsMarkErrorOrNoBarcodeAlarm Error return ExitState.Current");
                            //                return ExitState.Current;
                            //            }

                            //            m.UpdateInline();
                            //            if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                            //            {
                            //                Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager.IsMarkErrorOrNoBarcodeAlarm Error return DesyncState.Current");
                            //                //Log4Net.Info("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager.IsMarkErrorOrNoBarcodeAlarm Error return DesyncState.Current");
                            //                //20230706  查找E05 【徐明武】 修改 Start
                            //                //return DesyncState.Current;
                            //                {
                            //                    Holly.Log.HlLogger.Write("E05 => 47 ");
                            //                    return DesyncState.Current;
                            //                }
                            //                //20230706  查找E05 【徐明武】 修改 End 
                            //            }
                            //            Thread.Sleep(50);
                            //        }
                            //        Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager.IsMarkErrorOrNoBarcodeAlarm BoardOut End return GoState.Current");
                            //        //Log4Net.Info("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager.IsMarkErrorOrNoBarcodeAlarm BoardOut End return GoState.Current");
                            //        return GoState.Current;
                            //        #endregion
                            //    }
                            //}
                            ////20231221 淮安鹏鼎多pannel二次卡关&markerror&nobarcode报警不生成数据【张晨铖】 追加 End
                            #endregion
                            // 20240816 淮安鹏鼎多pannel二次卡关&markerror&nobarcode报警不生成数据功能移动位置 【刘亚杰】 删除 End

                            //20231117 常州汇川简化自动点检功能 【金伟】 追加 Start 
                            if (ExportSpotCheckPreventShopfloorManager.Current.IsExportEnabled && ExportSpotCheckPreventShopfloorManager.Current.isNeedSpotCheck)
                            {
                                ExportSpotCheckPreventShopfloorManager.Current.SpotCheckResult(m);
                                return ExitState.Current;
                            }
                            //20231117 常州汇川简化自动点检功能 【金伟】 追加 End

                            //20230521 MES标准化 【曹志鹏】 追加 Start
                            //if (!ExportMainShopfloorManager.Current.CheckBarcodeStatus(m))
                            // 20230621 指定报警配置与启用mes能同时生效【刘剑】 修改 Start
                            if (!ExportAlarmNotificationManager.Current.checkAlarm)
                            {
                                // 20201106 指定报警配置与启用mes能同时生效【刘剑】 修改 End

                                if (!ExportMainShopfloorManager.Current.CheckBarcodeStatus(m))
                                {
                                    // 20240613 太原报警停机增加权限解锁功能 【王晨】 追加 Start
                                    //焊前只特定错漏反需要密码解锁
                                    // 20240724 太原出差修改 【王晨】 追加 Start
                                    if (!ExportFoxconnShopfloor_TYMergeManager.Current.IsPreWeld)
                                    {
                                        // 20240724 太原出差修改 【王晨】 追加 End
                                        ExportCommonShopfloorManager.Current.ShowDialog();
                                        // 20240724 太原出差修改 【王晨】 追加 Start
                                    }
                                    // 20240724 太原出差修改 【王晨】 追加 End
                                    // 20240613 太原报警停机增加权限解锁功能 【王晨】 追加 End

                                    // 20240304 太原LQ修改 【王晨】 追加 Start
                                    //太原半自动模式下，超限需要维修站机内控制出板
                                    if (ExportFoxconnShopfloor_TYMergeManager.Current.IsManualMode &&
                                        (ExportFoxconnShopfloor_TYMergeManager.Current.IsExceed || ExportFoxconnShopfloor_TYMergeManager.Current.IsWarningAlarm)
                                        )
                                    {
                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) IsManualMode and IsExceed or IsWarningAlarm");
                                    }
                                    // 20240724 太原出差修改 【王晨】 追加 Start
                                    //焊前点完弹框出板，因可能开IsNoBoardOutNG，先行判断
                                    else if (ExportFoxconnShopfloor_TYMergeManager.Current.IsPreWeld
                                        && (ExportFoxconnShopfloor_TYMergeManager.Current.IsExceed || ExportFoxconnShopfloor_TYMergeManager.Current.IsWarningAlarm))
                                    {
                                        if (ExportFoxconnShopfloor_TYMergeManager.Current.IsPreWeld && ExportFoxconnShopfloor_TYMergeManager.Current.IsWarningAlarm)
                                        {
                                            ExportCommonShopfloorManager.Current.ShowDialog();
                                        }
                                        //可能plc或者轨道不支持发送ng信号,不开机内机外的情况下发送ok信号正常出板
                                        #region boardout
                                        if (AutoRunSettings.Default.IsWaitRepairSendOKNG || AutoRunSettings.Default.IsSendOKNGToNextMachine)
                                        {
                                            #region BoardOutNG
                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportMainShopfloorManager Error BoardOut NG Start");
                                            IBatchOperationInline opBoardOut = m.CreateBatchOperationInline();
                                            IOperationResult opBoardOutRet = null;

                                            opBoardOut.BoardOutNG();
                                            opBoardOutRet = opBoardOut.Execute(MachineParams.Current.OperationStepTimeout);
                                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                                            HeartBeatUtils boardOutHeartBeat = new HeartBeatUtils(1);
                                            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                            {
                                                if (boardOutHeartBeat.IsOutput())
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportMainShopfloorManager wait BoardOut NG Complete");
                                                }

                                                if (context.StopFlag)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportMainShopfloorManager Error return ExitState.Current");
                                                    return ExitState.Current;
                                                }

                                                m.UpdateInline();
                                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportMainShopfloorManager Error return DesyncState.Current");
                                                    //20230706  查找E05 【徐明武】 修改 Start
                                                    //return DesyncState.Current;
                                                    {
                                                        Holly.Log.HlLogger.Write("E05 => 82 ");
                                                        return DesyncState.Current;
                                                    }
                                                    //20230706  查找E05 【徐明武】 修改 End 
                                                }
                                                Thread.Sleep(50);
                                            }

                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportMainShopfloorManager BoardOut NG End return GoState.Current");
                                            return GoState.Current;
                                            #endregion
                                        }
                                        else
                                        {
                                            #region BoardoutNormal
                                            //op.ClearCommand();
                                            //opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                            Holly.Log.HlLogger.Write("HOLLY AOI ====> ExportMainShopfloorManager Error Board Out Normal");
                                            //op.LocateCamera(GlobalDataManager.Current.ReleaseBoardPosition);

                                            // 20230708 TraceLog【纪明】 追加 Start
                                            LogManagerComm.Current.OutputLog(LogManagerComm.TRACE_LOG, DateTimeUtils.GetNow(DateTimeUtils.DATE_FORMAT1) + "\t" + "HOLLY AOI ====> ExportMainShopfloorManager Error Board Out Normal Start ");
                                            // 20230708 TraceLog【纪明】 追加 End
                                            op.BoardOut();

                                            op.LocateLoader(GlobalDataManager.Current.LastPosition, GlobalDataManager.Current.ReleaseBoardPosition, false);
                                            opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);
                                            //opResult.Wait();
                                            /////////////////////////////////////////////////////////m.UpdateInline();
                                            //context.CheckInlineMachineStatus();

                                            // 20220803 PLC状态监控 追加 Start
                                            Stopwatch normalBoardOutstopwatch = new Stopwatch();
                                            normalBoardOutstopwatch.Start();
                                            HeartBeatUtils heartBeat = new HeartBeatUtils(2);

                                            Holly.Log.HlLogger.Write("HOLLY AOI ====> Board Out m.CompleteProcessStatus = " + m.CompleteProcessStatus);
                                            // 20220803 PLC状态监控 追加 End

                                            // 20230714 郑州不进板问题noboardout置位 【陈凤丹】 追加 Start
                                            int setBoardoutEndTimes = 0;
                                            // 20230714 郑州不进板问题noboardout置位 【陈凤丹】 追加 End

                                            // 20220830 2022机台出板异常对应 修改 Start
                                            //while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)

                                            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0 || IsHaveBoard(m))
                                            // 20220830 2022机台出板异常对应 修改 End
                                            {
                                                if (context.StopFlag)
                                                    return ExitState.Current;

                                                m.UpdateInline();
                                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                                {
                                                    //20230706  查找E05 【徐明武】 修改 Start
                                                    string message = string.Format("E05 => EmergencyButton:{0},SafeSensor:{1},CommandStatusInline.TimeOut:{2},TwoBoardInside:{3}", m.CurrentInputs.EmergencyButton.ToString(), m.CurrentInputs.SafeSensor.ToString(), ((m.CommandStatusInline & CommandStatusInline.TimeOut) != 0).ToString(), ((m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0).ToString());
                                                    Holly.Log.HlLogger.Write(message);
                                                    //return DesyncState.Current;
                                                    {
                                                        Holly.Log.HlLogger.Write("E05 => 94 Master = " + AutoRunSettings2.Default.IsMaster.ToString());
                                                        return DesyncState.Current;
                                                    }
                                                    //20230706  查找E05 【徐明武】 修改 End 
                                                }
                                                //context.CheckInlineMachineStatus();
                                                Thread.Sleep(50);

                                                // 20220803 PLC状态监控 追加 Start
                                                if (normalBoardOutstopwatch.ElapsedMilliseconds / 1000 > 5)
                                                {
                                                    if (!IsHaveBoard(m))
                                                    {
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ====> ExportMainShopfloorManager Error Board Out is no board break");
                                                        // 20230708 TraceLog【纪明】 追加 Start
                                                        LogManagerComm.Current.OutputLog(LogManagerComm.TRACE_LOG, DateTimeUtils.GetNow(DateTimeUtils.DATE_FORMAT1) + "\t" + "HOLLY AOI ====> ExportMainShopfloorManager Error Board Out is no board break ");
                                                        // 20230708 TraceLog【纪明】 追加 End

                                                        // 20230714 郑州不进板问题noboardout置位 【陈凤丹】 修改 Start
                                                        //break;

                                                        //没收到出板完成信号，通知PLC重发出板完成，重试3次都没成功再退出
                                                        if (setBoardoutEndTimes < 3)
                                                        {
                                                            CentralControlPLCCommand.Current.SetBoardoutEnd(1);
                                                            setBoardoutEndTimes++;
                                                            normalBoardOutstopwatch.Restart();
                                                        }
                                                        else
                                                        {
                                                            Holly.Log.HlLogger.Write("HOLLY AOI ====> ExportMainShopfloorManager Error Board Out is no board break ， setBoardoutEndTimes = " + setBoardoutEndTimes);
                                                            //LogManagerComm.Current.OutputLog(LogManagerComm.TRACE_LOG, DateTimeUtils.GetNow(DateTimeUtils.DATE_FORMAT1) + "\t" + "HOLLY AOI ====> Board Out is no board break ， setBoardoutEndTimes = " + setBoardoutEndTimes);
                                                            break;
                                                        }
                                                        // 20230714 郑州不进板问题noboardout置位 【陈凤丹】 修改 End
                                                    }
                                                }
                                                // 20220803 PLC状态监控 追加 End

                                                if (heartBeat.IsOutput())
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ====> ExportMainShopfloorManager Error Board Out Is Waitting ...");

                                                    // 20230708 TraceLog【纪明】 追加 Start
                                                    LogManagerComm.Current.OutputLog(LogManagerComm.TRACE_LOG, DateTimeUtils.GetNow(DateTimeUtils.DATE_FORMAT1) + "\t" + "HOLLY AOI ====> Board Out Is Waitting ... ");
                                                    // 20230708 TraceLog【纪明】 追加 End
                                                }

                                            }
                                            progressListener.Complete();

                                            // 20220803 PLC状态监控 追加 Start
                                            normalBoardOutstopwatch.Stop();
                                            // 20220803 PLC状态监控 追加 End
                                            Holly.Log.HlLogger.Write("HOLLY AOI ====> ExportMainShopfloorManager Error Board Out Normal End");

                                            // 20230708 TraceLog【纪明】 追加 Start
                                            LogManagerComm.Current.OutputLog(LogManagerComm.TRACE_LOG, DateTimeUtils.GetNow(DateTimeUtils.DATE_FORMAT1) + "\t" + "HOLLY AOI ====> Board Out Normal End ");
                                            // 20230708 TraceLog【纪明】 追加 End
                                            #endregion
                                        }
                                        #endregion
                                    }
                                    // 20240724 太原出差修改 【王晨】 追加 End
                                    //else if (Customization.Current.IsNoBoardOutNG)
                                    //{
                                    //    return ExitState.Current;
                                    //}
                                    else
                                    {
                                        // 20240304 太原LQ修改 【王晨】 追加 End
                                        //可能plc或者轨道不支持发送ng信号,不开机内机外的情况下发送ok信号正常出板
                                        #region boardout
                                        if (AutoRunSettings.Default.IsWaitRepairSendOKNG || AutoRunSettings.Default.IsSendOKNGToNextMachine)
                                        {
                                            #region BoardOutNG
                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportMainShopfloorManager Error BoardOut NG Start");
                                            IBatchOperationInline opBoardOut = m.CreateBatchOperationInline();
                                            IOperationResult opBoardOutRet = null;

                                            opBoardOut.BoardOutNG();
                                            opBoardOutRet = opBoardOut.Execute(MachineParams.Current.OperationStepTimeout);
                                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                                            HeartBeatUtils boardOutHeartBeat = new HeartBeatUtils(1);
                                            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                            {
                                                if (boardOutHeartBeat.IsOutput())
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportMainShopfloorManager wait BoardOut NG Complete");
                                                }

                                                if (context.StopFlag)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportMainShopfloorManager Error return ExitState.Current");
                                                    return ExitState.Current;
                                                }

                                                m.UpdateInline();
                                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportMainShopfloorManager Error return DesyncState.Current");
                                                    //20230706  查找E05 【徐明武】 修改 Start
                                                    //return DesyncState.Current;
                                                    {
                                                        Holly.Log.HlLogger.Write("E05 => 82 ");
                                                        return DesyncState.Current;
                                                    }
                                                    //20230706  查找E05 【徐明武】 修改 End 
                                                }
                                                Thread.Sleep(50);
                                            }

                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportMainShopfloorManager BoardOut NG End return GoState.Current");
                                            return GoState.Current;
                                            #endregion
                                        }
                                        else
                                        {
                                            #region BoardoutNormal
                                            //op.ClearCommand();
                                            //opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                            Holly.Log.HlLogger.Write("HOLLY AOI ====> ExportMainShopfloorManager Error Board Out Normal");
                                            //op.LocateCamera(GlobalDataManager.Current.ReleaseBoardPosition);

                                            // 20230708 TraceLog【纪明】 追加 Start
                                            LogManagerComm.Current.OutputLog(LogManagerComm.TRACE_LOG, DateTimeUtils.GetNow(DateTimeUtils.DATE_FORMAT1) + "\t" + "HOLLY AOI ====> ExportMainShopfloorManager Error Board Out Normal Start ");
                                            // 20230708 TraceLog【纪明】 追加 End
                                            op.BoardOut();

                                            op.LocateLoader(GlobalDataManager.Current.LastPosition, GlobalDataManager.Current.ReleaseBoardPosition, false);
                                            opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);
                                            //opResult.Wait();
                                            /////////////////////////////////////////////////////////m.UpdateInline();
                                            //context.CheckInlineMachineStatus();

                                            // 20220803 PLC状态监控 追加 Start
                                            Stopwatch normalBoardOutstopwatch = new Stopwatch();
                                            normalBoardOutstopwatch.Start();
                                            HeartBeatUtils heartBeat = new HeartBeatUtils(2);

                                            Holly.Log.HlLogger.Write("HOLLY AOI ====> Board Out m.CompleteProcessStatus = " + m.CompleteProcessStatus);
                                            // 20220803 PLC状态监控 追加 End

                                            // 20230714 郑州不进板问题noboardout置位 【陈凤丹】 追加 Start
                                            int setBoardoutEndTimes = 0;
                                            // 20230714 郑州不进板问题noboardout置位 【陈凤丹】 追加 End

                                            // 20220830 2022机台出板异常对应 修改 Start
                                            //while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)

                                            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0 || IsHaveBoard(m))
                                            // 20220830 2022机台出板异常对应 修改 End
                                            {
                                                if (context.StopFlag)
                                                    return ExitState.Current;

                                                m.UpdateInline();
                                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                                {
                                                    //20230706  查找E05 【徐明武】 修改 Start
                                                    string message = string.Format("E05 => EmergencyButton:{0},SafeSensor:{1},CommandStatusInline.TimeOut:{2},TwoBoardInside:{3}", m.CurrentInputs.EmergencyButton.ToString(), m.CurrentInputs.SafeSensor.ToString(), ((m.CommandStatusInline & CommandStatusInline.TimeOut) != 0).ToString(), ((m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0).ToString());
                                                    Holly.Log.HlLogger.Write(message);
                                                    //return DesyncState.Current;
                                                    {
                                                        Holly.Log.HlLogger.Write("E05 => 94 Master = " + AutoRunSettings2.Default.IsMaster.ToString());
                                                        return DesyncState.Current;
                                                    }
                                                    //20230706  查找E05 【徐明武】 修改 End 
                                                }
                                                //context.CheckInlineMachineStatus();
                                                Thread.Sleep(50);

                                                // 20220803 PLC状态监控 追加 Start
                                                if (normalBoardOutstopwatch.ElapsedMilliseconds / 1000 > 5)
                                                {
                                                    if (!IsHaveBoard(m))
                                                    {
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ====> ExportMainShopfloorManager Error Board Out is no board break");
                                                        // 20230708 TraceLog【纪明】 追加 Start
                                                        LogManagerComm.Current.OutputLog(LogManagerComm.TRACE_LOG, DateTimeUtils.GetNow(DateTimeUtils.DATE_FORMAT1) + "\t" + "HOLLY AOI ====> ExportMainShopfloorManager Error Board Out is no board break ");
                                                        // 20230708 TraceLog【纪明】 追加 End

                                                        // 20230714 郑州不进板问题noboardout置位 【陈凤丹】 修改 Start
                                                        //break;

                                                        //没收到出板完成信号，通知PLC重发出板完成，重试3次都没成功再退出
                                                        if (setBoardoutEndTimes < 3)
                                                        {
                                                            CentralControlPLCCommand.Current.SetBoardoutEnd(1);
                                                            setBoardoutEndTimes++;
                                                            normalBoardOutstopwatch.Restart();
                                                        }
                                                        else
                                                        {
                                                            Holly.Log.HlLogger.Write("HOLLY AOI ====> ExportMainShopfloorManager Error Board Out is no board break ， setBoardoutEndTimes = " + setBoardoutEndTimes);
                                                            //LogManagerComm.Current.OutputLog(LogManagerComm.TRACE_LOG, DateTimeUtils.GetNow(DateTimeUtils.DATE_FORMAT1) + "\t" + "HOLLY AOI ====> Board Out is no board break ， setBoardoutEndTimes = " + setBoardoutEndTimes);
                                                            break;
                                                        }
                                                        // 20230714 郑州不进板问题noboardout置位 【陈凤丹】 修改 End
                                                    }
                                                }
                                                // 20220803 PLC状态监控 追加 End

                                                if (heartBeat.IsOutput())
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ====> ExportMainShopfloorManager Error Board Out Is Waitting ...");

                                                    // 20230708 TraceLog【纪明】 追加 Start
                                                    LogManagerComm.Current.OutputLog(LogManagerComm.TRACE_LOG, DateTimeUtils.GetNow(DateTimeUtils.DATE_FORMAT1) + "\t" + "HOLLY AOI ====> Board Out Is Waitting ... ");
                                                    // 20230708 TraceLog【纪明】 追加 End
                                                }

                                            }
                                            progressListener.Complete();

                                            // 20220803 PLC状态监控 追加 Start
                                            normalBoardOutstopwatch.Stop();
                                            // 20220803 PLC状态监控 追加 End
                                            Holly.Log.HlLogger.Write("HOLLY AOI ====> ExportMainShopfloorManager Error Board Out Normal End");

                                            // 20230708 TraceLog【纪明】 追加 Start
                                            LogManagerComm.Current.OutputLog(LogManagerComm.TRACE_LOG, DateTimeUtils.GetNow(DateTimeUtils.DATE_FORMAT1) + "\t" + "HOLLY AOI ====> Board Out Normal End ");
                                            // 20230708 TraceLog【纪明】 追加 End
                                            #endregion
                                        }
                                        #endregion
                                        // 20240304 太原LQ修改 【王晨】 追加 Start
                                    }
                                    // 20240304 太原LQ修改 【王晨】 追加 End

                                }
                            }
                            //20230521 MES标准化 【曹志鹏】 追加 End

                            if (AutoRunSettings.Default.IsLocalCommit || AutoRunSettings.Default.IsLocalAndRepairCommit)
                            {
                                if (AutoRunSettings.Default.IsAutoVerificationEnabled)
                                {
                                    //海信自动确认
                                    // 20240711 太原出差修改 【王晨】 修改 Start
                                    //bool hasReport = false;
                                    //while (!hasReport)
                                    //{
                                    //    if (context.StopFlag)
                                    //        return ExitState.Current;

                                    //    System.Threading.Thread.Sleep(100);
                                    //    hasReport = (GlobalDataManager.Current.IsPassOK1 != string.Empty || reportManager.HasReport); //reportManager.HasReport && reportManager.RailID == 1;
                                    //}

                                    //if (GlobalDataManager.Current.IsPassOK1 == "PASS" || reportManager.IsPassOK)
                                    //{
                                    //    isAlarmBuzzer = 0;
                                    //}
                                    //else
                                    //{
                                    //    isAlarmBuzzer = 2;
                                    //}

                                    //TCL本机确认报警错乱对应
                                    if (MachineParams.Current.InlineMachine.IsDoubleRail)
                                    {
                                        bool hasReport = false;
                                        while (!hasReport)
                                        {
                                            if (context.StopFlag)
                                                return ExitState.Current;

                                            System.Threading.Thread.Sleep(100);
                                            //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 Start
                                            //hasReport = (GlobalDataManager.Current.IsPassOK1 != string.Empty || reportManager.HasReport); //reportManager.HasReport && reportManager.RailID == 1;
                                            hasReport = (GlobalDataManager.Current.IsPassOK1 != string.Empty || reportManager.HasReport(1)); //reportManager.HasReport && reportManager.RailID == 1;
                                                                                                                                             //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 End
                                        }

                                        //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 Start
                                        //if (GlobalDataManager.Current.IsPassOK1 == "PASS" || reportManager.IsPassOK)
                                        if (GlobalDataManager.Current.IsPassOK1 == "PASS" || reportManager.IsPassOK(1))
                                        //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 End
                                        {
                                            isAlarmBuzzer = 0;
                                        }
                                        else
                                        {
                                            isAlarmBuzzer = 2;
                                        }
                                    }
                                    else
                                    {
                                        bool hasReport = false;
                                        HeartBeatUtils boardOutHeartBeat2 = new HeartBeatUtils(2);
                                        while (!hasReport)
                                        {
                                            if (boardOutHeartBeat2.IsOutput())
                                            {
                                                Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) hasReport Complete......");
                                            }
                                            if (context.StopFlag)
                                                return ExitState.Current;

                                            System.Threading.Thread.Sleep(100);
                                            //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 Start
                                            //hasReport = (GlobalDataManager.Current.IsPassOK1 != string.Empty || reportManager.HasReport); //reportManager.HasReport && reportManager.RailID == 1;
                                            hasReport = (GlobalDataManager.Current.IsPassOK1 != string.Empty || reportManager.HasReport(1)); //reportManager.HasReport && reportManager.RailID == 1;
                                            //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 End
                                        }
                                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) GlobalDataManager.Current.IsPassOK1=" + GlobalDataManager.Current.IsPassOK1);
                                        //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 Start
                                        //if (GlobalDataManager.Current.IsPassOK1 == "PASS" || reportManager.IsPassOK)
                                        if (GlobalDataManager.Current.IsPassOK1 == "PASS" || reportManager.IsPassOK(1))
                                        //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 End
                                        {
                                            isAlarmBuzzer = 0;
                                        }
                                        else
                                        {
                                            isAlarmBuzzer = 2;
                                        }
                                    }
                                    // 20240711 太原出差修改 【王晨】 修改 End
                                }
                                else
                                {
                                    bool hasReport = false;
                                    while (!hasReport)
                                    {
                                        if (context.StopFlag)
                                            return ExitState.Current;

                                        System.Threading.Thread.Sleep(50);
                                        //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 Start
                                        //hasReport = reportManager.HasReport && reportManager.RailID == 1;
                                        hasReport = reportManager.HasReport(1) && reportManager.RailID(1) == 1;
                                        //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 End
                                    }
                                    //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 Start
                                    //isAlarmBuzzer = reportManager.IsAlarmBuzzer;
                                    isAlarmBuzzer = reportManager.IsAlarmBuzzer(1);
                                    //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 End
                                }
                            }
                            else
                            {
                                Stopwatch timeoutStopwatch = Stopwatch.StartNew();
                                TimeSpan timeout = new TimeSpan(0, 0, Customization.Current.DatabaseTimeout);

                                //20230321 江西奥海：双轨双头2轨不报警板不能正常出板异常对应 【曹志鹏】 修改 Start
                                //Holly.Log.HlLogger.Write("HOLLY AOI ============> GlobalDataManager.Current.AlarmBuzzerRail1 before = " + GlobalDataManager.Current.AlarmBuzzerRail1);
                                //while (isAlarmBuzzer == -1)
                                //{
                                //    if (context.StopFlag)
                                //        return ExitState.Current;

                                //    if (timeoutStopwatch.Elapsed >= timeout)
                                //    {
                                //        isTimeOut = true;
                                //        GlobalDataManager.Current.AlarmBuzzerRail1 = 9;
                                //        Holly.Log.HlLogger.Write("HOLLY AOI ============> GlobalDataManager.Current.AlarmBuzzerRail1 timeout");
                                //    }

                                //    isAlarmBuzzer = GlobalDataManager.Current.AlarmBuzzerRail1;
                                //    System.Threading.Thread.Sleep(100);
                                //}
                                //timeoutStopwatch.Stop();
                                //Holly.Log.HlLogger.Write("HOLLY AOI ============> GlobalDataManager.Current.AlarmBuzzerRail1 after = " + GlobalDataManager.Current.AlarmBuzzerRail1);
                                //if (GlobalDataManager.Current.AlarmBuzzerRail1 == 9)
                                //{
                                //     isTimeOut = true;
                                //}
                                ////timeoutStopwatch.Stop();
                                //GlobalDataManager.Current.AlarmBuzzerRail1 = -1;
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> MachineParams.Current.InlineMachine.IsDoubleRail = " + MachineParams.Current.InlineMachine.IsDoubleRail);
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> MachineParams.Current.InlineMachine.IsSingleHead = " + MachineParams.Current.InlineMachine.IsSingleHead);
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> MachineParams.Current.InlineMachine.IsFourthRailFixed = " + MachineParams.Current.InlineMachine.IsFourthRailFixed);
                                if (MachineParams.Current.InlineMachine.IsDoubleRail && !MachineParams.Current.InlineMachine.IsSingleHead && MachineParams.Current.InlineMachine.IsFourthRailFixed)
                                {
                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> GlobalDataManager.Current.AlarmBuzzerRail2 before = " + GlobalDataManager.Current.AlarmBuzzerRail2);
                                    while (isAlarmBuzzer == -1)
                                    {
                                        if (context.StopFlag)
                                            return ExitState.Current;

                                        if (timeoutStopwatch.Elapsed >= timeout)
                                        {
                                            isTimeOut = true;
                                            GlobalDataManager.Current.AlarmBuzzerRail2 = 9;
                                            Holly.Log.HlLogger.Write("HOLLY AOI ============> GlobalDataManager.Current.AlarmBuzzerRail2 timeout");
                                        }

                                        isAlarmBuzzer = GlobalDataManager.Current.AlarmBuzzerRail2;
                                        System.Threading.Thread.Sleep(100);
                                    }
                                    timeoutStopwatch.Stop();
                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> GlobalDataManager.Current.AlarmBuzzerRail2 after = " + GlobalDataManager.Current.AlarmBuzzerRail2);
                                    if (GlobalDataManager.Current.AlarmBuzzerRail2 == 9)
                                    {
                                        isTimeOut = true;
                                    }
                                    //timeoutStopwatch.Stop();
                                    GlobalDataManager.Current.AlarmBuzzerRail2 = -1;
                                }
                                else
                                {
                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> GlobalDataManager.Current.AlarmBuzzerRail1 before = " + GlobalDataManager.Current.AlarmBuzzerRail1);
                                    //Log4Net.Info("HOLLY AOI ============> GlobalDataManager.Current.AlarmBuzzerRail1 before = " + GlobalDataManager.Current.AlarmBuzzerRail1);
                                    while (isAlarmBuzzer == -1)
                                    {
                                        if (context.StopFlag)
                                            return ExitState.Current;

                                        if (timeoutStopwatch.Elapsed >= timeout)
                                        {
                                            isTimeOut = true;
                                            GlobalDataManager.Current.AlarmBuzzerRail1 = 9;
                                            Holly.Log.HlLogger.Write("HOLLY AOI ============> GlobalDataManager.Current.AlarmBuzzerRail1 timeout");
                                            //Log4Net.Warn("HOLLY AOI ============> GlobalDataManager.Current.AlarmBuzzerRail1 timeout");
                                        }

                                        isAlarmBuzzer = GlobalDataManager.Current.AlarmBuzzerRail1;
                                        System.Threading.Thread.Sleep(100);
                                    }
                                    timeoutStopwatch.Stop();
                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> GlobalDataManager.Current.AlarmBuzzerRail1 after = " + GlobalDataManager.Current.AlarmBuzzerRail1);
                                    //Log4Net.Info("HOLLY AOI ============> GlobalDataManager.Current.AlarmBuzzerRail1 after = " + GlobalDataManager.Current.AlarmBuzzerRail1);
                                    if (GlobalDataManager.Current.AlarmBuzzerRail1 == 9)
                                    {
                                        isTimeOut = true;
                                    }
                                    //timeoutStopwatch.Stop();

                                    #region 删除
                                    // 20241217 鹏鼎双panel报警异常修复 【ygs】 删除 Start
                                    // 20240807 鹏鼎左拼板报警、右拼板不报警 【范克文】 追加 Start
                                    //if (MachineParams.Current.InlineMachine.MultiProgramMarkAutoCheck)
                                    //{
                                    //    timeoutStopwatch.Restart();
                                    //    Holly.Log.HlLogger.Write("HOLLY AOI ============> GlobalDataManager.Current.AlarmBuzzerRail1MultPanel before = " + GlobalDataManager.Current.AlarmBuzzerRail1MultPanel);
                                    //    //Log4Net.Info("HOLLY AOI ============> GlobalDataManager.Current.AlarmBuzzerRail1MultPanel before = " + GlobalDataManager.Current.AlarmBuzzerRail1MultPanel);
                                    //    while (isAlarmBuzzerMultPanel == -1)
                                    //    {
                                    //        if (context.StopFlag)
                                    //            return ExitState.Current;

                                    //        if (timeoutStopwatch.Elapsed >= timeout)
                                    //        {
                                    //            isTimeOut = true;
                                    //            GlobalDataManager.Current.AlarmBuzzerRail1MultPanel = 9;
                                    //            Holly.Log.HlLogger.Write("HOLLY AOI ============> GlobalDataManager.Current.AlarmBuzzerRail1MultPanel timeout");
                                    //            //Log4Net.Warn("HOLLY AOI ============> GlobalDataManager.Current.AlarmBuzzerRail1MultPanel timeout");
                                    //        }

                                    //        isAlarmBuzzerMultPanel = GlobalDataManager.Current.AlarmBuzzerRail1MultPanel;
                                    //        System.Threading.Thread.Sleep(100);
                                    //    }
                                    //    timeoutStopwatch.Stop();
                                    //    Holly.Log.HlLogger.Write("HOLLY AOI ============> GlobalDataManager.Current.AlarmBuzzerRail1MultPanel after = " + GlobalDataManager.Current.AlarmBuzzerRail1MultPanel);
                                    //    //Log4Net.Info("HOLLY AOI ============> GlobalDataManager.Current.AlarmBuzzerRail1MultPanel after = " + GlobalDataManager.Current.AlarmBuzzerRail1MultPanel);
                                    //    if (GlobalDataManager.Current.AlarmBuzzerRail1MultPanel == 9)
                                    //    {
                                    //        isTimeOut = true;
                                    //    }
                                    //    //timeoutStopwatch.Stop();
                                    //    GlobalDataManager.Current.AlarmBuzzerRail1MultPanel = -1;
                                    //}
                                    // 20240807 鹏鼎左拼板报警、右拼板不报警 【范克文】 追加 End
                                    // 20241217 鹏鼎双panel报警异常修复 【ygs】 删除 Start
                                    #endregion

                                    // 20241217 鹏鼎双panel报警异常修复 【ygs】 追加 Start
                                    if (MachineParams.Current.InlineMachine.MultiProgramMarkAutoCheck)
                                    {
                                        Stopwatch timeoutStopwatchMutil = Stopwatch.StartNew();
                                        TimeSpan timeoutMutil = new TimeSpan(0, 0, 60);
                                        bool isTimeout = false;
                                        //生成结果在出板
                                        while (!GlobalDataManager.Current.IsExceedeAlarmQty)
                                        {
                                            if (context.StopFlag)
                                                return ExitState.Current;

                                            if (GlobalDataManager.Current.AlarmPopList?.Count == GlobalDataManager.Current.ProCount)
                                            {
                                                int count = GlobalDataManager.Current.AlarmPopList.Where(p => p.Equals("1")).Count();
                                                if (count > 0)
                                                {
                                                    isAlarmBuzzer = 2;
                                                }
                                                else
                                                {
                                                    isAlarmBuzzer = 0;
                                                    GlobalDataManager.Current.AlarmPopList.Clear();
                                                }
                                                GlobalDataManager.Current.IsExceedeAlarmQty = true;

                                            }
                                            /// 卡关失败退出
                                            /// 卡关失败/下载脚印失败
                                            else if (ExportZdtcoNGInfoManager.Current.CheckAOIStateResult || !string.IsNullOrEmpty(ExportZdtcoNGInfoManager.Current.GetSPINGInfoNGmsg))
                                            {
                                                GlobalDataManager.Current.IsExceedeAlarmQty = true;
                                            }
                                            if (timeoutStopwatchMutil.Elapsed >= timeoutMutil)
                                            {
                                                GlobalDataManager.Current.IsExceedeAlarmQty = true;
                                                break;
                                            }
                                            Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.GO MultiProgramMarkAutoCheck Wait.........");
                                            System.Threading.Thread.Sleep(100);
                                        }
                                    }
                                    // 20241217 鹏鼎双panel报警异常修复 【ygs】 追加 End
                                    GlobalDataManager.Current.AlarmBuzzerRail1 = -1;
                                }
                                //20230321 江西奥海：双轨双头2轨不报警板不能正常出板异常对应 【曹志鹏】 修改 End
                            }
                            //bool hasReport = false;
                            //while (!hasReport)
                            //{
                            //    System.Threading.Thread.Sleep(50);
                            //    hasReport = reportManager.HasReport;
                            //}
                            //int isAlarmBuzzer = 0;// reportManager.IsAlarmBuzzer;
                            //isAlarmBuzzer = reportManager.IsAlarmBuzzer;

                            // 20201009 秦皇岛AOI卡关追溯 追加 Start
                            if (ExportZdtcoNGInfoManager.Current.CheckAOIStateResult)
                            {
                                op.ClearLampBlink();
                                op.SetRedAndBuzzer();
                                opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                opResult.Wait();

                                UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                    new Action(
                                        delegate ()
                                        {
                                            // 20240406 启动屏幕录制程序 追加 Start  
                                            Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.AlarmBuzzer SocketScreenRecorder Start");

                                            SocketScreenRecorder.Current.clientSendStart();
                                            Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.AlarmBuzzer SocketScreenRecorder End");

                                            // 20240406 启动屏幕录制程序 追加 End
                                            Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.AlarmBuzzer SocketScreenRecorder AlarmShow Start");

                                            IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                            messageManager.ShowError("SMT制程管控:" + string.Join(",", ExportZdtcoNGInfoManager.Current.CheckAOIStateNGmsg));
                                            Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.AlarmBuzzer SocketScreenRecorder AlarmShow End");

                                            //Log4Net.Warn("SMT制程管控:" + ExportZdtcoNGInfoManager.Current.CheckAOIStateNGmsg);
                                        }));

                                IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                IOperationResult opResult2 = null;
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.AlarmBuzzer after 1");

                                op2.SetBuzzer(false);
                                opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                opResult2.Wait();
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.AlarmBuzzer after 2");

                                ExportZdtcoNGInfoManager.Current.CheckAOIStateResult = false;
                                ExportZdtcoNGInfoManager.Current.CheckAOIStateNGmsg.Clear();
                                // 20221013 淮安鹏鼎过站失败不生成结果 追加 Start
                                //GlobalDataManager.Current.UnitedAutomotiveError = true;
                                // 20221013 淮安鹏鼎过站失败不生成结果 追加 End
                                Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> ExportZdtcoNGInfoManager Check AOI State Result !");
                                //Log4Net.Warn("HOLLY AOI DesyncState============> ExportZdtcoNGInfoManager Check AOI State Result !");
                                // 20230209 E05区分 追加 Start   
                                GlobalDataManager.Current.EquipmentErrorCode = "E42";//AOI卡关追溯
                                Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                //Log4Net.Warn("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                // 20230209 E05区分 追加 End 
                                //20230706  查找E05 【徐明武】 修改 Start
                                //return DesyncState.Current;
                                {
                                    Holly.Log.HlLogger.Write("E05 => 48 ");
                                    return DesyncState.Current;
                                }
                                //20230706  查找E05 【徐明武】 修改 End 
                            }
                            // 20201009 秦皇岛AOI卡关追溯 追加 End

                            //臻鼎 LinK不到脚印信息报警
                            if (Customization.Current.ZdtcoSPINGInfo.IsEnabled && Customization.Current.ZdtcoSPINGInfo.IsAlarmNotLink && GlobalDataManager.Current.ZdtcoSPINGInfo == string.Empty && !string.IsNullOrEmpty(ExportZdtcoNGInfoManager.Current.GetSPINGInfoNGmsg))
                            {
                                Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> Zdtco SPI Link Alarm Msg GetSPINGInfoNGmsg = " + ExportZdtcoNGInfoManager.Current.GetSPINGInfoNGmsg);
                                op.ClearLampBlink();
                                op.SetRedAndBuzzer();
                                opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                opResult.Wait();

                                UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                    new Action(
                                        delegate ()
                                        {
                                            // 20240406 启动屏幕录制程序 追加 Start                                                    
                                            SocketScreenRecorder.Current.clientSendStart();
                                            // 20240406 启动屏幕录制程序 追加 End
                                            IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                            // 20201119 脚印信息下载异常 修改 Start
                                            //messageManager.ShowError("Link不到脚印信息");

                                            messageManager.ShowError("Link不到脚印信息: " + ExportZdtcoNGInfoManager.Current.GetSPINGInfoNGmsg);
                                            // 20201119 脚印信息下载异常 修改 End
                                        }));

                                IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                IOperationResult opResult2 = null;

                                op2.SetBuzzer(false);
                                opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                opResult2.Wait();

                                GlobalDataManager.Current.ZdtcoSPINGInfo = string.Empty;

                                Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> Zdtco SPI Link Alarm");
                                //Log4Net.Warn("HOLLY AOI DesyncState============> Zdtco SPI Link Alarm");
                                // 20230209 E05区分 追加 Start   
                                GlobalDataManager.Current.EquipmentErrorCode = "E43";//Link不到脚印信息
                                Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                //Log4Net.Warn("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                // 20230209 E05区分 追加 End 
                                //20230706  查找E05 【徐明武】 修改 Start
                                //return DesyncState.Current;
                                {
                                    Holly.Log.HlLogger.Write("E05 => 49 ");
                                    return DesyncState.Current;
                                }
                                //20230706  查找E05 【徐明武】 修改 End 
                            }

                            //臻鼎
                            if (Customization.Current.ZdtcoSPINGInfo.IsCKHour && GlobalDataManager.Current.ZdtcoCKTime)
                            {
                                //bool ckResult = false;
                                //if (GlobalDataManager.Current.CKHourResult.Count > 0)
                                //{
                                //    ckResult = GlobalDataManager.Current.CKHourResult.First();
                                //    GlobalDataManager.Current.CKHourResult.RemoveAt(0);
                                //    Holly.Log.HlLogger.Write("HOLLY AOI ============> GlobalDataManager.Current.CKHourResult.First = " + ckResult);
                                //}
                                //if (ckResult)
                                //{
                                op.ClearLampBlink();
                                op.SetRedAndBuzzer();
                                opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                opResult.Wait();

                                UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                    new Action(
                                        delegate ()
                                        {
                                            // 20240406 启动屏幕录制程序 追加 Start                                                    
                                            SocketScreenRecorder.Current.clientSendStart();
                                            // 20240406 启动屏幕录制程序 追加 End
                                            IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                            messageManager.ShowError("条码 " + GlobalDataManager.Current.ZdtcoCKTimeBarcode + " SPI生产时间超长！");
                                            //Log4Net.Warn("条码 " + GlobalDataManager.Current.ZdtcoCKTimeBarcode + " SPI生产时间超长！");
                                            //messageManager.ShowError("SPI生产时间超长！");
                                        }));

                                IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                IOperationResult opResult2 = null;

                                op2.SetBuzzer(false);
                                opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                opResult2.Wait();

                                GlobalDataManager.Current.ZdtcoCKTime = false;
                                GlobalDataManager.Current.ZdtcoCKTimeBarcode = string.Empty;

                                Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> Zdtco SPI Check Time");
                                //Log4Net.Warn("HOLLY AOI DesyncState============> Zdtco SPI Check Time");
                                // 20230209 E05区分 追加 Start   
                                GlobalDataManager.Current.EquipmentErrorCode = "E44";//生产时间超长
                                Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                //Log4Net.Warn("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                // 20230209 E05区分 追加 End 
                                //20230706  查找E05 【徐明武】 修改 Start
                                //return DesyncState.Current;
                                {
                                    Holly.Log.HlLogger.Write("E05 => 50 ");
                                    return DesyncState.Current;
                                }
                                //20230706  查找E05 【徐明武】 修改 End 
                                //}
                            }

                            //臻鼎 AOI替代信息串联机
                            if (Customization.Current.ZdtcoAOIReplaceInfo.IsEnabled && GlobalDataManager.Current.ZdtcoAOIReplaceInfo != "1")
                            {

                                op.ClearLampBlink();
                                op.SetRedAndBuzzer();
                                opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                opResult.Wait();

                                UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                    new Action(
                                        delegate ()
                                        {
                                            // 20240406 启动屏幕录制程序 追加 Start                                                    
                                            SocketScreenRecorder.Current.clientSendStart();
                                            // 20240406 启动屏幕录制程序 追加 End
                                            IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                            messageManager.ShowError("AOI替代信息串联机错误：" + GlobalDataManager.Current.ZdtcoAOIReplaceInfo);
                                            //Log4Net.Warn("AOI替代信息串联机错误：" + GlobalDataManager.Current.ZdtcoAOIReplaceInfo);
                                            //messageManager.ShowError("SPI生产时间超长！");
                                        }));

                                IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                IOperationResult opResult2 = null;

                                op2.SetBuzzer(false);
                                opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                opResult2.Wait();

                                GlobalDataManager.Current.ZdtcoAOIReplaceInfo = string.Empty;

                                Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> ZdtcoAOIReplaceInfo");
                                //Log4Net.Warn("HOLLY AOI DesyncState============> ZdtcoAOIReplaceInfo");
                                // 20230209 E05区分 追加 Start   
                                GlobalDataManager.Current.EquipmentErrorCode = "E45";//AOI替代信息串联机错误
                                Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                //Log4Net.Warn("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                // 20230209 E05区分 追加 End 
                                //20230706  查找E05 【徐明武】 修改 Start
                                //return DesyncState.Current;
                                {
                                    Holly.Log.HlLogger.Write("E05 => 51 ");
                                    return DesyncState.Current;
                                }
                                //20230706  查找E05 【徐明武】 修改 End 
                                //}
                            }

                            //臻鼎 LinK脚印PCs数量与检测程式PCs数量不一致报警
                            if (Customization.Current.ZdtcoSPINGInfo.IsEnabled && Customization.Current.ZdtcoSPINGInfo.IsAlarmPCsNotMatch && !GlobalDataManager.Current.ZdtcoSPINGInfoPCsMatch)
                            {
                                op.ClearLampBlink();
                                op.SetRedAndBuzzer();
                                opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                opResult.Wait();

                                UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                    new Action(
                                        delegate ()
                                        {
                                            // 20240406 启动屏幕录制程序 追加 Start                                                    
                                            SocketScreenRecorder.Current.clientSendStart();
                                            // 20240406 启动屏幕录制程序 追加 End
                                            IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                            messageManager.ShowError("Link脚印PCs数量与检测程式PCs数量不一致");
                                            //Log4Net.Warn("Link脚印PCs数量与检测程式PCs数量不一致");
                                        }));

                                IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                IOperationResult opResult2 = null;

                                op2.SetBuzzer(false);
                                opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                opResult2.Wait();

                                GlobalDataManager.Current.ZdtcoSPINGInfoPCsMatch = true;

                                Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> Zdtco SPI Link Alarm PCs not match");
                                //Log4Net.Warn("HOLLY AOI DesyncState============> Zdtco SPI Link Alarm PCs not match");
                                // 20230209 E05区分 追加 Start   
                                GlobalDataManager.Current.EquipmentErrorCode = "E46";//Link脚印PCs数量与检测程式PCs数量不一致
                                Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                // 20230209 E05区分 追加 End 
                                //20230706  查找E05 【徐明武】 修改 Start
                                //return DesyncState.Current;
                                {
                                    Holly.Log.HlLogger.Write("E05 => 52 ");
                                    return DesyncState.Current;
                                }
                                //20230706  查找E05 【徐明武】 修改 End 
                            }
                            //20231229 鹏鼎脚印不报警 【李逸凡】 追加 Start
                            if (Customization.Current.ZdtcoMisMatchShopfloor.IsEnabled && Customization.Current.ZdtcoMisMatchShopfloor.IsZdtcoMisMatch && !GlobalDataManager.Current.ZdtcoMisMatch)
                            {
                                op.ClearLampBlink();
                                op.SetRedAndBuzzer();
                                opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                opResult.Wait();

                                UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                    new Action(
                                        delegate ()
                                        {
                                            // 20240406 启动屏幕录制程序 追加 Start                                                    
                                            SocketScreenRecorder.Current.clientSendStart();
                                            // 20240406 启动屏幕录制程序 追加 End
                                            IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                            messageManager.ShowError("拼板元件个数对不上，请查阅log信息");
                                        }));

                                IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                IOperationResult opResult2 = null;

                                op2.SetBuzzer(false);
                                opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                opResult2.Wait();

                                GlobalDataManager.Current.ZdtcoMisMatch = true;

                                Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> Zdtco SPI BlockComponent not match");
                                // 20230209 E05区分 追加 Start   
                                GlobalDataManager.Current.EquipmentErrorCode = "E46";//Link脚印PCs数量与检测程式PCs数量不一致
                                Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                // 20230209 E05区分 追加 End 
                                //20230706  查找E05 【徐明武】 修改 Start
                                //return DesyncState.Current;
                                {
                                    Holly.Log.HlLogger.Write("E05 => 52 ");
                                    return DesyncState.Current;
                                }
                                //20230706  查找E05 【徐明武】 修改 End 
                            }
                            //20231229 鹏鼎脚印不报警 【李逸凡】 追加 End
                            // 20231110 整板图报警 【ygs】 追加 Start
                            if (AutoRunSettings.Default.IsFullPageBigmapEnabled)
                            {
                                if (!string.IsNullOrEmpty(GlobalDataManager.Current.FullPageBitmap))
                                    WaitVerify(m, GlobalDataManager.Current.FullPageBitmap);
                            }
                            // 20231110 整板图报警 【ygs】 追加 End
                            #region 删除
                            ////衡阳富士康
                            //if (Customization.Current.HengYangFoxconn.IsEnabled && GlobalDataManager.Current.HengYangFoxconnReturn.ToUpper() != "TRUE")
                            //{

                            //    op.ClearLampBlink();
                            //    op.SetRedAndBuzzer();
                            //    opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                            //    opResult.Wait();

                            //    UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                            //        new Action(
                            //            delegate ()
                            //            {
                            //                IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                            //                messageManager.ShowError("衡阳SN识别错误：" + GlobalDataManager.Current.HengYangFoxconnReturn);
                            //                //messageManager.ShowError("SPI生产时间超长！");
                            //            }));

                            //    IBatchOperationInline op2 = m.CreateBatchOperationInline();
                            //    IOperationResult opResult2 = null;

                            //    op2.SetBuzzer(false);
                            //    opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                            //    opResult2.Wait();

                            //    GlobalDataManager.Current.HengYangFoxconnReturn = string.Empty;

                            //    Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> HengYangFoxconn");
                            //    return DesyncState.Current;
                            //    //}
                            //}
                            #endregion

                            //臻鼎 PLASMA作业系统
                            if (Customization.Current.ZdtcoPLASMA.IsEnabled && GlobalDataManager.Current.ZdtcoPLASMA != "")
                            {

                                op.ClearLampBlink();
                                op.SetRedAndBuzzer();
                                opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                opResult.Wait();

                                UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                    new Action(
                                        delegate ()
                                        {
                                            // 20240406 启动屏幕录制程序 追加 Start                                                    
                                            SocketScreenRecorder.Current.clientSendStart();
                                            // 20240406 启动屏幕录制程序 追加 End
                                            IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                            messageManager.ShowError("PLASMA作业系统错误：" + GlobalDataManager.Current.ZdtcoPLASMA);
                                            //Log4Net.Warn("PLASMA作业系统错误：" + GlobalDataManager.Current.ZdtcoPLASMA);
                                            //messageManager.ShowError("SPI生产时间超长！");
                                        }));

                                IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                IOperationResult opResult2 = null;

                                op2.SetBuzzer(false);
                                opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                opResult2.Wait();

                                GlobalDataManager.Current.ZdtcoAOIReplaceInfo = string.Empty;

                                Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> ZdtcoPLASMA");
                                //Log4Net.Warn("HOLLY AOI DesyncState============> ZdtcoPLASMA");
                                // 20230209 E05区分 追加 Start   
                                GlobalDataManager.Current.EquipmentErrorCode = "E47";//PLASMA作业系统错误
                                Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                //Log4Net.Warn("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                // 20230209 E05区分 追加 End 
                                //20230706  查找E05 【徐明武】 修改 Start
                                //return DesyncState.Current;
                                {
                                    Holly.Log.HlLogger.Write("E05 => 53 ");
                                    return DesyncState.Current;
                                }
                                //20230706  查找E05 【徐明武】 修改 End 
                                //}
                            }
                            // 20200318 检测正常不出板故障对应 追加 Start
                            // 故障现象：测试OK的板子不出板死等
                            // 故障原因：reportManager.IsBarcodeReadable 判断时，OK的检测数据已经删除，无法判定，造成死等

                            // 20240411 兆驰偏心距不良报警【陆志福】修改 Start
                            //if (GlobalDataManager.Current.IsPassOK1 != "PASS")
                            Holly.Log.HlLogger.Write("HOLLY AOI ============> StateTransitionVisitor.GoState GlobalDataManager.Current.IsExceedeAlarmQty = " + GlobalDataManager.Current.IsExceedeAlarmQty);
                            Holly.Log.HlLogger.Write("HOLLY AOI ============> StateTransitionVisitor.GoState isAlarmBuzzer = " + isAlarmBuzzer);

                            //20241121 鹏鼎大脚印跳叉板导致报警超限误报修正【曹志鹏】修改 Start
                            //if (GlobalDataManager.Current.IsPassOK1 != "PASS" || EventSignals.CenterDeviationTestSignal.Instance.HasAlarm || GlobalDataManager.Current.IsExceedeAlarmQty)
                            //20241125 江西奥海双轨双头2轨出板异常修正【曹志鹏】修改 Start
                            //if (GlobalDataManager.Current.IsPassOK1 != "PASS" || EventSignals.CenterDeviationTestSignal.Instance.HasAlarm)
                            bool needAlarm = false;
                            if (MachineParams.Current.InlineMachine.IsDoubleRail && !MachineParams.Current.InlineMachine.IsSingleHead && MachineParams.Current.InlineMachine.IsFourthRailFixed)
                            {
                                needAlarm = GlobalDataManager.Current.IsPassOK2 != "PASS";
                            }
                            else
                            {
                                needAlarm = GlobalDataManager.Current.IsPassOK1 != "PASS";
                            }
                           
                            if (needAlarm || EventSignals.CenterDeviationTestSignal.Instance.HasAlarm|| GlobalDataManager.Current.IsExceedeAlarmQty)
                            //20241125 江西奥海双轨双头2轨出板异常修正【曹志鹏】修改 End
                            //20241121 鹏鼎大脚印跳叉板导致报警超限误报修正【曹志鹏】修改 End
                            // 20240411 兆驰偏心距不良报警【陆志福】修改 End
                            {
                                Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> IsBarcodeUnreadableBuzzerEnabled Start");
                                //Log4Net.Info("HOLLY AOI DesyncState============> IsBarcodeUnreadableBuzzerEnabled Start");

                                // 20200318 检测正常不出板故障对应 追加 End
                                //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 Start      
                                //if (AutoRunSettings.Default.IsBarcodeUnreadableBuzzerEnabled && !reportManager.IsBarcodeReadable)
                                if (AutoRunSettings.Default.IsBarcodeUnreadableBuzzerEnabled)
                                //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 End
                                {
                                    Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> AutoRunSettings.Default.IsBarcodeUnreadableBuzzerEnabled =" + AutoRunSettings.Default.IsBarcodeUnreadableBuzzerEnabled);
                                    // 20241218 多panel读不到码报警 【ygs】 追加 Start
                                    if (MachineParams.Current.InlineMachine.MultiProgramMarkAutoCheck)
                                    {
                                        if (!reportManager.IsMultiBarcodeReadabled(checkRailID))
                                        {
                                            op.ClearLampBlink();
                                            op.SetRedAndBuzzer();
                                            opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                            opResult.Wait();
                                            // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                            ExportShanWeiWatchBoardBYDShopfloorManager.Current.WriteAlarm(1, Lang.UI.UI_Label_BarcodeUnreadable, DateTime.Now);
                                            // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End
                                            //while ((m.InputStatusInline & InputStatusInline.BoardIn) != 0 || (m.InputStatusInline & InputStatusInline.SlowDown) != 0 || (m.InputStatusInline & InputStatusInline.Stopper) != 0 || (m.InputStatusInline & InputStatusInline.BoardOut) != 0)
                                            //{
                                            UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                                new Action(
                                                    delegate ()
                                                    {
                                                        //20230717 log输出【ygs】 Start 
                                                        ExportLogOuputManager.Current.OuputLog(11, Lang.UI.UI_Label_BarcodeUnreadable);
                                                        //20230717 log输出【ygs】 End
                                                        // 20240406 启动屏幕录制程序 追加 Start                                                    
                                                        SocketScreenRecorder.Current.clientSendStart();
                                                        // 20240406 启动屏幕录制程序 追加 End

                                                        // 20250221 报警后提供排查原因 【ygs】 追加 Start
                                                        string errorContent = ExportCommonShopfloorManager.Current.GetAlarmStr(3);
                                                        // 20250221 报警后提供排查原因 【ygs】 追加 End

                                                        IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                                        messageManager.ShowError(Lang.UI.UI_Label_BarcodeUnreadable+errorContent);
                                                    }));

                                            IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                            IOperationResult opResult2 = null;

                                            op2.SetBuzzer(false);
                                            opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                            opResult2.Wait();

                                            // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                            ExportShanWeiWatchBoardBYDShopfloorManager.Current.UpdateAlarm(3, Lang.UI.UI_Label_BarcodeUnreadable, DateTime.Now);
                                            // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End

                                            Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> IsBarcodeUnreadableBuzzerEnabled");
                                            //Log4Net.Info("HOLLY AOI DesyncState============> IsBarcodeUnreadableBuzzerEnabled");
                                            // 20230209 E05区分 追加 Start   
                                            GlobalDataManager.Current.EquipmentErrorCode = "E48";//不出板故障报警
                                            Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) IsBarcodeUnreadableBuzzerEnabled: EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                            // 20230209 E05区分 追加 End 

                                            // 20240613 太原报警停机增加权限解锁功能 【王晨】 追加 Start
                                            ExportCommonShopfloorManager.Current.ShowDialog();
                                            // 20240613 太原报警停机增加权限解锁功能 【王晨】 追加 End

                                            // 20240304 太原LQ修改 【王晨】 追加 Start
                                            //if (Customization.Current.IsNoBoardOutNG)
                                            //{
                                            //    return ExitState.Current;
                                            //}
                                            // 20240304 太原LQ修改 【王晨】 追加 End

                                            //20230706  查找E05 【徐明武】 修改 Start
                                            //return DesyncState.Current;
                                            Holly.Log.HlLogger.Write("E05 => 54 ");
                                            return DesyncState.Current;
                                            //20230706  查找E05 【徐明武】 修改 End 
                                        }
                                    }
                                    else
                                    {
                                        // 20241218 多panel读不到码报警 【ygs】 追加 End
                                        if (!reportManager.IsBarcodeReadable(checkRailID))
                                        {
                                            op.ClearLampBlink();
                                            op.SetRedAndBuzzer();
                                            opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                            opResult.Wait();
                                            // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                            ExportShanWeiWatchBoardBYDShopfloorManager.Current.WriteAlarm(1, Lang.UI.UI_Label_BarcodeUnreadable, DateTime.Now);
                                            // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End
                                            //while ((m.InputStatusInline & InputStatusInline.BoardIn) != 0 || (m.InputStatusInline & InputStatusInline.SlowDown) != 0 || (m.InputStatusInline & InputStatusInline.Stopper) != 0 || (m.InputStatusInline & InputStatusInline.BoardOut) != 0)
                                            //{
                                            UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                                new Action(
                                                    delegate ()
                                                    {
                                                    //20230717 log输出【ygs】 Start 
                                                    ExportLogOuputManager.Current.OuputLog(11, Lang.UI.UI_Label_BarcodeUnreadable);
                                                    //20230717 log输出【ygs】 End
                                                    // 20240406 启动屏幕录制程序 追加 Start                                                    
                                                    SocketScreenRecorder.Current.clientSendStart();
                                                        // 20240406 启动屏幕录制程序 追加 End

                                                        // 20250221 报警后提供排查原因 【ygs】 追加 Start
                                                        string errorContent = ExportCommonShopfloorManager.Current.GetAlarmStr(3);
                                                        // 20250221 报警后提供排查原因 【ygs】 追加 End

                                                        IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                                        messageManager.ShowError(Lang.UI.UI_Label_BarcodeUnreadable+errorContent);
                                                    }));

                                            IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                            IOperationResult opResult2 = null;

                                            op2.SetBuzzer(false);
                                            opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                            opResult2.Wait();

                                            // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                            ExportShanWeiWatchBoardBYDShopfloorManager.Current.UpdateAlarm(3, Lang.UI.UI_Label_BarcodeUnreadable, DateTime.Now);
                                            // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End

                                            Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> IsBarcodeUnreadableBuzzerEnabled");
                                            //Log4Net.Info("HOLLY AOI DesyncState============> IsBarcodeUnreadableBuzzerEnabled");
                                            // 20230209 E05区分 追加 Start   
                                            GlobalDataManager.Current.EquipmentErrorCode = "E48";//不出板故障报警
                                            Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) IsBarcodeUnreadableBuzzerEnabled: EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                            // 20230209 E05区分 追加 End 

                                            // 20240613 太原报警停机增加权限解锁功能 【王晨】 追加 Start
                                            ExportCommonShopfloorManager.Current.ShowDialog();
                                            // 20240613 太原报警停机增加权限解锁功能 【王晨】 追加 End

                                            // 20240304 太原LQ修改 【王晨】 追加 Start
                                            //if (Customization.Current.IsNoBoardOutNG)
                                            //{
                                            //    return ExitState.Current;
                                            //}
                                            // 20240304 太原LQ修改 【王晨】 追加 End

                                            //20230706  查找E05 【徐明武】 修改 Start
                                            //return DesyncState.Current;
                                            Holly.Log.HlLogger.Write("E05 => 54 ");
                                            return DesyncState.Current;
                                            //20230706  查找E05 【徐明武】 修改 End 
                                        }
                                    }
                                }
                                // 20240807 鹏鼎左拼板报警、右拼板不报警 【范克文】 修改 Start
                                //else if (AutoRunSettings.Default.IsInspectionResultBuzzerEnabled && isAlarmBuzzer != 0)

                                // 20241029 本机确认报警超限功能 不超限时还报警【王小雪】修改 Start
                                //else if (AutoRunSettings.Default.IsInspectionResultBuzzerEnabled && (isAlarmBuzzer != 0||isAlarmBuzzerMultPanel!=0))

                                if (AutoRunSettings.Default.IsInspectionResultBuzzerEnabled)
                                // 20241029 本机确认报警超限功能 不超限时还报警【王小雪】修改 End
                                // 20240807 鹏鼎左拼板报警、右拼板不报警 【范克文】 修改 End
                                {
                                    Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> AutoRunSettings.Default.IsInspectionResultBuzzerEnabled = " + AutoRunSettings.Default.IsInspectionResultBuzzerEnabled);
                                    if (isAlarmBuzzer != 0)
                                    {
                                        //有报警或Mark错误
                                        if (AutoRunSettings.Default.IsDisplayDialogAndBuzzer || AutoRunSettings.Default.IsRepairCommit)
                                        {
                                            if (MachineParams.Current.InlineMachine.MultiProgramMarkAutoCheck)
                                            {
                                                op.ClearLampBlink();
                                                op.SetRedAndBuzzer();
                                                opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                                m.UpdateInline();
                                                // 20240807 鹏鼎左拼板报警、右拼板不报警 【范克文】 修改 Start
                                                //for (int i = 0; i < GlobalDataManager.Current.AlarmPopList.Count; i++)
                                                //{
                                                //    Holly.Log.HlLogger.Write("HOLLY AOI ============> StateTransitionVisitor.GoState i=" + GlobalDataManager.Current.AlarmPopList[i]);

                                                Holly.Log.HlLogger.Write("HOLLY AOI ============> StateTransitionVisitor.GoState GlobalDataManager.Current.AlarmPopList.Count = " + GlobalDataManager.Current.AlarmPopList.Count);
                                                if (GlobalDataManager.Current.AlarmPopList.Count > 0)
                                                {
                                                    // 20240807 鹏鼎左拼板报警、右拼板不报警 【范克文】 修改 End
                                                    UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                                    new Action(
                                                       delegate ()
                                                       {
                                                           //20230717 log输出【ygs】 Start 
                                                           // 20240807 鹏鼎左拼板报警、右拼板不报警 【范克文】 追加 Start
                                                           if (isAlarmBuzzer != 0)
                                                               // 20240807 鹏鼎左拼板报警、右拼板不报警 【范克文】 追加 End
                                                               ExportLogOuputManager.Current.OuputLog(11, isAlarmBuzzer == 1 ? Lang.UI.UI_Label_MarkError : string.Format(Lang.UI.UI_Label_ExceedeAlarmQty, AutoRunSettings.Default.AlarmQty));
                                                           //20230717 log输出【ygs】 End
                                                           // 20240406 启动屏幕录制程序 追加 Start                                                    
                                                           SocketScreenRecorder.Current.clientSendStart();
                                                           // 20240406 启动屏幕录制程序 追加 End
                                                           //IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                                           //messageManager.ShowError(isAlarmBuzzer == 1 ? Lang.UI.UI_Label_MarkError : string.Format(Lang.UI.UI_Label_ExceedeAlarmQty, AutoRunSettings.Default.AlarmQty));
                                                           // 20240807 鹏鼎左拼板报警、右拼板不报警 【范克文】 追加 Start
                                                           //if (isAlarmBuzzerMultPanel != 0)
                                                           int alarmCount = GlobalDataManager.Current.AlarmPopList.Where(p => p.Equals("1")).Count();
                                                           if (alarmCount == 1)
                                                           {
                                                               WaitVerify(m, isAlarmBuzzer == 1 ? Lang.UI.UI_Label_MarkError : string.Format(Lang.UI.UI_Label_ExceedeAlarmQty, AutoRunSettings.Default.AlarmQty));
                                                           }
                                                           //if (isAlarmBuzzer != 0)g
                                                           if (alarmCount == 2)
                                                           {
                                                               // 20240807 鹏鼎左拼板报警、右拼板不报警 【范克文】 追加 End
                                                               WaitVerify(m, isAlarmBuzzer == 1 ? Lang.UI.UI_Label_MarkError : string.Format(Lang.UI.UI_Label_ExceedeAlarmQty, AutoRunSettings.Default.AlarmQty));
                                                               WaitVerify(m, isAlarmBuzzer == 1 ? Lang.UI.UI_Label_MarkError : string.Format(Lang.UI.UI_Label_ExceedeAlarmQty, AutoRunSettings.Default.AlarmQty));

                                                           }
                                                           GlobalDataManager.Current.AlarmPopList.Clear();
                                                       }));
                                                    Thread.Sleep(50);
                                                }
                                                IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                                IOperationResult opResult2 = null;

                                                // 20201222 报警不出板对应 修改 Start
                                                //op2.SetBuzzer(false);

                                                op2.ClearCommand();
                                                op2.ClearLampBuzzer();
                                                op2.SetBuzzer(false);
                                                // 20201222 报警不出板对应 修改 End
                                                opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                                // 20201222 报警不出板对应 修改 Start
                                                //opResult2.Wait();

                                                m.UpdateInline();
                                                // 20201222 报警不出板对应 修改 End

                                                // 20200902 西门子NGBUFFER 追加 Start
                                                Holly.Log.HlLogger.Write("HOLLY AOI ============> StateTransitionVisitor.GoState SetGreenLampOn");
                                                IBatchOperationInline op11 = m.CreateBatchOperationInline();
                                                IOperationResult opResult11 = null;

                                                op11.ClearCommand();
                                                op11.SetGreenLampOn();
                                                opResult11 = op11.Execute(MachineParams.Current.OperationStepTimeout);
                                                m.UpdateInline();

                                                // 20240613 太原报警停机增加权限解锁功能 【王晨】 追加 Start
                                                ExportCommonShopfloorManager.Current.ShowDialog();
                                                // 20240613 太原报警停机增加权限解锁功能 【王晨】 追加 End

                                                // 20240304 太原LQ修改 【王晨】 追加 Start
                                                //if (Customization.Current.IsNoBoardOutNG)
                                                //{
                                                //    return ExitState.Current;
                                                //}
                                                // 20240304 太原LQ修改 【王晨】 追加 End
                                            }
                                            else
                                            {
                                                // 20201222 报警不出板对应 追加 Start
                                                Holly.Log.HlLogger.Write("HOLLY AOI ============> StateTransitionVisitor.GoState IsDisplayDialogAndBuzzer = " + AutoRunSettings.Default.IsDisplayDialogAndBuzzer);
                                                Holly.Log.HlLogger.Write("HOLLY AOI ============> StateTransitionVisitor.GoState IsRepairCommit = " + AutoRunSettings.Default.IsRepairCommit);
                                                // 20201222 报警不出板对应 追加 End
                                                //Log4Net.Warn("HOLLY AOI ============> StateTransitionVisitor.GoState IsDisplayDialogAndBuzzer = " + AutoRunSettings.Default.IsDisplayDialogAndBuzzer);
                                                //Log4Net.Warn("HOLLY AOI ============> StateTransitionVisitor.GoState IsRepairCommit = " + AutoRunSettings.Default.IsRepairCommit);

                                                op.ClearLampBlink();
                                                op.SetRedAndBuzzer();
                                                opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                                // 20201222 报警不出板对应 修改 Start
                                                //opResult.Wait();

                                                m.UpdateInline();
                                                // 20201222 报警不出板对应 修改 End

                                                //while ((m.InputStatusInline & InputStatusInline.BoardIn) != 0 || (m.InputStatusInline & InputStatusInline.SlowDown) != 0 || (m.InputStatusInline & InputStatusInline.Stopper) != 0 || (m.InputStatusInline & InputStatusInline.BoardOut) != 0)
                                                //{
                                                // 20230117 故障对应仅蜂鸣不弹框【纪明】 删除 Start
                                                ////20230109 双轨机机内判定弹框提醒 张晨铖追加 Start
                                                //if (Customization.Current.AlarmNotification.IsEnabled&& !Customization.Current.AlarmNotification.IsHideMarkErrorTip)
                                                //{
                                                //    //20230109 双轨机机内判定弹框提醒 张晨铖追加 
                                                // 20230117 故障对应仅蜂鸣不弹框【纪明】 删除 End  

                                                // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                                ExportShanWeiWatchBoardBYDShopfloorManager.Current.WriteAlarm(1, Lang.UI.UI_Label_MarkError, DateTime.Now);
                                                // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End

                                                UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                                new Action(
                                                    delegate ()
                                                    {
                                                        //20230717 log输出【ygs】 Start 
                                                        ExportLogOuputManager.Current.OuputLog(11, isAlarmBuzzer == 1 ? Lang.UI.UI_Label_MarkError : string.Format(Lang.UI.UI_Label_ExceedeAlarmQty, AutoRunSettings.Default.AlarmQty));
                                                        //20230717 log输出【ygs】 End
                                                        // 20240406 启动屏幕录制程序 追加 Start                                                    
                                                        SocketScreenRecorder.Current.clientSendStart();
                                                        // 20240406 启动屏幕录制程序 追加 End
                                                        IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                                        messageManager.ShowError(isAlarmBuzzer == 1 ? Lang.UI.UI_Label_MarkError : string.Format(Lang.UI.UI_Label_ExceedeAlarmQty, AutoRunSettings.Default.AlarmQty));
                                                    }));

                                                Thread.Sleep(50);
                                                // 20230117 故障对应仅蜂鸣不弹框【纪明】 删除 Start
                                                //    //20230109 双轨机机内判定弹框提醒 张晨铖追加 Start
                                                //}
                                                ////20230109 双轨机机内判定弹框提醒 张晨铖追加 End
                                                // 20230117 故障对应仅蜂鸣不弹框【纪明】 删除 End

                                                IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                                IOperationResult opResult2 = null;

                                                // 20201222 报警不出板对应 修改 Start
                                                //op2.SetBuzzer(false);

                                                op2.ClearCommand();
                                                op2.ClearLampBuzzer();
                                                op2.SetBuzzer(false);
                                                // 20201222 报警不出板对应 修改 End
                                                opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                                // 20201222 报警不出板对应 修改 Start
                                                //opResult2.Wait();

                                                m.UpdateInline();
                                                // 20201222 报警不出板对应 修改 End

                                                // 20200902 西门子NGBUFFER 追加 Start
                                                Holly.Log.HlLogger.Write("HOLLY AOI ============> StateTransitionVisitor.GoState SetGreenLampOn");
                                                IBatchOperationInline op11 = m.CreateBatchOperationInline();
                                                IOperationResult opResult11 = null;

                                                op11.ClearCommand();
                                                op11.SetGreenLampOn();
                                                opResult11 = op11.Execute(MachineParams.Current.OperationStepTimeout);
                                                m.UpdateInline();
                                                // 20200902 西门子NGBUFFER 追加 End

                                                // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                                ExportShanWeiWatchBoardBYDShopfloorManager.Current.UpdateAlarm(3, Lang.UI.UI_Label_MarkError, DateTime.Now);
                                                // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End

                                                // 20240613 太原报警停机增加权限解锁功能 【王晨】 追加 Start
                                                ExportCommonShopfloorManager.Current.ShowDialog();
                                                // 20240613 太原报警停机增加权限解锁功能 【王晨】 追加 End

                                                // 20240304 太原LQ修改 【王晨】 追加 Start
                                                //if (Customization.Current.IsNoBoardOutNG)
                                                //{
                                                //    return ExitState.Current;
                                                //}
                                                // 20240304 太原LQ修改 【王晨】 追加 End

                                                // 20230916 景旺AVI检测结果提示报警清板 【刘亚杰】 追加 Start
                                                if (Customization.Current.JingWangAVIShopfloor.IsNGClearBoard)
                                                {
                                                    op.ClearCommand();
                                                    op.ClearBoard();
                                                    op.SetGreenLampBlink();
                                                    IOperationResult opResultng = op.Execute(MachineParams.Current.OperationStepTimeout);
                                                    progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_ClearingBoard);
                                                    opResultng.Wait();
                                                    m.UpdateInline();
                                                    progressListener.Complete();

                                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> StateTransitionVisitor.GoState ClearBoard");
                                                    // 等待板子到出板口
                                                    while (true)
                                                    {
                                                        m.UpdateInline();
                                                        if ((m.InputStatusInline & InputStatusInline.BoardIn) != 0)
                                                            break;
                                                        Thread.Sleep(500);
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> StateTransitionVisitor.GoState Wait For The Board To BoardIn Location...");
                                                    }
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> StateTransitionVisitor.GoState ClearBoard Finish");

                                                    // 等待板子拿出
                                                    while (true)
                                                    {
                                                        m.UpdateInline();
                                                        if (!((m.InputStatusInline & InputStatusInline.BoardIn) != 0))
                                                            break;
                                                        Thread.Sleep(500);
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> StateTransitionVisitor.GoState Wait For The Board To TakeAway...");
                                                    }
                                                    context._isReBoardIn = true;
                                                    return GoState.Current;
                                                }
                                                // 20230916 景旺AVI检测结果提示报警清板 【刘亚杰】 追加 End
                                            }
                                        }
                                        //return DesyncState.Current;
                                        ////opResult.Wait();
                                        ////m.UpdateInline();

                                        // 20230919 淮安鹏鼎报检测结果报警输入密码解除报警 追加 Start
                                        if (Customization.Current.IsMachineAlarmInputPwd && Customization.Current.IsInspectionResultBuzzerInputPwd)
                                        {
                                            ExportAlarmInputPwdManager.Current.ShowAlarmInputPwd();
                                        }
                                        // 20230919 淮安鹏鼎报检测结果报警输入密码解除报警 追加 End

                                        //等待本机提交后再出板
                                        if (Customization.Current.IsWaitLocalCommit)
                                        {
                                            bool hasReport = false;
                                            while (!hasReport)
                                            {
                                                if (context.StopFlag)
                                                    return ExitState.Current;

                                                System.Threading.Thread.Sleep(50);
                                                hasReport = (GlobalDataManager.Current.IsPassOK1 != string.Empty) && (GlobalDataManager.Current.IsPassOK1 != "WAIT");
                                            }
                                        }

                                        //IBatchOperationInline op3 = m.CreateBatchOperationInline();
                                        //IOperationResult opResult3 = null;
                                        //op3.BoardOut();
                                        //opResult3 = op3.Execute(MachineParams.Current.OperationStepTimeout);
                                        //progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);
                                        ////opResult3.Wait();
                                        ///////////////////////////////////////////////////////////m.UpdateInline();
                                        ////context.CheckInlineMachineStatus();
                                        //while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                        //{
                                        //    if (context.StopFlag)
                                        //        return ExitState.Current;
                                        //    m.UpdateInline();
                                        //    if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                        //    {
                                        //        return DesyncState.Current;
                                        //    }
                                        //    //context.CheckInlineMachineStatus();
                                        //    Thread.Sleep(50);
                                        //}
                                        progressListener.Complete();
                                    }
                                }
                                //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 Start
                                //else if (Customization.Current.IsBuzzerForBadBlock1 && reportManager.IsBlock1Bad)
                                else if (Customization.Current.IsBuzzerForBadBlock1)
                                //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 End
                                {
                                    Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> Customization.Current.IsBuzzerForBadBlock1 = " + Customization.Current.IsBuzzerForBadBlock1);
                                    if (reportManager.IsBlock1Bad(checkRailID))
                                    {
                                        op.ClearLampBlink();
                                        op.SetRedAndBuzzer();
                                        opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                        opResult.Wait();
                                        // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                        ExportShanWeiWatchBoardBYDShopfloorManager.Current.WriteAlarm(1, Lang.UI.UI_Label_Block1IsBad, DateTime.Now);
                                        // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End
                                        //while ((m.InputStatusInline & InputStatusInline.BoardIn) != 0 || (m.InputStatusInline & InputStatusInline.SlowDown) != 0 || (m.InputStatusInline & InputStatusInline.Stopper) != 0 || (m.InputStatusInline & InputStatusInline.BoardOut) != 0)
                                        //{
                                        UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                            new Action(
                                                delegate ()
                                                {
                                                    //20230717 log输出【ygs】 Start 
                                                    ExportLogOuputManager.Current.OuputLog(11, Lang.UI.UI_Label_Block1IsBad);
                                                    //20230717 log输出【ygs】 End
                                                    // 20240406 启动屏幕录制程序 追加 Start                                                    
                                                    SocketScreenRecorder.Current.clientSendStart();
                                                    // 20240406 启动屏幕录制程序 追加 End
                                                    IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                                    messageManager.ShowError(Lang.UI.UI_Label_Block1IsBad);
                                                }));

                                        IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                        IOperationResult opResult2 = null;

                                        op2.SetBuzzer(false);
                                        opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                        opResult2.Wait();
                                        // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                        ExportShanWeiWatchBoardBYDShopfloorManager.Current.UpdateAlarm(3, Lang.UI.UI_Label_Block1IsBad, DateTime.Now);
                                        // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End
                                        Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> IsBuzzerForBadBlock1");
                                        //Log4Net.Info("HOLLY AOI DesyncState============> IsBuzzerForBadBlock1");
                                        // 20230209 E05区分 追加 Start   
                                        GlobalDataManager.Current.EquipmentErrorCode = "E48";//不出板故障报警
                                        Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) IsBuzzerForBadBlock1: EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                        //Log4Net.Info("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) IsBuzzerForBadBlock1: EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                        // 20230209 E05区分 追加 End 
                                        //20230706  查找E05 【徐明武】 修改 Start
                                        //return DesyncState.Current;
                                        {
                                            Holly.Log.HlLogger.Write("E05 => 55 ");
                                            return DesyncState.Current;
                                        }
                                        //20230706  查找E05 【徐明武】 修改 End 
                                    }
                                }
                                //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 Start
                                //else if (Customization.Current.IsBuzzerForAllBadBlock && reportManager.IsBlockAllBad)
                                else if (Customization.Current.IsBuzzerForAllBadBlock)
                                //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 End
                                {
                                    Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> Customization.Current.IsBuzzerForAllBadBlock = " + Customization.Current.IsBuzzerForAllBadBlock);
                                    if (reportManager.IsBlockAllBad(checkRailID))
                                    {
                                        op.ClearLampBlink();
                                        op.SetRedAndBuzzer();
                                        opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                        opResult.Wait();

                                        // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                        ExportShanWeiWatchBoardBYDShopfloorManager.Current.WriteAlarm(1, Lang.UI.UI_Label_BlockAllBad, DateTime.Now);
                                        // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End

                                        //while ((m.InputStatusInline & InputStatusInline.BoardIn) != 0 || (m.InputStatusInline & InputStatusInline.SlowDown) != 0 || (m.InputStatusInline & InputStatusInline.Stopper) != 0 || (m.InputStatusInline & InputStatusInline.BoardOut) != 0)
                                        //{
                                        UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                            new Action(
                                                delegate ()
                                                {
                                                    //20230717 log输出【ygs】 Start 
                                                    ExportLogOuputManager.Current.OuputLog(11, Lang.UI.UI_Label_Block1IsBad);
                                                    //20230717 log输出【ygs】 End
                                                    // 20240406 启动屏幕录制程序 追加 Start                                                    
                                                    SocketScreenRecorder.Current.clientSendStart();
                                                    // 20240406 启动屏幕录制程序 追加 End
                                                    IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                                    messageManager.ShowError(Lang.UI.UI_Label_BlockAllBad);
                                                }));

                                        IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                        IOperationResult opResult2 = null;

                                        op2.SetBuzzer(false);
                                        opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                        opResult2.Wait();

                                        // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                        ExportShanWeiWatchBoardBYDShopfloorManager.Current.UpdateAlarm(3, Lang.UI.UI_Label_BlockAllBad, DateTime.Now);
                                        // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End

                                        Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> IsBuzzerForAllBadBlock");
                                        //Log4Net.Info("HOLLY AOI DesyncState============> IsBuzzerForAllBadBlock");
                                        // 20230209 E05区分 追加 Start   
                                        GlobalDataManager.Current.EquipmentErrorCode = "E48";//不出板故障报警
                                        Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) IsBuzzerForAllBadBlock: EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                        //Log4Net.Warn("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) IsBuzzerForAllBadBlock: EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                        // 20230209 E05区分 追加 End 
                                        //20230706  查找E05 【徐明武】 修改 Start
                                        //return DesyncState.Current;
                                        {
                                            Holly.Log.HlLogger.Write("E05 => 56 ");
                                            return DesyncState.Current;
                                        }
                                        //20230706  查找E05 【徐明武】 修改 End 
                                    }
                                }
                                //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 Start
                                //else if (Customization.Current.IsBuzzerForRepeatBarcode && reportManager.IsBarcodeRepeat)
                                else if (Customization.Current.IsBuzzerForRepeatBarcode)
                                //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 End
                                {
                                    Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> Customization.Current.IsBuzzerForRepeatBarcode = " + Customization.Current.IsBuzzerForRepeatBarcode);
                                    if (reportManager.IsBarcodeRepeat(checkRailID))
                                    {
                                        op.ClearLampBlink();
                                        op.SetRedAndBuzzer();
                                        opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                        opResult.Wait();

                                        // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                        ExportShanWeiWatchBoardBYDShopfloorManager.Current.WriteAlarm(1, Lang.UI.UI_Label_BarcodeRepeat, DateTime.Now);
                                        // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End

                                        UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                            new Action(
                                                delegate ()
                                                {
                                                    //20230717 log输出【ygs】 Start 
                                                    ExportLogOuputManager.Current.OuputLog(11, Lang.UI.UI_Label_BarcodeRepeat);
                                                    //20230717 log输出【ygs】 End
                                                    // 20240406 启动屏幕录制程序 追加 Start                                                    
                                                    SocketScreenRecorder.Current.clientSendStart();
                                                    // 20240406 启动屏幕录制程序 追加 End
                                                    IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                                    messageManager.ShowError(Lang.UI.UI_Label_BarcodeRepeat);
                                                }));

                                        IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                        IOperationResult opResult2 = null;

                                        op2.SetBuzzer(false);
                                        opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                        opResult2.Wait();

                                        // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                        ExportShanWeiWatchBoardBYDShopfloorManager.Current.UpdateAlarm(3, Lang.UI.UI_Label_BarcodeRepeat, DateTime.Now);
                                        // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End

                                        Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> IsBarcodeRepeat");
                                        //Log4Net.Warn("HOLLY AOI DesyncState============> IsBarcodeRepeat");
                                        // 20230209 E05区分 追加 Start   
                                        GlobalDataManager.Current.EquipmentErrorCode = "E48";//不出板故障报警
                                        Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) IsBarcodeRepeat: EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                        //Log4Net.Warn("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) IsBarcodeRepeat: EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                        // 20230209 E05区分 追加 End 
                                        //20230706  查找E05 【徐明武】 修改 Start
                                        //return DesyncState.Current;
                                        {
                                            Holly.Log.HlLogger.Write("E05 => 57 ");
                                            return DesyncState.Current;
                                        }
                                        //20230706  查找E05 【徐明武】 修改 End 
                                    }
                                }
                                // 20200318 检测正常不出板故障对应 追加 Start
                                Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> IsBarcodeUnreadableBuzzerEnabled End");
                            }
                            // 20200318 检测正常不出板故障对应 追加 End

                            //20240326 上海希格斯条码 【李洋】追加 Start
                            if (Customization.Current.SHXiGeSiShopfloor.IsEnabled && AutoRunSettings.Default.IsEnableMES)
                            {
                                if (!ExportSHXiGeSiShopfloorManager.Current.CheckBarcode(m))
                                {
                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportSHXiGeSiShopfloorManager Error Board Out Start");
                                    IBatchOperationInline opSHXiGeSirOutBoard = m.CreateBatchOperationInline();
                                    IOperationResult opSHXiGeSirOutRet = null;

                                    opSHXiGeSirOutBoard.BoardOutNG();
                                    opSHXiGeSirOutRet = opSHXiGeSirOutBoard.Execute(MachineParams.Current.OperationStepTimeout);
                                    progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                                    HeartBeatUtils boardOutHeartBeat = new HeartBeatUtils(1);
                                    while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                    {
                                        if (boardOutHeartBeat.IsOutput())
                                        {
                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportSHXiGeSiShopfloorManager wait BoardOut Complete");
                                        }

                                        if (context.StopFlag)
                                        {
                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportSHXiGeSiShopfloorManager Error return ExitState.Current");
                                            return ExitState.Current;
                                        }

                                        m.UpdateInline();
                                        if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                        {
                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportSHXiGeSiShopfloorManager Error return DesyncState.Current");
                                            //20230706  查找E05 【徐明武】 修改 Start
                                            //return DesyncState.Current;
                                            {
                                                Holly.Log.HlLogger.Write("E05 => 68 ");
                                                return DesyncState.Current;
                                            }
                                            //20230706  查找E05 【徐明武】 修改 End 
                                        }
                                        Thread.Sleep(50);
                                    }

                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportSHXiGeSiShopfloorManager BoardOut End return GoState.Current");
                                    return GoState.Current;
                                }
                            }
                            //20240326 上海希格斯条码 【李洋】追加 End

                            // 20201125 指定错误类型停机报警优化 删除 Start
                            //// 20201106 指定错误类型停机报警 追加 Start
                            //if (Customization.Current.AlarmNotification.IsEnabled)
                            //{
                            //    ExportAlarmNotificationManager.Current.CheckAlarm(m);
                            //}
                            //// 20201106 指定错误类型停机报警 追加 End
                            // 20201125 指定错误类型停机报警优化 删除 End
                            //正常板出板
                            // 20240516 双panel重复过帐 【ygs】 追加 Start
                            #region 等待出结果出板
                            if (MachineParams.Current.InlineMachine.MultiProgramMarkAutoCheck)
                            {
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> BoardOut IsMultPanelInsectionEnd=" + GlobalDataManager.Current.IsMultPanelInsectionEnd);
                                // 双panel生成结果后出板,避免重复过账
                                while (!GlobalDataManager.Current.IsMultPanelInsectionEnd)
                                {
                                    if (context.StopFlag)
                                        return ExitState.Current;
                                    Holly.Log.HlLogger.Write("HOLLY AOI ============>BoardOut IsMultPanelInsectionEnd=" + GlobalDataManager.Current.IsMultPanelInsectionEnd);
                                    System.Threading.Thread.Sleep(10);
                                }
                            }
                            #endregion
                            // 20240516 双panel重复过帐 【ygs】 追加 End
                            #region 连续预警满足条件时报警在出板
                            string alarmMsg = string.Empty;
                            if (AutoRunSettings.Default.IsMachineAlarmEnabled)
                            {
                                Holly.Log.HlLogger.Write("HOLLY AOI ============>ImageAcquisitionMachine Start IsBoardOut=" + GlobalDataManager.Current.IsBoardOut);
                                if (Customization.Current.WarningStatistics.IsFoxTaiYuan)
                                {
                                    while (!GlobalDataManager.Current.IsBoardOut && GlobalDataManager.Current.IsAutoRun)
                                    {
                                        if (context.StopFlag)
                                            return ExitState.Current;
                                        System.Threading.Thread.Sleep(100);
                                        //报警退出
                                        if (ExportAlarmNotificationManager.Current.checkAlarm)
                                        {
                                            Holly.Log.HlLogger.Write("HOLLY AOI ============>ImageAcquisitionMachine checkAlarm=" + ExportAlarmNotificationManager.Current.checkAlarm);
                                            break;
                                        }
                                    }
                                    Holly.Log.HlLogger.Write("HOLLY AOI ============>ImageAcquisitionMachine End IsBoardOut=" + GlobalDataManager.Current.IsBoardOut);
                                }
                                else
                                {
                                    alarmMsg = ExportCacheComAlarmManager.Current.AlertAlarmInfoMsg(checkRailID);
                                    if (!string.IsNullOrEmpty(alarmMsg))
                                    {
                                        WaitVerify(m, alarmMsg + Lang.UI.UI_Status_CompAlarmExceed);
                                        // 20230206 报警windows锁屏 追加 Start
                                        if (Customization.Current.IsMachineAlarmInputPwd)
                                        {
                                            ExportAlarmInputPwdManager.Current.ShowAlarmInputPwd();
                                        }
                                        // 20230206 报警windows锁屏 追加 End
                                        ExportCacheComAlarmManager.Current.ClearCacheMachineAlarmList(1);
                                    }
                                }
                                Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine  报警提示 = " + alarmMsg);
                            }
                            #endregion

                            if (isTimeOut)
                            {
                                op.ClearLampBlink();
                                op.SetRedAndBuzzer();
                                opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                opResult.Wait();

                                // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                ExportShanWeiWatchBoardBYDShopfloorManager.Current.WriteAlarm(1, Lang.UI.UI_Message_ConnectRepairDBError, DateTime.Now);
                                // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End

                                //while ((m.InputStatusInline & InputStatusInline.BoardIn) != 0 || (m.InputStatusInline & InputStatusInline.SlowDown) != 0 || (m.InputStatusInline & InputStatusInline.Stopper) != 0 || (m.InputStatusInline & InputStatusInline.BoardOut) != 0)
                                //{
                                UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                    new Action(
                                        delegate ()
                                        {
                                            //20230717 log输出【ygs】 Start 
                                            ExportLogOuputManager.Current.OuputLog(11, Lang.UI.UI_Message_ConnectRepairDBError);
                                            //20230717 log输出【ygs】 End
                                            // 20240406 启动屏幕录制程序 追加 Start                                                    
                                            SocketScreenRecorder.Current.clientSendStart();
                                            // 20240406 启动屏幕录制程序 追加 End
                                            IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                            messageManager.ShowError(Lang.UI.UI_Message_ConnectRepairDBError);
                                        }));

                                IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                IOperationResult opResult2 = null;

                                op2.SetBuzzer(false);
                                opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                opResult2.Wait();

                                // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                ExportShanWeiWatchBoardBYDShopfloorManager.Current.UpdateAlarm(3, Lang.UI.UI_Message_ConnectRepairDBError, DateTime.Now);
                                // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End

                                Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> IsTimeout Repair Database error");
                                //Log4Net.Warn("HOLLY AOI DesyncState============> IsTimeout Repair Database error");
                                // 20230209 E05区分 追加 Start   
                                GlobalDataManager.Current.EquipmentErrorCode = "E49";// 数据库延时报警
                                Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                //Log4Net.Warn("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                // 20230209 E05区分 追加 End 
                                //20230706  查找E05 【徐明武】 修改 Start
                                //return DesyncState.Current;
                                {
                                    Holly.Log.HlLogger.Write("E05 => 58 ");
                                    return DesyncState.Current;
                                }
                                //20230706  查找E05 【徐明武】 修改 End 
                            }
                            //有下机信号
                            if (!AutoRunSettings.Default.NoNextMachineSignal)
                            {
                                op = m.CreateBatchOperationInline();
                                opResult = null;
                                Thread.Sleep(50);
                                if (AutoRunSettings.Default.IsSendOKNGToNextMachine)
                                {
                                    // 20241029 本机确认报警超限时有报错导致清板再进板【王小雪】追加 Start
                                    if (AutoRunSettings.Default.IsLocalCommit && Customization.Current.IsWaitLocalCommit)
                                    {
                                        if (GlobalDataManager.Current.IsPassOK1 == "FAIL")
                                        {
                                            op.ClearCommand();
                                            op.BoardOutNG();
                                            Holly.Log.HlLogger.Write("HOLLY AOI ============> IsLocalCommit BoardOut NG");
                                        }
                                        else
                                        {
                                            op.ClearCommand();
                                            op.BoardOut();
                                            Holly.Log.HlLogger.Write("HOLLY AOI ============> IsLocalCommit BoardOut OK");
                                        }
                                    }
                                    else
                                    // 20241029 本机确认报警超限时有报错导致清板再进板【王小雪】追加 End
                                    {
                                        //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 Start
                                        //if (reportManager.IsPassOK)
                                        if (reportManager.IsPassOK(checkRailID))
                                        //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 End
                                        {
                                            Holly.Log.HlLogger.Write("HOLLY AOI ============> IsSendOKNGToNextMachine BoardOut");
                                            //op.ClearCommand();
                                            op.BoardOut();
                                        }
                                        else
                                        {
                                            Holly.Log.HlLogger.Write("HOLLY AOI ============> IsSendOKNGToNextMachine BoardOutNG");
                                            //op.ClearCommand();
                                            op.BoardOutNG();
                                        }
                                    }
                                }
                                else
                                {
                                    //op.ClearCommand();
                                    // 20231007 均胜2DAOI机外判定模式下，开启检测结果提示维修站不显示数据 【王晨】 修改 Start
                                    //op.BoardOut();

                                    //20240327 杭州云尖mes上抛数据 【李洋】追加 Start
                                    if (Customization.Current.HZYunJianMesShopfloor.IsEnabled && AutoRunSettings.Default.IsEnableMES && AutoRunSettings2.Default.IsDoubleSideAOI)
                                    {
                                        if (!ExportHZYunJianMesShopfloorManager.Current.CheckBarcode(m))
                                        {
                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportHZYunJianMesShopfloorManager Error Board Out Start");
                                            IBatchOperationInline opDLWebServiceOutBoard = m.CreateBatchOperationInline();
                                            IOperationResult opDLWebServiceOutBoardRet = null;

                                            opDLWebServiceOutBoard.BoardOutNG();
                                            opDLWebServiceOutBoardRet = opDLWebServiceOutBoard.Execute(MachineParams.Current.OperationStepTimeout);
                                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                                            HeartBeatUtils boardOutHeartBeat = new HeartBeatUtils(1);
                                            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                            {
                                                if (boardOutHeartBeat.IsOutput())
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportHZYunJianMesShopfloorManager wait BoardOut Complete");
                                                }

                                                if (context.StopFlag)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportHZYunJianMesShopfloorManager Error return ExitState.Current");
                                                    return ExitState.Current;
                                                }

                                                m.UpdateInline();
                                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportHZYunJianMesShopfloorManager Error return DesyncState.Current");
                                                    //20230706  查找E05 【徐明武】 修改 Start
                                                    //return DesyncState.Current;
                                                    {
                                                        Holly.Log.HlLogger.Write("E05 => 68 ");
                                                        return DesyncState.Current;
                                                    }
                                                    //20230706  查找E05 【徐明武】 修改 End 
                                                }
                                                Thread.Sleep(50);
                                            }

                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportHZYunJianMesShopfloorManager BoardOut End return GoState.Current");
                                            return GoState.Current;
                                        }
                                    }
                                    //20240327 杭州云尖mes上抛数据 【李洋】追加 End

                                    //有下机信号的情况下，不勾选发送OK/NG信号到后机
                                    string InspectionID = string.Empty;
                                    // 1.等待维修站发OK、NG 等待维修站发送OK/NG信号到后机
                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> AutoRunSettings.Default.IsWaitRepairSendOKNG=" + AutoRunSettings.Default.IsWaitRepairSendOKNG);
                                    //Log4Net.Info("HOLLY AOI ============> AutoRunSettings.Default.IsWaitRepairSendOKNG=" + AutoRunSettings.Default.IsWaitRepairSendOKNG);
                                    if (AutoRunSettings.Default.IsWaitRepairSendOKNG)
                                    {
                                        //不等维修站确认先出板
                                        // 1.1 机外
                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> AutoRunSettings.Default.IsRepairControlNotWait" + AutoRunSettings.Default.IsRepairControlNotWait);
                                        //Log4Net.Info("HOLLY AOI ============> AutoRunSettings.Default.IsRepairControlNotWait" + AutoRunSettings.Default.IsRepairControlNotWait);
                                        if (AutoRunSettings.Default.IsRepairControlNotWait)// Customization.Current.IsRepairControlNotWait)
                                        {
                                            //op.LocateCamera(GlobalDataManager.Current.ReleaseBoardPosition);
                                            // 20200829 主面生成空文件 追加 Start
                                            int fileCount = GetCreateEmptyFileCount();
                                            Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) CreateEmptyFileCount = " + fileCount);
                                            //Log4Net.Info("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) CreateEmptyFileCount = " + fileCount);

                                            if (fileCount >= 1)
                                            {
                                                // 20200829 主面生成空文件 追加 End

                                                // 20190823 等待空文件夹 Start
                                                // 20210705 双轨双头四轨定轨对应 修改 Start
                                                //FileUtils.WaitForEmptyFile(Customization.Current.RepairControlNotWaitExportDirectory, LC.SN + "-1.txt");

                                                if (MachineParams.Current.InlineMachine.IsDoubleRail && !MachineParams.Current.InlineMachine.IsSingleHead && MachineParams.Current.InlineMachine.IsFourthRailFixed)
                                                {
                                                    FileUtils.WaitForEmptyFile(Customization.Current.RepairControlNotWaitExportDirectory, LC.SN + "-2.txt");
                                                }
                                                else
                                                {
                                                    FileUtils.WaitForEmptyFile(Customization.Current.RepairControlNotWaitExportDirectory, LC.SN + "-1.txt");
                                                }
                                                // 20210705 双轨双头四轨定轨对应 修改 End
                                                // 20190823 等待空文件夹 End

                                                // 20190915 出板延时修改 Start
                                                WaitForLastSendOKNGSignal();
                                                // 20190915 出板延时修改 End

                                                // 20221012 机外判定OKNG错乱对应 追加 Start
                                                ProcessDataNotWaitControl.Current.UpdateBoardOutStatu(1);
                                                InspectionID = ProcessDataNotWaitControl.Current.GetInspectionIDForBoardOut(1);
                                                // 20221012 机外判定OKNG错乱对应 追加 End

                                                // 20220613 双面机机外判定同步出板 追加 Start
                                                if (AutoRunSettings2.Default.IsDoubleSideAOI && AutoRunSettings2.Default.IsUseDataControl && AutoRunSettings2.Default.IsSyncBoardOut)
                                                {
                                                    DoubleSideDataControl.Current.SyncBoardOutState(1);
                                                }
                                                // 20220613 双面机机外判定同步出板 追加 End

                                                op.BoardOut();
                                                Holly.Log.HlLogger.Write("HOLLY AOI ====> op.BoardOut() = " + GlobalDataManager.Current.OutPCsQuene.Count);
                                                //Log4Net.Info("HOLLY AOI ====> op.BoardOut() = " + GlobalDataManager.Current.OutPCsQuene.Count);
                                                op.LocateLoader(GlobalDataManager.Current.LastPosition, GlobalDataManager.Current.ReleaseBoardPosition, false);
                                                opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                                progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                                                // 20190906 OK/NG log修改 Start
                                                // 心跳
                                                DateTime dateTimePre4 = DateTime.Now;
                                                DateTime dateTimeNow4 = DateTime.Now;
                                                // 20190906 OK/NG log修改 End

                                                // 20220830 2022机台出板异常对应 追加 Start
                                                Stopwatch normalBoardOutstopwatch = new Stopwatch();
                                                normalBoardOutstopwatch.Start();
                                                Holly.Log.HlLogger.Write("HOLLY AOI ====> Board Out m.CompleteProcessStatus = " + m.CompleteProcessStatus);
                                                //Log4Net.Info("HOLLY AOI ====> Board Out m.CompleteProcessStatus = " + m.CompleteProcessStatus);
                                                // 20220830 2022机台出板异常对应 追加 End
                                                // 20220830 2022机台出板异常对应 修改 Start

                                                while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0 || IsHaveBoard(m))
                                                // 20220830 2022机台出板异常对应 修改 End
                                                {
                                                    // 20190907 OK / NG 信号Log输出追加 Start
                                                    dateTimeNow4 = DateTime.Now;
                                                    TimeSpan ts = dateTimeNow4 - dateTimePre4;
                                                    if (ts.TotalSeconds >= 5)
                                                    {
                                                        dateTimePre4 = dateTimeNow4;
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> Board Out Wait CompleteProcessStatus Heart 5s ...... " + dateTimeNow4);
                                                        //Log4Net.Info("HOLLY AOI ============> Board Out Wait CompleteProcessStatus Heart 5s ...... " + dateTimeNow4);
                                                        // 20240920 状态名称为空故障对应 【陈凤丹】 删除 Start
                                                        //删除原因：状态输出需要有状态名，异常状态需要有相关信息，该状态无法归类，暂时注释
                                                        //ExportEquipmentRunStatusManager.Current.Export("", "", "N/A");
                                                        // 20240920 状态名称为空故障对应 【陈凤丹】 删除 End
                                                    }
                                                    // 20190907 OK / NG 信号Log输出追加 End

                                                    if (context.StopFlag)
                                                        return ExitState.Current;
                                                    m.UpdateInline();
                                                    if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                                    {
                                                        //20230706  查找E05 【徐明武】 修改 Start
                                                        //return DesyncState.Current;
                                                        {
                                                            Holly.Log.HlLogger.Write("E05 => 83 ");
                                                            return DesyncState.Current;
                                                        }
                                                        //20230706  查找E05 【徐明武】 修改 End 
                                                    }
                                                    Thread.Sleep(50);

                                                    // 20220830 2022机台出板异常对应 追加 Start
                                                    if (normalBoardOutstopwatch.ElapsedMilliseconds / 1000 > 5)
                                                    {
                                                        if (!IsHaveBoard(m))
                                                        {

                                                            Holly.Log.HlLogger.Write("HOLLY AOI ====> Board Out is no board break");
                                                            //Log4Net.Info("HOLLY AOI ====> Board Out is no board break");
                                                            // 20231030 TraceLog输出出板信号 【陈凤丹】 追加 Start
                                                            LogManagerComm.Current.OutputLog(LogManagerComm.TRACE_LOG, DateTimeUtils.GetNow(DateTimeUtils.DATE_FORMAT1) + "\t" + "HOLLY AOI ====> Board Out is no board break ");
                                                            // 20231030 TraceLog输出出板信号 【陈凤丹】 追加 End
                                                            break;
                                                        }
                                                    }
                                                    // 20220830 2022机台出板异常对应 追加 End
                                                }

                                                // 20221010 武汉富士康堆板 追加 start
                                                #region 堆板弹框
                                                alarmMsg = ExportCacheComAlarmManager.Current.AlertAlarmInfoMsg(1);
                                                if (!string.IsNullOrEmpty(alarmMsg))
                                                {
                                                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                                    ExportShanWeiWatchBoardBYDShopfloorManager.Current.WriteAlarm(1, Lang.UI.UI_Status_CompAlarmExceed, DateTime.Now);
                                                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End
                                                    UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                                                    new Action(
                                                                        delegate ()
                                                                        {
                                                                            op = m.CreateBatchOperationInline();
                                                                            opResult = null;
                                                                            op.ClearLampBlink();
                                                                            op.SetRedAndBuzzer();
                                                                            opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                                                            opResult.Wait();
                                                                            //20230717 log输出【ygs】 Start 
                                                                            ExportLogOuputManager.Current.OuputLog(11, alarmMsg + Lang.UI.UI_Status_CompAlarmExceed);
                                                                            //20230717 log输出【ygs】 End
                                                                            IMessageManager messageManager = App.Current.GetService<IMessageManager>();

                                                                            messageManager.ShowError(alarmMsg + Lang.UI.UI_Status_CompAlarmExceed);

                                                                            // 20211207 武汉富士康报警预警 修改 Start
                                                                            ExportCacheComAlarmManager.Current.ClearCacheMachineAlarmList(1);
                                                                            // 20211207 武汉富士康报警预警 修改 End

                                                                            IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                                                            IOperationResult opResult2 = null;
                                                                            op2.SetBuzzer(false);
                                                                            opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                                                            opResult2.Wait();
                                                                        }));

                                                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                                    ExportShanWeiWatchBoardBYDShopfloorManager.Current.UpdateAlarm(3, Lang.UI.UI_Status_CompAlarmExceed, DateTime.Now);
                                                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End

                                                    // 20240613 太原报警停机增加权限解锁功能 【王晨】 追加 Start
                                                    ExportCommonShopfloorManager.Current.ShowDialog();
                                                    // 20240613 太原报警停机增加权限解锁功能 【王晨】 追加 End

                                                    // 20240304 太原LQ修改 【王晨】 追加 Start
                                                    //if (Customization.Current.IsNoBoardOutNG)
                                                    //{
                                                    //    return ExitState.Current;
                                                    //}
                                                    // 20240304 太原LQ修改 【王晨】 追加 End
                                                }
                                                // 20221010 武汉富士康堆板 追加 End
                                                #endregion
                                                // 20221010 武汉富士康堆板 追加 End
                                                // 20220830 2022机台出板异常对应 追加 Start
                                                normalBoardOutstopwatch.Stop();
                                                // 20220830 2022机台出板异常对应 追加 End

                                                DeleteCentralControlFile();

                                                // 20210705 双轨双头四轨定轨对应 修改 Start
                                                //string filePath = DateTime.Now.ToString("yyyyMMddHHmmss") + "-" + LC.SN + "-1.txt";

                                                string filePath = "";
                                                if (MachineParams.Current.InlineMachine.IsDoubleRail && !MachineParams.Current.InlineMachine.IsSingleHead && MachineParams.Current.InlineMachine.IsFourthRailFixed)
                                                {
                                                    filePath = DateTime.Now.ToString("yyyyMMddHHmmss") + "-" + LC.SN + "-2.txt";
                                                    // 20221012 机外判定OKNG错乱对应 追加 Start
                                                    if (Customization.Current.IsProcessDataNotWaitControlEnable)
                                                    {
                                                        filePath = InspectionID + "_" + LC.SN + "_2.txt";
                                                    }
                                                    // 20221012 机外判定OKNG错乱对应 追加 End

                                                    // 20220801 机外判定OKNG信号(队列,先进先出) 追加 Start
                                                    if (Customization.Current.IsQueueDataNotWaitControlEnable)
                                                        filePath = InspectionID + "-" + LC.SN + "-2.txt";
                                                    // 20220801 机外判定OKNG信号(队列,先进先出) 追加 End
                                                }
                                                else
                                                {
                                                    filePath = DateTime.Now.ToString("yyyyMMddHHmmss") + "-" + LC.SN + "-1.txt";
                                                    // 20221012 机外判定OKNG错乱对应 追加 Start
                                                    if (Customization.Current.IsProcessDataNotWaitControlEnable)
                                                    {
                                                        filePath = InspectionID + "_" + LC.SN + "_1.txt";
                                                    }
                                                    // 20221012 机外判定OKNG错乱对应 追加 End
                                                    // 20220801 机外判定OKNG信号(队列,先进先出) 追加 Start
                                                    if (Customization.Current.IsQueueDataNotWaitControlEnable)
                                                        filePath = InspectionID + "-" + LC.SN + "-1.txt";
                                                    // 20220801 机外判定OKNG信号(队列,先进先出) 追加 End
                                                }
                                                // 20210705 双轨双头四轨定轨对应 修改 End

                                                FileUtils.CreateEmptyFile(Customization.Current.RepairControlNotWaitExportDirectory, filePath);
                                                // 20190823 OK/NG信号文件内容Copy变更 End

                                                // 20220801 机外判定OKNG信号(队列,先进先出) 追加 Start
                                                ProcessDataNotWaitControl1.Current.CreateFileForBoard(1, filePath);
                                                // 20220801 机外判定OKNG信号(队列,先进先出) 追加 End
                                                // 20231030 TraceLog输出出板信号 【陈凤丹】 追加 Start
                                                LogManagerComm.Current.OutputLog(LogManagerComm.TRACE_LOG, DateTimeUtils.GetNow(DateTimeUtils.DATE_FORMAT1) + "\t" + $"HOLLY AOI ====> ImageAcquisitionMachine CreateEmptyFile = {Path.Combine(Customization.Current.RepairControlNotWaitExportDirectory, filePath)}");
                                                // 20231030 TraceLog输出出板信号 【陈凤丹】 追加 End

                                                // 20200829 主面生成空文件 追加 Start
                                                if (fileCount == 2)
                                                {
                                                    string othersideFilePath = DateTime.Now.ToString("yyyyMMddHHmmss") + "-" + AutoRunSettings2.Default.OtherSideSN + "-1.txt";
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ====> ImageAcquisitionMachine  othersideFilePath = " + othersideFilePath);
                                                    //Log4Net.Info("HOLLY AOI ====> ImageAcquisitionMachine  othersideFilePath = " + othersideFilePath);
                                                    FileUtils.CreateEmptyFile(Customization.Current.RepairControlNotWaitExportDirectory, othersideFilePath);
                                                }
                                            }
                                            // 20200829 主面生成空文件 追加 End

                                            Holly.Log.HlLogger.Write("HOLLY AOI ====> op.BoardOut() Finish  GlobalDataManager.Current.OutPCsQuene.Enqueue(1) = " + GlobalDataManager.Current.OutPCsQuene.Count);
                                            //Log4Net.Info("HOLLY AOI ====> op.BoardOut() Finish  GlobalDataManager.Current.OutPCsQuene.Enqueue(1) = " + GlobalDataManager.Current.OutPCsQuene.Count);
                                        }
                                        // 20231021 烟台富士康报警下机内代码移植 【王晨】 追加 Start
                                        // 1.2 机内
                                        else
                                        {
                                            // 20200826 异物检测 喷码机追加 Start
                                            Holly.Log.HlLogger.Write("HOLLY PRITNT =====> Customization.Current.CentralControlFileMode.IsEnabled step1 = " + Customization.Current.CentralControlFileMode.IsEnabled);
                                            Holly.Log.HlLogger.Write("HOLLY PRITNT =====> wait result start");
                                            HeartBeatUtils heartBeat = new HeartBeatUtils(2);
                                            // 20200826 异物检测 喷码机追加 End

                                            Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) waiting Inspection result Start");
                                            bool hasReport = false;
                                            // 20210913 NVT检测结果生成信号及空文件丢失问题对应 追加 Start
                                            Stopwatch hasReportTimeoutStopwatch = Stopwatch.StartNew();
                                            TimeSpan hasReportTimeout = new TimeSpan(0, 0, 10);
                                            // 20210913 NVT检测结果生成信号及空文件丢失问题对应 追加 End
                                            while (!hasReport)
                                            {
                                                // 20200826 异物检测 喷码机追加 Start
                                                if (heartBeat.IsOutput())
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY PRITNT =====> wait result 2s ......");
                                                }
                                                // 20200826 异物检测 喷码机追加 End

                                                if (context.StopFlag)
                                                    return ExitState.Current;

                                                System.Threading.Thread.Sleep(50);
                                                //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 Start
                                                //hasReport = reportManager.HasReport;
                                                //20241227 双轨双头2轨机内判定文件模式无法获取信号文件修正【曹志鹏】修改 Start
                                                //hasReport = reportManager.HasReport(1);
                                                hasReport = reportManager.HasReport(checkRailID);
                                                //20241227 双轨双头2轨机内判定文件模式无法获取信号文件修正【曹志鹏】修改 End
                                                //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 End

                                                // 20210913 NVT检测结果生成信号及空文件丢失问题对应 追加 Start
                                                if (!hasReport)
                                                {
                                                    if (hasReportTimeoutStopwatch.Elapsed >= hasReportTimeout)
                                                    {
                                                        //去createDBList1找
                                                        if (checkRailID == 1)
                                                        {
                                                            hasReport = ProcessDataControl.Current.GetCreateDBEndSignal1();
                                                        }
                                                        else
                                                        {
                                                            hasReport = ProcessDataControl.Current.GetCreateDBEndSignal2();
                                                        }
                                                    }
                                                }
                                                if (hasReport)
                                                {
                                                    hasReportTimeoutStopwatch.Stop();
                                                }
                                                // 20210913 NVT检测结果生成信号及空文件丢失问题对应 追加 End
                                            }
                                            Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) waiting Inspection result End");

                                            //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 Start
                                            //if (!reportManager.IsPassOK)
                                            //20241227 双轨双头2轨机内判定文件模式无法获取信号文件修正【曹志鹏】修改 Start
                                            //if (!reportManager.IsPassOK(1))
                                            if (!reportManager.IsPassOK(checkRailID))
                                            //20241227 双轨双头2轨机内判定文件模式无法获取信号文件修正【曹志鹏】修改 End
                                            //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 End
                                            {
                                                //op.ClearCommand();
                                                if (Customization.Current.RepairWaitBuzzer)
                                                {
                                                    IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                                    IOperationResult opResult2 = null;
                                                    //20230814 共通需亮红灯 【李逸凡】 修改 Start
                                                    //op2.SetBuzzer(true);

                                                    if (Customization.Current.RepairWaitBuzzerIsRed)
                                                    {
                                                        op2.SetRedAndBuzzer();
                                                    }
                                                    else
                                                    {
                                                        op2.SetBuzzer(true);
                                                    }
                                                    //20230814 共通需亮红灯 【李逸凡】 修改 End

                                                    opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                                    opResult2.Wait();
                                                }

                                                // 20210308 以机台检测结果报警 追加 Start 
                                                // 20211020 NG板弹窗报警蜂鸣器响 修改 Start
                                                //if (Customization.Current.DoubleSideAOI.IsDoubleSideAOI && 
                                                //    Customization.Current.DoubleSideAOI.IsMaster && 
                                                //    Customization.Current.DoubleSideAOI.IsAlarmByAOIResult)

                                                Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine1.Visit(GoState) IsNGBoardPopupAndBuzz = " + Customization.Current.CommonShopfloor.IsNGBoardPopupAndBuzz);
                                                if ((AutoRunSettings2.Default.IsDoubleSideAOI &&
                                                    AutoRunSettings2.Default.IsMaster &&
                                                    AutoRunSettings2.Default.IsAlarmByAOIResult) ||
                                                    Customization.Current.CommonShopfloor.IsNGBoardPopupAndBuzz)
                                                // 20211020 NG板弹窗报警蜂鸣器响 修改 End
                                                {
                                                    IBatchOperationInline op5 = m.CreateBatchOperationInline();
                                                    IOperationResult opResult5 = null;
                                                    op5.SetRedAndBuzzer();
                                                    opResult5 = op5.Execute(MachineParams.Current.OperationStepTimeout);
                                                    opResult5.Wait();
                                                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                                    ExportShanWeiWatchBoardBYDShopfloorManager.Current.WriteAlarm(1, Lang.UI.UI_Label_NGPCB, DateTime.Now);
                                                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End
                                                    UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                                        new Action(
                                                            delegate ()
                                                            {
                                                                //20230717 log输出【ygs】 Start 
                                                                ExportLogOuputManager.Current.OuputLog(11, Lang.UI.UI_Label_NGPCB);
                                                                //20230717 log输出【ygs】 End
                                                                IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                                                messageManager.ShowError(Lang.UI.UI_Label_NGPCB);
                                                            }));

                                                    IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                                    IOperationResult opResult2 = null;

                                                    op2.SetBuzzer(false);
                                                    opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                                    opResult2.Wait();
                                                    IBatchOperationInline op3 = m.CreateBatchOperationInline();
                                                    IOperationResult opResult3 = null;
                                                    op3.SetGreenLampOn();
                                                    opResult3 = op3.Execute(MachineParams.Current.OperationStepTimeout);
                                                    opResult3.Wait();

                                                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                                    ExportShanWeiWatchBoardBYDShopfloorManager.Current.UpdateAlarm(2, Lang.UI.UI_Label_NGPCB, DateTime.Now);
                                                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) AlarmByAOIResult SetRedAndBuzzer Alarmed");
                                                }
                                                // 20210308 以机台检测结果报警 追加 End 
                                            }
                                            int repairFlag = -1;

                                            // 20200813 立讯MarkError报警 追加 Start
                                            int markErrorFlag = -1;
                                            string markErrorInfo = "";

                                            int unreadableBarcodeFlag = -1;
                                            string unreadableBarcodeInfo = "";
                                            // 20200813 立讯MarkError报警 追加 End
                                            // 20210403 东莞立讯 追加 Start
                                            string pcbMacCheckRetInfo = "";
                                            // 20210403 东莞立讯 追加 End
                                            Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) CentralControlFileMode.IsEnabled = " + Customization.Current.CentralControlFileMode.IsEnabled);

                                            if (Customization.Current.CentralControlFileMode.IsEnabled)
                                            {
                                                // 机内判定
                                                //生成文件模式
                                                string lastPath = "";
                                                bool hasFile = false;

                                                HeartBeatUtils heartBeat2 = new HeartBeatUtils(5);

                                                // 20200925 机内等待超时 追加 Start
                                                WaitTimeoutUtils timeoutUtils = new WaitTimeoutUtils(Customization.Current.CentralControlFileMode.WaitResultFileSeconds);
                                                // 20200925 机内等待超时 追加 End

                                                // 20210913 NVT检测结果生成信号及空文件丢失问题对应 追加 Start
                                                Stopwatch hasFileTimeoutStopwatch = Stopwatch.StartNew();
                                                TimeSpan hasFileTimeout = new TimeSpan(0, 0, Customization.Current.InMachineOKNGWaitFileTimeout);
                                                bool isGetFileTimeOut = false;
                                                int repairResult = -1;
                                                // 20210913 NVT检测结果生成信号及空文件丢失问题对应 追加 End

                                                while (!hasFile)
                                                {
                                                    if (heartBeat2.IsOutput())
                                                    {
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) Wait Repair result File......");
                                                    }

                                                    //// 20200826 异物检测 喷码机追加 Start 
                                                    //if (heartBeat2.IsOutput())
                                                    //{
                                                    //    Holly.Log.HlLogger.Write("HOLLY PRITNT =====> wait CentralControlFile 2s......");
                                                    //}
                                                    //// 20200826 异物检测 喷码机追加 End

                                                    if (context.StopFlag)
                                                        return ExitState.Current;

                                                    // 20200410 昆山立讯Mes 修正 Start
                                                    //lastPath = GlobalDataManager.Current.GetFileName(Customization.Current.CentralControlFileMode.FileDirectory, reportManager.InspectionID);

                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState)  AutoRunSettings2.Default.IsDoubleSideAOI=" + AutoRunSettings2.Default.IsDoubleSideAOI);
                                                    if (Customization.Current.LuxshareShopfloor_KS.IsEnabled)
                                                    {
                                                        // 20210319 昆山立臻电子 修正 Start
                                                        //string ret = ExportLuxshareShopfloor_KSManager.Current.ExportGetContentMain();

                                                        string ret = "";
                                                        if (Customization.Current.LuxshareShopfloor_KS.IsLiZhen)
                                                        {
                                                            ret = ExportLuxshareShopfloor_KSManager.Current.ExportGetContentMain2();
                                                        }
                                                        // 20210403 东莞立讯 追加 Start
                                                        else if (Customization.Current.LuxshareShopfloor_KS.IsDongGuan)
                                                        {
                                                            ret = ExportLuxshareShopfloor_KSManager.Current.ExportGetContentMainForDongGuan();
                                                        }
                                                        // 20210403 东莞立讯 追加 End
                                                        else
                                                        {
                                                            ret = ExportLuxshareShopfloor_KSManager.Current.ExportGetContentMain();
                                                        }
                                                        // 20210319 昆山立臻电子 修正 End
                                                        lastPath = FileUtils.GetFileName(AutoRunSettings.Default.CentralControlFileDirectory, "_" + AutoRunSettings2.Default.Side + ".txt");
                                                    }
                                                    // 20221201 贝思特MES 追加 Start
                                                    //20241129 贝思特增加维修站过站选项【曹志鹏】修改 Start
                                                    //else if ((Customization.Current.BeiSiTeShopfloor.IsEnabled && AutoRunSettings.Default.IsEnableMES))
                                                    else if ((Customization.Current.BeiSiTeShopfloor.IsEnabled && !Customization.Current.BeiSiTeShopfloor.IsRepairCommit && AutoRunSettings.Default.IsEnableMES))
                                                    //20241129 贝思特增加维修站过站选项【曹志鹏】修改 End
                                                    {
                                                        string ret = ExportBeiSiTeShopfloorManger.Current.ExportGetContentMain();
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState)  ExportBeiSiTeShopfloorManger ret=" + ret);
                                                        lastPath = FileUtils.GetFileName(AutoRunSettings.Default.CentralControlFileDirectory, "_" + AutoRunSettings2.Default.Side + ".txt");
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState)  ExportBeiSiTeShopfloorManger lastPath=" + lastPath);
                                                    }
                                                    // 20221201 贝思特MES 追加 End
                                                    // 20230620 昆山立讯Mes DEMO机【王小雪】 追加 Start
                                                    else if (Customization.Current.LuxshareShopfloor_KS2.IsEnabled)
                                                    {
                                                        string ret = ExportLuxshareShopfloor_KS2Manager.Current.ExportGetContentMain();
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) LuxshareShopfloor_KS2 ret=" + ret);
                                                        lastPath = FileUtils.GetFileName(AutoRunSettings.Default.CentralControlFileDirectory, "_" + AutoRunSettings2.Default.Side + ".txt");
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) LuxshareShopfloor_KS2 lastPath=" + lastPath);
                                                    }
                                                    // 20230620 昆山立讯Mes DEMO机【王小雪】 追加 End

                                                    // 20210126 双面机机内合并发结果 追加 Start
                                                    else if (AutoRunSettings2.Default.IsDoubleSideAOI)
                                                    {
                                                        string ret = ExportDoubleSideOKNGShopfloorManger.Current.ExportGetContentMain();
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState)  ret=" + ret);
                                                        lastPath = FileUtils.GetFileName(AutoRunSettings.Default.CentralControlFileDirectory, "_" + AutoRunSettings2.Default.Side + ".txt");
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState)  lastPath=" + lastPath);
                                                    }
                                                    // 20210126 双面机机内合并发结果 追加 End

                                                    // 20201013 异物检测控制测试 追加 Start
                                                    else if (Customization.Current.SpotShopfloor.IsTestEnabled)
                                                    {
                                                        lastPath = GlobalDataManager.Current.GetFileName(AutoRunSettings.Default.CentralControlFileDirectory, "");
                                                    }
                                                    // 20201013 异物检测控制测试 追加 End
                                                    else
                                                    {
                                                        //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 Start
                                                        //lastPath = GlobalDataManager.Current.GetFileName(Customization.Current.CentralControlFileMode.FileDirectory, reportManager.InspectionID);
                                                        //20241227 双轨双头2轨机内判定文件模式无法获取信号文件修正【曹志鹏】修改 Start
                                                        //lastPath = GlobalDataManager.Current.GetFileName(AutoRunSettings.Default.CentralControlFileDirectory, reportManager.InspectionID(1));
                                                        lastPath = GlobalDataManager.Current.GetFileName(AutoRunSettings.Default.CentralControlFileDirectory, reportManager.InspectionID(checkRailID));
                                                        //20241227 双轨双头2轨机内判定文件模式无法获取信号文件修正【曹志鹏】修改 End
                                                        //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 End
                                                    }
                                                    // 20200410 昆山立讯Mes 修正 End

                                                    // 20200826 异物检测 喷码机追加 End
                                                    Holly.Log.HlLogger.Write("HOLLY PRITNT =====> lastPath = " + lastPath);
                                                    // 20200826 异物检测 喷码机追加 End

                                                    if (lastPath != "")
                                                    {
                                                        hasFile = true;
                                                    }
                                                    // 20200925 机内等待超时 追加 Start
                                                    else if (timeoutUtils.IsTimeOut())
                                                    {
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) Wait Repair result File Timeout. time = " + Customization.Current.CentralControlFileMode.WaitResultFileSeconds);
                                                        break;
                                                    }
                                                    // 20200925 机内等待超时 追加 End
                                                    System.Threading.Thread.Sleep(100);

                                                    // 20210913 NVT检测结果生成信号及空文件丢失问题对应 追加 Start
                                                    if (!hasFile)
                                                    {
                                                        if (hasFileTimeoutStopwatch.Elapsed >= hasFileTimeout)
                                                        {
                                                            //去正式库找（用SQL）
                                                            //20241227 双轨双头2轨机内判定文件模式无法获取信号文件修正【曹志鹏】修改 Start
                                                            //repairResult = ProcessDataControl.Current.GetRepairFlag("1");
                                                            repairResult = ProcessDataControl.Current.GetRepairFlag(checkRailID.ToString());
                                                            //20241227 双轨双头2轨机内判定文件模式无法获取信号文件修正【曹志鹏】修改 End
                                                            if (repairResult != -1)
                                                            {
                                                                repairFlag = repairResult;
                                                                hasFile = true;
                                                                isGetFileTimeOut = true;
                                                            }
                                                        }
                                                    }
                                                    if (hasFile)
                                                    {
                                                        hasFileTimeoutStopwatch.Stop();
                                                    }
                                                    // 20210913 NVT检测结果生成信号及空文件丢失问题对应 追加 End
                                                }

                                                // 20200925 机内等待超时 追加 Start
                                                if (timeoutUtils.GetIsTimeOutRet())
                                                {
                                                    // 20201010 不报警直接清空重测 删除 Start
                                                    //WaitVerify(m, "Wait Repair result File Timeout");
                                                    // 20201010 不报警直接清空重测 删除 End

                                                    // 20211122 机内等待超时NG出板 修改 Start
                                                    //return DesyncState.Current;

                                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) IsWaitResultFileTimeoutBoardOutNG = " + Customization.Current.CentralControlFileMode.IsWaitResultFileTimeoutBoardOutNG);
                                                    if (Customization.Current.CentralControlFileMode.IsWaitResultFileTimeoutBoardOutNG)
                                                    {
                                                        hasFile = true;
                                                        isGetFileTimeOut = true;
                                                        repairFlag = 1;
                                                    }
                                                    else
                                                    {
                                                        // 20230209 E05区分 追加 Start   
                                                        GlobalDataManager.Current.EquipmentErrorCode = "E51";//机内等待超时
                                                        Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                                        // 20230209 E05区分 追加 End 
                                                        //机内判定等待文件超时清板重测
                                                        //20230706  查找E05 【徐明武】 修改 Start
                                                        //return DesyncState.Current;
                                                        {
                                                            Holly.Log.HlLogger.Write("E05 => 86 ");
                                                            return DesyncState.Current;
                                                        }
                                                        //20230706  查找E05 【徐明武】 修改 End 
                                                    }
                                                    // 20211122 机内等待超时NG出板 修改 End
                                                }
                                                // 20200925 机内等待超时 追加 End

                                                Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) have Repair result. lastPath = " + lastPath);


                                                // 20210913 NVT检测结果生成信号及空文件丢失问题对应 追加 Start
                                                if (!isGetFileTimeOut)
                                                {
                                                    // 20210913 NVT检测结果生成信号及空文件丢失问题对应 追加 End
                                                    try
                                                    {
                                                        StreamReader sr = new StreamReader(lastPath);
                                                        string txt = sr.ReadLine();
                                                        sr.Close();
                                                        repairFlag = Convert.ToInt32(txt);

                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        repairFlag = 1;
                                                    }
                                                    try
                                                    {
                                                        File.Delete(lastPath);
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) Delete File Exception= " + ex);
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> Delete File Error");
                                                    }
                                                    // 20210913 NVT检测结果生成信号及空文件丢失问题对应 追加 Start
                                                }
                                                else
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI == > ImageAcquisitionMachine CentralControlFile isGetFileTimeOut = " + isGetFileTimeOut + ", repairFlag = " + repairFlag);
                                                }
                                                // 20210913 NVT检测结果生成信号及空文件丢失问题对应 追加 End
                                            }
                                            //op.ClearCommand();
                                            // 20220111 立景机内判定只发OK信号 修改 Start  
                                            //if (repairFlag == 0)

                                            Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) Customization.Current.LiJingShopfloor.IsEnabled = " +
                                                Customization.Current.LiJingShopfloor.IsEnabled);

                                            // 20240425 抚州比亚迪2D设备机内判定出板方式修改【陆志福】追加 Start
                                            // 通知维修站复判完成
                                            SimpleMessageHandler.Send(nameof(CommonMessages.REPAIR_END), m);
                                            // 20240425 抚州比亚迪2D设备机内判定出板方式修改【陆志福】追加 End

                                            if (repairFlag == 0 || Customization.Current.LiJingShopfloor.IsEnabled) //repairFlag  0:OK  1：NG
                                            // 20220111 立景机内判定只发OK信号 修改 End
                                            {
                                                Holly.Log.HlLogger.Write("HOLLY AOI ============> BoardOut");
                                                op.BoardOut();
                                            }
                                            else
                                            {
                                                //闻泰集中管控回传的NG数据报警
                                                // 20210126 双面机机内合并发结果 修改 Start
                                                // 20210308 以机台检测结果报警 恢复 Start 
                                                if (Customization.Current.RepairCentralControlNGBuzzer || Customization.Current.IsKangJie)

                                                //if (Customization.Current.RepairCentralControlNGBuzzer || 
                                                //    Customization.Current.IsKangJie || 
                                                //    (Customization.Current.DoubleSideAOI.IsDoubleSideAOI && Customization.Current.DoubleSideAOI.IsMaster))
                                                // 20210308 以机台检测结果报警 恢复 End
                                                // 20210126 双面机机内合并发结果 修改 End
                                                {
                                                    IBatchOperationInline op5 = m.CreateBatchOperationInline();
                                                    IOperationResult opResult5 = null;

                                                    //if (Customization.Current.IsKangJie)
                                                    //{
                                                    op5.SetRedAndBuzzer();
                                                    //}
                                                    //else
                                                    //{
                                                    //    op5.SetBuzzer(true);
                                                    //}                                                  

                                                    opResult5 = op5.Execute(MachineParams.Current.OperationStepTimeout);
                                                    opResult5.Wait();

                                                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                                    ExportShanWeiWatchBoardBYDShopfloorManager.Current.WriteAlarm(1, Lang.UI.UI_Label_NGPCB, DateTime.Now);
                                                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End

                                                    UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                                        new Action(
                                                            delegate ()
                                                            {
                                                                //20230717 log输出【ygs】 Start 
                                                                ExportLogOuputManager.Current.OuputLog(11, Lang.UI.UI_Label_NGPCB);
                                                                //20230717 log输出【ygs】 End
                                                                IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                                                messageManager.ShowError(Lang.UI.UI_Label_NGPCB);
                                                            }));

                                                    IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                                    IOperationResult opResult2 = null;

                                                    op2.SetBuzzer(false);
                                                    opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                                    opResult2.Wait();

                                                    // 20210126 双面机机内合并发结果 追加 Start
                                                    IBatchOperationInline op3 = m.CreateBatchOperationInline();
                                                    IOperationResult opResult3 = null;

                                                    op3.SetGreenLampOn();
                                                    opResult3 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                                    opResult3.Wait();

                                                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                                    ExportShanWeiWatchBoardBYDShopfloorManager.Current.UpdateAlarm(3, Lang.UI.UI_Label_NGPCB, DateTime.Now);
                                                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End

                                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) SetRedAndBuzzer Alarmed");
                                                    // 20210126 双面机机内合并发结果 追加 End
                                                }

                                                // 20200813 立讯MarkError报警 追加 Start
                                                else if (Customization.Current.LuxshareShopfloor_KS.IsEnabled && AutoRunSettings2.Default.IsMaster)
                                                {
                                                    if (markErrorFlag == 1)
                                                    {
                                                        string errorInfo = markErrorInfo + " Side MarkError Error";
                                                        WaitVerify(m, errorInfo);
                                                    }
                                                    else if (unreadableBarcodeFlag == 1)
                                                    {
                                                        string errorInfo = unreadableBarcodeInfo + " Side UnRead Barcode Error";
                                                        WaitVerify(m, errorInfo);
                                                    }
                                                    // 20210403 东莞立讯 追加 Start
                                                    // 包装机检查失败
                                                    else if (!pcbMacCheckRetInfo.Equals(""))
                                                    {
                                                        WaitVerify(m, pcbMacCheckRetInfo);
                                                    }
                                                    // 20210403 东莞立讯 追加 End
                                                }
                                                // 20200813 立讯MarkError报警 追加 End
                                                //if (!Customization.Current.IsKangJie)
                                                //{
                                                Holly.Log.HlLogger.Write("HOLLY AOI ============> BoardOutNG");
                                                op.BoardOutNG();// 1：ng
                                            }
                                            if (Customization.Current.RepairWaitBuzzer)
                                            {
                                                //op.ClearLampBuzzer();
                                                //op.SetGreenLampOn();

                                                //20230814 共通需亮红灯 【李逸凡】 追加 Start
                                                if (Customization.Current.RepairWaitBuzzerIsRed)
                                                {
                                                    op.SetGreenLampOn();
                                                }
                                                //20230814 共通需亮红灯 【李逸凡】 追加  End

                                                op.SetBuzzer(false);
                                            }

                                            op.LocateLoader(GlobalDataManager.Current.LastPosition, GlobalDataManager.Current.ReleaseBoardPosition, false);
                                            opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);
                                            if (!Customization.Current.IsKangJie || (Customization.Current.IsKangJie && repairFlag == 0))
                                            {
                                                // 20220830 2022机台出板异常对应 追加 Start
                                                Stopwatch normalBoardOutstopwatch = new Stopwatch();
                                                normalBoardOutstopwatch.Start();
                                                Holly.Log.HlLogger.Write("HOLLY AOI ====> Board Out m.CompleteProcessStatus = " + m.CompleteProcessStatus);
                                                // 20220830 2022机台出板异常对应 追加 End
                                                // 20220830 2022机台出板异常对应 修改 Start
                                                //while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)

                                                while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0 || IsHaveBoard(m))
                                                // 20220830 2022机台出板异常对应 修改 End
                                                {
                                                    if (context.StopFlag)
                                                        return ExitState.Current;
                                                    m.UpdateInline();
                                                    if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                                    {
                                                        //20230706  查找E05 【徐明武】 修改 Start
                                                        //return DesyncState.Current;
                                                        {
                                                            Holly.Log.HlLogger.Write("E05 => 89 ");
                                                            return DesyncState.Current;
                                                        }
                                                        //20230706  查找E05 【徐明武】 修改 End 
                                                    }
                                                    //context.CheckInlineMachineStatus();
                                                    Thread.Sleep(50);

                                                    // 20220830 2022机台出板异常对应 追加 Start
                                                    if (normalBoardOutstopwatch.ElapsedMilliseconds / 1000 > 5)
                                                    {
                                                        if (!IsHaveBoard(m))
                                                        {
                                                            Holly.Log.HlLogger.Write("HOLLY AOI ====> Board Out is no board break");
                                                            break;
                                                        }
                                                    }
                                                    // 20220830 2022机台出板异常对应 追加 End
                                                }

                                                // 20220830 2022机台出板异常对应 追加 Start
                                                normalBoardOutstopwatch.Stop();
                                                // 20220830 2022机台出板异常对应 追加 End
                                            }

                                            progressListener.Complete();
                                        }
                                        // 20231021 烟台富士康报警下机内代码移植 【王晨】 追加 End
                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> AutoRunSettings.Default.IsRepairControlNotWait END");

                                    }
                                    else
                                    {
                                        op.BoardOut();
                                    }
                                    // 20231007 均胜2DAOI机外判定模式下，开启检测结果提示维修站不显示数据 【王晨】 修改 End

                                }
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> Board Out Start");

                                //20250320 越南富士康AOI自动运行界面直通率优化，移植SPI进出板轨道信息【曹志鹏】追加 Start
                                ViewModels.RailInfoViewModel.Current.UpdateBoardOutData(1, 1);
                                //20250320 越南富士康AOI自动运行界面直通率优化，移植SPI进出板轨道信息【曹志鹏】追加 End
                                opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);
                                opResult.Wait();
                                /////////////////////////////////////////////////////////m.UpdateInline();
                                //context.CheckInlineMachineStatus();

                                // 20240622 华瑞叉板信息不输出 【王晨】 追加 Start
                                HeartBeatUtils boardOutHeartBeat2 = new HeartBeatUtils(2);

                                Stopwatch normalBoardOutstopwatch2 = new Stopwatch();
                                normalBoardOutstopwatch2.Start();
                                Holly.Log.HlLogger.Write("HOLLY AOI ====> Board Out m.CompleteProcessStatus = " + m.CompleteProcessStatus);
                                // 20240622 华瑞叉板信息不输出 【王晨】 追加 End

                                // 20240622 华瑞叉板信息不输出 【王晨】 修改 Start
                                //while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)

                                while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0 || IsHaveBoard(m))
                                // 20240622 华瑞叉板信息不输出 【王晨】 修改 End
                                {
                                    // 20240622 华瑞叉板信息不输出 【王晨】 追加 Start
                                    if (boardOutHeartBeat2.IsOutput())
                                    {
                                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > Board Out Wait BoardOut Complete......");
                                    }
                                    // 20240622 华瑞叉板信息不输出 【王晨】 追加 End


                                    if (context.StopFlag)
                                        return ExitState.Current;
                                    m.UpdateInline();
                                    if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                    {
                                        //20230706  查找E05 【徐明武】 修改 Start
                                        //return DesyncState.Current;
                                        {
                                            Holly.Log.HlLogger.Write("E05 => 59 ");
                                            return DesyncState.Current;
                                        }
                                        //20230706  查找E05 【徐明武】 修改 End 
                                    }
                                    //context.CheckInlineMachineStatus();
                                    Thread.Sleep(50);
                                    // 20240622 华瑞叉板信息不输出 【王晨】 追加 Start
                                    if (normalBoardOutstopwatch2.ElapsedMilliseconds / 1000 > 5)
                                    {
                                        if (!IsHaveBoard(m))
                                        {
                                            Holly.Log.HlLogger.Write("HOLLY AOI ====> Board Out is no board break");
                                            break;
                                        }
                                    }
                                    // 20240622 华瑞叉板信息不输出 【王晨】 追加 End

                                }
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> Board Out Finish");
                                //Log4Net.Info("HOLLY AOI ============> Board Out Finish");
                                progressListener.Complete();

                                //20250320 越南富士康AOI自动运行界面直通率优化，移植SPI进出板轨道信息【曹志鹏】追加 Start
                                ViewModels.RailInfoViewModel.Current.UpdateBoardOutData(1, 2);
                                //20250320 越南富士康AOI自动运行界面直通率优化，移植SPI进出板轨道信息【曹志鹏】追加 End
                            }
                            // 20240622 华瑞叉板信息不输出 【王晨】 删除 Start
                            //if (AutoRunSettings.Default.IsAutoVerificationEnabled && reportManager.CanAutoCommitInspection() && (AutoRunSettings.Default.IsAutoVerificationForAll || (AutoRunSettings.Default.IsAutoVerificationForOK && reportManager.IsPassOK)))
                            //{
                            //    reportManager.CommitInspection();
                            //}
                            // 20240622 华瑞叉板信息不输出 【王晨】 删除 End
                        }
                        else
                        {
                            if (AutoRunSettings.Default.IsOfflineMode)
                            {
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> offline Step");
                                // 20220420 东勤MES 追加 Start
                                if (Customization.Current.DongQinShopfloor.IsEnabled)
                                {
                                    ExportDongQinShopfloorManager.Current.CheckBarcode(m);
                                }
                                // 20220420 东勤MES 追加 End

                                // 20220613 杭州惠泓MES 追加 Start
                                if (Customization.Current.HangZhouHuiHongShopfloor.IsEnabled)
                                {
                                    ExportHangZhouHuiHongShopfloorManager.Current.WaitCheckBarcodeResult(m);
                                    //离线模式不执行出板                                  
                                }
                                // 20220613 杭州惠泓MES 追加 End

                                //20230904 离线模式下，报警功能异常 【李逸凡】 追加 Start
                                if (Customization.Current.AlarmNotification.IsEnabled)
                                {
                                    bool isNeedAlarm = false;

                                    isNeedAlarm = ExportAlarmNotificationManager.Current.CheckAlarm(m);
                                    if (isNeedAlarm)
                                    {
                                        op = m.CreateBatchOperationInline();
                                        opResult = null;

                                        Thread.Sleep(50);
                                        if (AutoRunSettings.Default.IsSendOKNGToNextMachine)
                                        {
                                            op.BoardOutNG();
                                        }
                                        else
                                        {
                                            op.BoardOut();
                                        }
                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> StateTransitionVisitor.GoState AlarmNotification Board Out");

                                        opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                        progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);
                                        opResult.Wait();
                                        while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                        {
                                            if (context.StopFlag)
                                                return ExitState.Current;
                                            m.UpdateInline();
                                            if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                            {
                                                //20230706  查找E05 【徐明武】 修改 Start
                                                //return DesyncState.Current;
                                                {
                                                    Holly.Log.HlLogger.Write("E05 => 46 ");
                                                    return DesyncState.Current;
                                                }
                                                //20230706  查找E05 【徐明武】 修改 End 
                                            }
                                            Thread.Sleep(50);
                                        }
                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> StateTransitionVisitor.GoState AlarmNotification Board Out Finish ");
                                        progressListener.Complete();
                                        return GoState.Current;
                                    }
                                }
                                //20230904 离线模式下，报警功能异常 【李逸凡】 追加 End

                                if (AutoRunSettings.Default.AutoRunOfflineMode == (int)AutoRunOfflineMode.EntranceToExit || AutoRunSettings.Default.AutoRunOfflineMode == (int)AutoRunOfflineMode.ExitToExit)
                                {
                                    //到出板口，无需下机OK信号
                                    //op.LocateCamera(GlobalDataManager.Current.ReleaseBoardPosition);

                                    //20230504 惠州欣旺达软件增加延时出板功能【张晨铖】 追加 Start 
                                    if (Customization.Current.IsBoardOutDelay)
                                    {
                                        int boardOutDelay = Convert.ToInt32(AutoRunSettings2.Default.BoardOutDelay) * 1000;
                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> BoardOut boardOutDelay = " + boardOutDelay);
                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> BoardOut boardOutDelay Start");
                                        Thread.Sleep(boardOutDelay);
                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> BoardOut boardOutDelay End");
                                    }
                                    //20230504 惠州欣旺达软件增加延时出板功能【张晨铖】 追加 End

                                    op.BoardOutHighSpeed();
                                    op.LocateLoader(GlobalDataManager.Current.LastPosition, GlobalDataManager.Current.ReleaseBoardPosition, false);
                                    opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                    progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                                    /////////////////////////////////////////////////////////m.UpdateInline();
                                    //context.CheckInlineMachineStatus();
                                    while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOutHighSpeed) == 0 && (m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                    {
                                        if (context.StopFlag)
                                            return ExitState.Current;
                                        m.UpdateInline();
                                        if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                        {
                                            //20230706  查找E05 【徐明武】 修改 Start
                                            //return DesyncState.Current;
                                            {
                                                Holly.Log.HlLogger.Write("E05 => 60 ");
                                                return DesyncState.Current;
                                            }
                                            //20230706  查找E05 【徐明武】 修改 End 
                                        }
                                        //context.CheckInlineMachineStatus();
                                        Thread.Sleep(50);
                                    }

                                    //20240527 鹏鼎AOI偷停判定 【范克文】 追加 Start
                                    ExportPengDingShopfloorManager.Current.BoardOutHighSpeedFlag = true;
                                    //20240527 鹏鼎AOI偷停判定 【范克文】 追加 End

                                }
                                else if (AutoRunSettings.Default.AutoRunOfflineMode == (int)AutoRunOfflineMode.EntranceToEntrance)
                                {
                                    //左进左出
                                    //op.LocateCamera(GlobalDataManager.Current.ReleaseBoardPosition);
                                    op.ClearBoard();
                                    op.LocateLoader(GlobalDataManager.Current.LastPosition, GlobalDataManager.Current.ReleaseBoardPosition, false);
                                    opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                    progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_ClearingBoard);
                                    /////////////////////////////////////////////////////////m.UpdateInline();
                                    //context.CheckInlineMachineStatus();
                                    while ((m.CompleteProcessStatus & CompleteProcessStatus1.ClearBoard) == 0 && (m.CommandStatusInline & CommandStatusInline.BoardInside) == 0)
                                    {
                                        if (context.StopFlag)
                                            return ExitState.Current;
                                        m.UpdateInline();
                                        if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                        {
                                            //20230706  查找E05 【徐明武】 修改 Start
                                            //return DesyncState.Current;
                                            {
                                                Holly.Log.HlLogger.Write("E05 => 61 ");
                                                return DesyncState.Current;
                                            }
                                            //20230706  查找E05 【徐明武】 修改 End 
                                        }
                                        //context.CheckInlineMachineStatus();
                                        Thread.Sleep(50);
                                    }

                                    //20231211 GRR启动不进板 【李逸凡】 追加 Start
                                    if (!Customization.Current.IsNotSwitchToIgnore)
                                    {
                                        //20231211 GRR启动不进板 【李逸凡】 追加 End
                                        //20230904 离线模式下，报警功能异常 【李逸凡】 追加 Start
                                        int isAlarmBuzzer = -1;
                                        bool isTimeOut = false;
                                        if (AutoRunSettings.Default.IsLocalCommit || AutoRunSettings.Default.IsLocalAndRepairCommit)
                                        {
                                            bool hasReport = false;
                                            while (!hasReport)
                                            {
                                                if (context.StopFlag)
                                                    return ExitState.Current;

                                                System.Threading.Thread.Sleep(50);
                                                //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 Start
                                                //hasReport = reportManager.HasReport && reportManager.RailID == 1;
                                                hasReport = reportManager.HasReport(checkRailID) && reportManager.RailID(checkRailID) == checkRailID;
                                                //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 End
                                            }
                                            //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 Start
                                            //isAlarmBuzzer = reportManager.IsAlarmBuzzer;
                                            isAlarmBuzzer = reportManager.IsAlarmBuzzer(checkRailID);
                                            //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 End
                                        }
                                        else
                                        {
                                            Stopwatch timeoutStopwatch = Stopwatch.StartNew();
                                            TimeSpan timeout = new TimeSpan(0, 0, Customization.Current.DatabaseTimeout);

                                            Holly.Log.HlLogger.Write("HOLLY AOI ============> GlobalDataManager.Current.AlarmBuzzerRail1 before = " + GlobalDataManager.Current.AlarmBuzzerRail1);
                                            while (isAlarmBuzzer == -1)
                                            {
                                                if (context.StopFlag)
                                                    return ExitState.Current;

                                                if (timeoutStopwatch.Elapsed >= timeout)
                                                {
                                                    isTimeOut = true;
                                                    GlobalDataManager.Current.AlarmBuzzerRail1 = 9;
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> GlobalDataManager.Current.AlarmBuzzerRail1 timeout");
                                                }

                                                isAlarmBuzzer = GlobalDataManager.Current.AlarmBuzzerRail1;
                                                System.Threading.Thread.Sleep(100);
                                            }
                                            timeoutStopwatch.Stop();
                                            Holly.Log.HlLogger.Write("HOLLY AOI ============> GlobalDataManager.Current.AlarmBuzzerRail1 after = " + GlobalDataManager.Current.AlarmBuzzerRail1);
                                            if (GlobalDataManager.Current.AlarmBuzzerRail1 == 9)
                                            {
                                                isTimeOut = true;
                                            }
                                            //timeoutStopwatch.Stop();
                                            GlobalDataManager.Current.AlarmBuzzerRail1 = -1;
                                            //20230321 江西奥海：双轨双头2轨不报警板不能正常出板异常对应 【曹志鹏】 修改 End
                                        }
                                        if (GlobalDataManager.Current.IsPassOK1 != "PASS")
                                        {
                                            Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> IsBarcodeUnreadableBuzzerEnabled Start");
                                            // 20200318 检测正常不出板故障对应 追加 End
                                            if (AutoRunSettings.Default.IsInspectionResultBuzzerEnabled && isAlarmBuzzer != 0)
                                            {
                                                //有报警或Mark错误
                                                if (AutoRunSettings.Default.IsDisplayDialogAndBuzzer || AutoRunSettings.Default.IsRepairCommit)
                                                {
                                                    // 20201222 报警不出板对应 追加 Start
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> StateTransitionVisitor.GoState IsDisplayDialogAndBuzzer = " + AutoRunSettings.Default.IsDisplayDialogAndBuzzer);
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> StateTransitionVisitor.GoState IsRepairCommit = " + AutoRunSettings.Default.IsRepairCommit);
                                                    // 20201222 报警不出板对应 追加 End

                                                    op.ClearLampBlink();
                                                    op.SetRedAndBuzzer();
                                                    opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                                    // 20201222 报警不出板对应 修改 Start
                                                    //opResult.Wait();

                                                    m.UpdateInline();
                                                    // 20201222 报警不出板对应 修改 End

                                                    //while ((m.InputStatusInline & InputStatusInline.BoardIn) != 0 || (m.InputStatusInline & InputStatusInline.SlowDown) != 0 || (m.InputStatusInline & InputStatusInline.Stopper) != 0 || (m.InputStatusInline & InputStatusInline.BoardOut) != 0)
                                                    //{
                                                    // 20230117 故障对应仅蜂鸣不弹框【纪明】 删除 Start
                                                    ////20230109 双轨机机内判定弹框提醒 张晨铖追加 Start
                                                    //if (Customization.Current.AlarmNotification.IsEnabled&& !Customization.Current.AlarmNotification.IsHideMarkErrorTip)
                                                    //{
                                                    //    //20230109 双轨机机内判定弹框提醒 张晨铖追加 
                                                    // 20230117 故障对应仅蜂鸣不弹框【纪明】 删除 End  

                                                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                                    ExportShanWeiWatchBoardBYDShopfloorManager.Current.WriteAlarm(1, Lang.UI.UI_Label_MarkError, DateTime.Now);
                                                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End

                                                    UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                                    new Action(
                                                        delegate ()
                                                        {
                                                            //20230717 log输出【ygs】 Start 
                                                            ExportLogOuputManager.Current.OuputLog(11, isAlarmBuzzer == 1 ? Lang.UI.UI_Label_MarkError : string.Format(Lang.UI.UI_Label_ExceedeAlarmQty, AutoRunSettings.Default.AlarmQty));
                                                            //20230717 log输出【ygs】 End
                                                            // 20240406 启动屏幕录制程序 追加 Start                                                    
                                                            SocketScreenRecorder.Current.clientSendStart();
                                                            // 20240406 启动屏幕录制程序 追加 End
                                                            IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                                            messageManager.ShowError(isAlarmBuzzer == 1 ? Lang.UI.UI_Label_MarkError : string.Format(Lang.UI.UI_Label_ExceedeAlarmQty, AutoRunSettings.Default.AlarmQty));
                                                        }));

                                                    Thread.Sleep(50);
                                                    // 20230117 故障对应仅蜂鸣不弹框【纪明】 删除 Start
                                                    //    //20230109 双轨机机内判定弹框提醒 张晨铖追加 Start
                                                    //}
                                                    ////20230109 双轨机机内判定弹框提醒 张晨铖追加 End
                                                    // 20230117 故障对应仅蜂鸣不弹框【纪明】 删除 End

                                                    IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                                    IOperationResult opResult2 = null;

                                                    // 20201222 报警不出板对应 修改 Start
                                                    //op2.SetBuzzer(false);

                                                    op2.ClearCommand();
                                                    op2.ClearLampBuzzer();
                                                    op2.SetBuzzer(false);
                                                    // 20201222 报警不出板对应 修改 End
                                                    opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                                    // 20201222 报警不出板对应 修改 Start
                                                    //opResult2.Wait();

                                                    m.UpdateInline();
                                                    // 20201222 报警不出板对应 修改 End

                                                    // 20200902 西门子NGBUFFER 追加 Start
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> StateTransitionVisitor.GoState SetGreenLampOn");
                                                    IBatchOperationInline op11 = m.CreateBatchOperationInline();
                                                    IOperationResult opResult11 = null;

                                                    op11.ClearCommand();
                                                    op11.SetGreenLampOn();
                                                    opResult11 = op11.Execute(MachineParams.Current.OperationStepTimeout);
                                                    m.UpdateInline();
                                                    // 20200902 西门子NGBUFFER 追加 End

                                                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                                    ExportShanWeiWatchBoardBYDShopfloorManager.Current.UpdateAlarm(3, Lang.UI.UI_Label_MarkError, DateTime.Now);
                                                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End

                                                    // 20240613 太原报警停机增加权限解锁功能 【王晨】 追加 Start
                                                    ExportCommonShopfloorManager.Current.ShowDialog();
                                                    // 20240613 太原报警停机增加权限解锁功能 【王晨】 追加 End

                                                    // 20240304 太原LQ修改 【王晨】 追加 Start
                                                    //if (Customization.Current.IsNoBoardOutNG)
                                                    //{
                                                    //    return ExitState.Current;
                                                    //}
                                                    // 20240304 太原LQ修改 【王晨】 追加 End
                                                }
                                                //return DesyncState.Current;
                                                ////opResult.Wait();
                                                ////m.UpdateInline();

                                                //等待本机提交后再出板
                                                if (Customization.Current.IsWaitLocalCommit)
                                                {
                                                    bool hasReport = false;
                                                    while (!hasReport)
                                                    {
                                                        if (context.StopFlag)
                                                            return ExitState.Current;

                                                        System.Threading.Thread.Sleep(50);
                                                        hasReport = (GlobalDataManager.Current.IsPassOK1 != string.Empty) && (GlobalDataManager.Current.IsPassOK1 != "WAIT");
                                                    }
                                                }


                                                progressListener.Complete();
                                            }

                                        }
                                        //20230904 离线模式下，报警功能异常 【李逸凡】 追加 End
                                        //20231211 GRR启动不进板 【李逸凡】 追加 Start
                                    }
                                    //20231211 GRR启动不进板 【李逸凡】 追加 End
                                }
                                else if (AutoRunSettings.Default.AutoRunOfflineMode == (int)AutoRunOfflineMode.PCBOutAndReturnMode)
                                {
                                    //运行到出板口，再回到入板口
                                    //op.LocateCamera(GlobalDataManager.Current.ReleaseBoardPosition);

                                    //20230504 惠州欣旺达软件增加延时出板功能【张晨铖】 追加 Start 
                                    if (Customization.Current.IsBoardOutDelay)
                                    {
                                        int boardOutDelay = Convert.ToInt32(AutoRunSettings2.Default.BoardOutDelay) * 1000;
                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> BoardOut boardOutDelay = " + boardOutDelay);
                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> BoardOut boardOutDelay Start");
                                        Thread.Sleep(boardOutDelay);
                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> BoardOut boardOutDelay End");
                                    }
                                    //20230504 惠州欣旺达软件增加延时出板功能【张晨铖】 追加 End

                                    op.BoardOutHighSpeed();
                                    op.LocateLoader(GlobalDataManager.Current.LastPosition, GlobalDataManager.Current.ReleaseBoardPosition, false);
                                    opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                    progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);
                                    //opResult.Wait();
                                    /////////////////////////////////////////////////////////m.UpdateInline();
                                    //context.CheckInlineMachineStatus();
                                    while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOutHighSpeed) == 0 && (m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                    {
                                        if (context.StopFlag)
                                            return ExitState.Current;
                                        m.UpdateInline();
                                        if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                        {
                                            //20230706  查找E05 【徐明武】 修改 Start
                                            //return DesyncState.Current;
                                            {
                                                Holly.Log.HlLogger.Write("E05 => 62 ");
                                                return DesyncState.Current;
                                            }
                                            //20230706  查找E05 【徐明武】 修改 End 
                                        }
                                        //context.CheckInlineMachineStatus();
                                        Thread.Sleep(50);
                                    }

                                    //20240527 鹏鼎AOI偷停判定 【范克文】 追加 Start
                                    ExportPengDingShopfloorManager.Current.BoardOutHighSpeedFlag = true;
                                    //20240527 鹏鼎AOI偷停判定 【范克文】 追加 End

                                    op = m.CreateBatchOperationInline();
                                    op.ClearBoard();
                                    opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                    progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_ClearingBoard);

                                    /////////////////////////////////////////////////////////m.UpdateInline();
                                    //context.CheckInlineMachineStatus();
                                    while ((m.CompleteProcessStatus & CompleteProcessStatus1.ClearBoard) == 0 && (m.CommandStatusInline & CommandStatusInline.BoardInside) == 0)
                                    {
                                        if (context.StopFlag)
                                            return ExitState.Current;
                                        m.UpdateInline();
                                        if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                        {
                                            //20230706  查找E05 【徐明武】 修改 Start
                                            //return DesyncState.Current;
                                            {
                                                Holly.Log.HlLogger.Write("E05 => 63 ");
                                                return DesyncState.Current;
                                            }
                                            //20230706  查找E05 【徐明武】 修改 End 
                                        }
                                        //context.CheckInlineMachineStatus();
                                        Thread.Sleep(50);
                                    }
                                }
                            }
                            else
                            {
                                // 20201126 报警同步 追加 Start
                                MachineAlarmDataControl.Current.WaitAlarmCheckEnd(checkRailID);
                                // 20201126 报警同步 追加 End
                                // 20201128 报警时机修改 追加 Start
                                MachineAlarmDataControl.Current.AlarmNotification(m);
                                // 20201128 报警时机修改 追加 End
                                // 20220108 淳华稼动率 追加 Start
                                ExportChunHuaShopfloorManager.Current.ExportBoardOutLog();
                                // 20220108 淳华稼动率 追加 End
                                //无下机信号
                                if (AutoRunSettings.Default.NoNextMachineSignal)
                                {
                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> no NextMachineSignal Step");
                                    //op.LocateCamera(GlobalDataManager.Current.ReleaseBoardPosition);
                                    // 20220613 双面机同步到出板口 追加 Start
                                    if (AutoRunSettings2.Default.IsDoubleSideAOI && AutoRunSettings2.Default.IsUseDataControl && AutoRunSettings2.Default.IsSyncBoardOutHighSpeed)
                                    {
                                        //DoubleSideDataControl.Current.SyncBoardOutHighSpeed(1);
                                        HeartBeatUtils heartBeat = new HeartBeatUtils(5);
                                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > DoubleSide wait other side data Start curTime =" + DateTimeUtils.GetNow());
                                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > DoubleSide wait other side data DoubleSideDataControl.Current.IsHaveOtherSideResult =" + DoubleSideDataControl.Current.DoublesideIsHaveOtherSideResult);
                                        while (!DoubleSideDataControl.Current.DoublesideIsHaveOtherSideResult)
                                        {
                                            if (heartBeat.IsOutput())
                                            {
                                                Holly.Log.HlLogger.Write("HOLLY AOI ===== > DoubleSide wait other side data(ImageAcquisitionMachine) curTime =" + DateTimeUtils.GetNow());
                                            }

                                            if (DoubleSideDataControl.Current.DoublesideIsHaveOtherSideResult)
                                            {
                                                DoubleSideDataControl.Current.DoublesideIsHaveOtherSideResult = false;
                                                break;
                                            }
                                        }
                                    }
                                    // 20220613 双面机同步到出板口 追加 End
                                    //20230504 惠州欣旺达软件增加延时出板功能【张晨铖】 追加 Start 
                                    if (Customization.Current.IsBoardOutDelay)
                                    {
                                        int boardOutDelay = Convert.ToInt32(AutoRunSettings2.Default.BoardOutDelay) * 1000;
                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> BoardOut boardOutDelay = " + boardOutDelay);
                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> BoardOut boardOutDelay Start");
                                        Thread.Sleep(boardOutDelay);
                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> BoardOut boardOutDelay End");
                                    }
                                    //20230504 惠州欣旺达软件增加延时出板功能【张晨铖】 追加 End

                                    op.BoardOutHighSpeed();

                                    op.LocateLoader(GlobalDataManager.Current.LastPosition, GlobalDataManager.Current.ReleaseBoardPosition, false);
                                    opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                    progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);
                                    //opResult.Wait();
                                    /////////////////////////////////////////////////////////m.UpdateInline();
                                    //context.CheckInlineMachineStatus();
                                    while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                    {
                                        if (context.StopFlag)
                                            return ExitState.Current;
                                        m.UpdateInline();
                                        if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                        {
                                            //20230706  查找E05 【徐明武】 修改 Start
                                            //return DesyncState.Current;
                                            {
                                                Holly.Log.HlLogger.Write("E05 => 64 ");
                                                return DesyncState.Current;
                                            }
                                            //20230706  查找E05 【徐明武】 修改 End 
                                        }
                                        //context.CheckInlineMachineStatus();
                                        Thread.Sleep(50);
                                    }

                                    //20240527 鹏鼎AOI偷停判定 【范克文】 追加 Start
                                    ExportPengDingShopfloorManager.Current.BoardOutHighSpeedFlag = true;
                                    //20240527 鹏鼎AOI偷停判定 【范克文】 追加 End

                                    progressListener.Complete();
                                    Holly.Log.HlLogger.Write("HOLLY AOI NoNextMachineSignal ============> Board Out End");
                                }
                                else
                                {
                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> has NextMachineSignal Step");

                                    // 20201010 异物检测 追加 Start
                                    //20230826 立臻双面机不使用boardouthightspeed 【曹志鹏】 修改 Start
                                    //if (!Customization.Current.SpotShopfloor.IsEnabled)

                                    //20240416 抚州比亚迪2D设备机内判定出板方式修改【陆志福】修改 Start
                                    //if (!Customization.Current.SpotShopfloor.IsEnabled && !AutoRunSettings2.Default.IsNotUseBoardOutHighSpeed)

                                    var noBoardOutHighSpeed = Customization.Current.NoBoardOutHighSpeed
                                        || Customization.Current.SpotShopfloor.IsEnabled
                                        || AutoRunSettings2.Default.IsNotUseBoardOutHighSpeed;
                                    if (!noBoardOutHighSpeed)
                                    //20240416 抚州比亚迪2D设备机内判定出板方式修改【陆志福】修改 End
                                    //20230826 立臻双面机不使用boardouthightspeed 【曹志鹏】 修改 End
                                    {
                                        // 20220613 双面机同步到出板口 追加 Start
                                        if (AutoRunSettings2.Default.IsDoubleSideAOI && AutoRunSettings2.Default.IsUseDataControl && AutoRunSettings2.Default.IsSyncBoardOutHighSpeed)
                                        {
                                            //DoubleSideDataControl.Current.SyncBoardOutHighSpeed(1);
                                            HeartBeatUtils heartBeat = new HeartBeatUtils(5);
                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > DoubleSide wait other side data Start curTime =" + DateTimeUtils.GetNow());
                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > DoubleSide wait other side data DoubleSideDataControl.Current.IsHaveOtherSideResult =" + DoubleSideDataControl.Current.DoublesideIsHaveOtherSideResult);
                                            while (!DoubleSideDataControl.Current.DoublesideIsHaveOtherSideResult)
                                            {
                                                if (heartBeat.IsOutput())
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > DoubleSide wait other side data(ImageAcquisitionMachine) curTime =" + DateTimeUtils.GetNow());
                                                }

                                                if (DoubleSideDataControl.Current.DoublesideIsHaveOtherSideResult)
                                                {
                                                    DoubleSideDataControl.Current.DoublesideIsHaveOtherSideResult = false;
                                                    break;
                                                }
                                            }
                                        }
                                        // 20220613 双面机同步到出板口 追加 End
                                        // 20201010 异物检测 追加 End
                                        //出板，先走到出板感应器
                                        IBatchOperationInline op1 = m.CreateBatchOperationInline();
                                        IOperationResult opResult1 = null;

                                        //20230504 惠州欣旺达软件增加延时出板功能【张晨铖】 追加 Start 
                                        if (Customization.Current.IsBoardOutDelay)
                                        {
                                            int boardOutDelay = Convert.ToInt32(AutoRunSettings2.Default.BoardOutDelay) * 1000;
                                            Holly.Log.HlLogger.Write("HOLLY AOI ============> BoardOut boardOutDelay = " + boardOutDelay);
                                            Holly.Log.HlLogger.Write("HOLLY AOI ============> BoardOut boardOutDelay Start");
                                            Thread.Sleep(boardOutDelay);
                                            Holly.Log.HlLogger.Write("HOLLY AOI ============> BoardOut boardOutDelay End");
                                        }
                                        //20230504 惠州欣旺达软件增加延时出板功能【张晨铖】 追加 End

                                        op1.BoardOutHighSpeed();
                                        opResult1 = op1.Execute(MachineParams.Current.OperationStepTimeout);
                                        progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);
                                        //opResult1.Wait();

                                        HeartBeatUtils heartBeatBoardOutHighSpeed = new HeartBeatUtils(2);

                                        // 20201030 青岛双面机特别对应 追加 Start
                                        // 无法等到 BoardOut HighSpeed 成功的返回，超时5秒追加
                                        Stopwatch timeoutStopwatch = Stopwatch.StartNew();
                                        TimeSpan timeout = new TimeSpan(0, 0, 5);
                                        // 20201030 青岛双面机特别对应 追加 End

                                        while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOutHighSpeed) == 0 && (m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                        {
                                            if (heartBeatBoardOutHighSpeed.IsOutput())
                                            {
                                                Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) Wait BoardOut HighSpeed Complete 2s ......");
                                            }

                                            if (context.StopFlag)
                                                return ExitState.Current;
                                            m.UpdateInline();
                                            if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                            {
                                                //20230706  查找E05 【徐明武】 修改 Start
                                                //return DesyncState.Current;
                                                {
                                                    Holly.Log.HlLogger.Write("E05 => 65 ");
                                                    return DesyncState.Current;
                                                }
                                                //20230706  查找E05 【徐明武】 修改 End 
                                            }
                                            //context.CheckInlineMachineStatus();
                                            // 20201030 青岛双面机特别对应 追加 Start
                                            // 超时设置
                                            if (timeoutStopwatch.Elapsed >= timeout)
                                            {
                                                timeoutStopwatch.Stop();

                                                Holly.Log.HlLogger.Write("HOLLY AOI ============> BoardOut HighSpeed Wait Signal Timeout");

                                                break;
                                            }
                                            // 20201030 青岛双面机特别对应 追加 End

                                            Thread.Sleep(50);
                                        }

                                        //20240527 鹏鼎AOI偷停判定 【范克文】 追加 Start
                                        ExportPengDingShopfloorManager.Current.BoardOutHighSpeedFlag = true;
                                        //20240527 鹏鼎AOI偷停判定 【范克文】 追加 End

                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> BoardOut HighSpeed");
                                        // 20201010 异物检测 追加 Start
                                    }
                                    // 20201010 异物检测 追加 End

                                    #region mes过站
                                    if (Customization.Current.ZhengzhouFoxconnTime.IsEnabled)
                                    {
                                        DateTime boardOutTime = DateTime.Now;
                                        GlobalDataManager.Current.BoardOutTime.Add(boardOutTime);
                                    }

                                    // 20230719 双面机条码识别报警【刘剑】 追加 Start
                                    //  添加监控是否有异常报警
                                    if (AutoRunSettings2.Default.IsDoubleSideAOI && AutoRunSettings2.Default.IsDoubleSideBarcodeNullAlarm)
                                    {
                                        DoubleSideDataControl.Current.DoubleSideCheckBarcode(m);
                                    }
                                    // 20230719 双面机条码识别报警【刘剑】 追加 End


                                    // 20191031 飞安瑞 MES 追加 Start
                                    if (Customization.Current.FeiAnRuiShopfloor.IsEnabled)
                                    {
                                        FeiAnRuiCheckBarcode(m);
                                    }
                                    // 20191031 飞安瑞 MES 追加 End

                                    // 20210915 欧陆通MES 追加 Start
                                    if (Customization.Current.OuLuTongShopfloor.IsEnabled && !Customization.Current.OuLuTongShopfloor.IsCheckRouteByScanner)
                                    {
                                        //相机过站报警
                                        ExportOuLuTongShopfloorManager.Current.OuLuTongCheckBarcode(m);
                                    }
                                    // 20210915 欧陆通MES 追加 End

                                    // 20230203 景旺AOIMES 追加 Start 
                                    if (Customization.Current.JingWangAOIShopfloor.IsEnabled)
                                    {
                                        //ExportJingWangAOIShopfloorManager.Current.InitOnlineInspectBarcode(1);
                                        ExportJingWangAOIShopfloorManager.Current.JingWangCheckBarcode(m);
                                    }
                                    // 20230203 景旺AOIMES 追加 End

                                    //20230908 常州移远MES修改 【李逸凡】 删除 Start

                                    //// 20220106 常州移远MES 追加 Start
                                    //if (Customization.Current.ChangZhouYiYuanShopfloor.IsEnabled)
                                    //{
                                    //    //相机过站报警
                                    //    ExportChangZhouYiYuanShopfloorManager.Current.ChangZhouYiYuanCheckBarcode(m);
                                    //}
                                    //// 20220106 常州移远MES 追加 End

                                    //20230908 常州移远MES修改 【李逸凡】 删除 End

                                    // 20220221 淮安鹏鼎条码比对 追加 Start
                                    if (Customization.Current.ZdtcoAOIReplaceInfo.IsBarcodeCompar)
                                    {
                                        ExportZdtcoAOIReplaceInfoManager.Current.HuaiAnPengDingCheckBarcode(m);
                                    }
                                    // 20220221 淮安鹏鼎条码比对 追加 End

                                    //20240702 达亮WebService2 【史彦洋】追加 Start
                                    if (Customization.Current.DLWebService2Shopfloor.IsEnabled)
                                    {
                                        bool exit = ExportDLWebService2ShopfloorManager.Current.WaitVerify(m);
                                    }
                                    //20240702 达亮WebService2 【史彦洋】追加 End

                                    // 20211224 万都海拉MES 追加 Start
                                    if (Customization.Current.WanDuShopfloor.IsEnabled && AutoRunSettings.Default.IsEnableMES)
                                    {
                                        ExportWanDuShopfloorManager.Current.WanDuCheckBarcode(m);
                                    }
                                    // 20211224 万都海拉MES 追加 End

                                    // 20220121 冠宇MES(CheckRoute) 追加 Start
                                    // 20220214 冠宇MES(新增轨道号控制) 修改 Start
                                    // Customization.Current.GuanYuShopfloor2.IsEnabled && AutoRunSettings.Default.IsEnableMES
                                    if (Customization.Current.GuanYuShopfloor2.IsEnabled && AutoRunSettings.Default.IsEnableMES)
                                    {
                                        // 20220214 冠宇MES(新增轨道号控制) 修改 End
                                        ExportGuanYuShopfloor2Manager.Current.GuanyuCheckBarcode(m);
                                    }
                                    // 20220121 冠宇MES(CheckRoute) 追加 End


                                    // 20220913 宝龙比亚迪MES 追加 Start
                                    if (Customization.Current.BaoLongBYDShopfloor.IsEnabled && AutoRunSettings.Default.IsEnableMES)
                                    {
                                        // 20220918 宝龙比亚迪MES 修改 Start
                                        //ExportBaoLongBYDShopfloorManager.Current.BaoLongBYDCheckBarcode(m);
                                        if (!ExportBaoLongBYDShopfloorManager.Current.BaoLongBYDCheckBarcode(m))
                                        {
                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > FoxconnManagementBarcodes Error Board Out Start");
                                            IBatchOperationInline opFoxconnManagementBarcodesBoardOut = m.CreateBatchOperationInline();
                                            IOperationResult opFoxconnManagementBarcodesBoardOutRet = null;

                                            opFoxconnManagementBarcodesBoardOut.BoardOutNG();
                                            opFoxconnManagementBarcodesBoardOutRet = opFoxconnManagementBarcodesBoardOut.Execute(MachineParams.Current.OperationStepTimeout);
                                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                                            HeartBeatUtils boardOutHeartBeat = new HeartBeatUtils(1);
                                            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                            {
                                                if (boardOutHeartBeat.IsOutput())
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > FoxconnManagementBarcodes wait BoardOut Complete");
                                                }

                                                if (context.StopFlag)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > FoxconnManagementBarcodes Error return ExitState.Current");
                                                    return ExitState.Current;
                                                }

                                                m.UpdateInline();
                                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > FoxconnManagementBarcodes Error return DesyncState.Current");
                                                    //20230706  查找E05 【徐明武】 修改 Start
                                                    //return DesyncState.Current;
                                                    {
                                                        Holly.Log.HlLogger.Write("E05 => 66 ");
                                                        return DesyncState.Current;
                                                    }
                                                    //20230706  查找E05 【徐明武】 修改 End 
                                                }
                                                Thread.Sleep(50);
                                            }

                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > FoxconnManagementBarcodes BoardOut End return GoState.Current");
                                            return GoState.Current;
                                        }
                                        // 20220918 宝龙比亚迪MES 修改 End
                                    }
                                    // 20220913 宝龙比亚迪MES 追加 End

                                    // 20220412 昆山玺达移远MES 追加 Start
                                    if (Customization.Current.XiDaShopfloor.IsEnabled && AutoRunSettings.Default.IsEnableMES)
                                    {
                                        ExportXiDaShopfloorManager.Current.XDCheckBarcode(m);
                                    }
                                    // 20220412 昆山玺达移远MES 追加 End

                                    // 20221020 立达信MES 追加 Start
                                    if (Customization.Current.LiDaXinShopfllor1.IsEnabled && AutoRunSettings.Default.IsEnableMES)
                                    {
                                        ExportLiDaXinShopfloorManager1.Current.LiDaXinCheckBarcode(m);
                                    }
                                    // 20221020 立达信MES 追加 End
                                    // 20230104 龙华富士康MES 追加 Start
                                    if (Customization.Current.FoxconnShopfloor_ACKH.IsEnabled && AutoRunSettings.Default.IsEnableMES && !Customization.Current.FoxconnShopfloor_ACKH.IsCheckRouteByScanner)
                                    {
                                        ExportFoxconnShopfloor_ACKHManager.Current.ACKHCheckBarcode(m);
                                    }
                                    // 20230104 龙华富士康MES 追加 End

                                    // 20221206 三星电表MES 追加 Start
                                    if (Customization.Current.SamsungBarcodeMapping.IsEnabled && AutoRunSettings.Default.IsEnableMES && !Customization.Current.SamsungBarcodeMapping.IsCheckRouteByScanner)
                                    {
                                        ExportSamsungShopfloorManger.Current.SamsungCheckBarcode(m);
                                    }
                                    // 20221206 三星电表MES 追加 Ends

                                    // 20210917 鹏元晟MES 追加 Start
                                    // 20210922 鹏元晟MES（相机过站） 修改 Start
                                    //if (Customization.Current.PengYuanChengShopfloor.IsEnabled)

                                    if (Customization.Current.PengYuanChengShopfloor.IsEnabled && (!MachineParams.Current.BarcodeSerialPort.IsEnabled))
                                    // 20210922 鹏元晟MES（相机过站） 修改 End
                                    {
                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> PengYuanChengShopfloor CheckBarcode");
                                        ExportPengYuanChengShopfloorManger.Current.WaitCheckBarcode(m);
                                    }
                                    // 20210917 鹏元晟MES 追加 End

                                    // 20200703 华贝MES 追加 Start
                                    if (Customization.Current.HuaBei2ndShopfloor.IsEnabled)
                                    {
                                        ExportHuaBeiShopfloorManger.Current.HuaBeiCheckBarcode(m);
                                    }
                                    // 20200703 华贝MES 追加 End


                                    // 20221129 闻讯MES 追加 Start
                                    if (Customization.Current.kMWenXunShopfloorParams.IsEnabled)
                                    {
                                        //20221206 昆明闻讯mes 追加 start
                                        bool isReturn = ExportKMWenXunManager.Current.KMWenXunCheckBarcode(m);
                                        if (!isReturn)
                                        {
                                            Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) KMWenXunCheckBarcode Error Board Out Start");
                                            IBatchOperationInline opKMWXOutBoard = m.CreateBatchOperationInline();
                                            IOperationResult opKMWXOutBoardRet = null;

                                            opKMWXOutBoard.BoardOutNG();
                                            opKMWXOutBoardRet = opKMWXOutBoard.Execute(MachineParams.Current.OperationStepTimeout);
                                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                                            HeartBeatUtils boardOutHeartBeat = new HeartBeatUtils(1);
                                            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                            {
                                                if (boardOutHeartBeat.IsOutput())
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) ExportKMWenXunManager wait BoardOut Complete");
                                                }

                                                if (context.StopFlag)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) ExportKMWenXunManager Error return ExitState.Current");
                                                    return ExitState.Current;
                                                }

                                                m.UpdateInline();
                                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) ExportKMWenXunManager Error return DesyncState.Current");
                                                    //20230706  查找E05 【徐明武】 修改 Start
                                                    //return DesyncState.Current;
                                                    {
                                                        Holly.Log.HlLogger.Write("E05 => 67 ");
                                                        return DesyncState.Current;
                                                    }
                                                    //20230706  查找E05 【徐明武】 修改 End 
                                                }
                                                Thread.Sleep(50);
                                            }

                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) ExportKMWenXunManager BoardOut End return GoState.Current");
                                            return GoState.Current;
                                        }
                                        //20221206 昆明闻讯mes 追加 End
                                    }
                                    // 20221129 闻讯MES 追加 End

                                    // 20220420 东勤MES 追加 Start
                                    if (Customization.Current.DongQinShopfloor.IsEnabled)
                                    {
                                        ExportDongQinShopfloorManager.Current.CheckBarcode(m);
                                    }
                                    // 20220420 东勤MES 追加 End

                                    // 20221128 贝思特MES 追加 Start
                                    bool checkBarcodeResult = false;
                                    if ((Customization.Current.BeiSiTeShopfloor.IsEnabled && AutoRunSettings.Default.IsEnableMES))
                                    {
                                        // 20230111 贝思特MES报错不退出自动运行重测 修改 Start
                                        //ExportBeiSiTeShopfloorManger.Current.BeiSiTeCheckBarcode(m);

                                        checkBarcodeResult = ExportBeiSiTeShopfloorManger.Current.BeiSiTeCheckBarcode(m);
                                        // 20230111 贝思特MES报错不退出自动运行重测 修改 End
                                    }
                                    // 20221128 贝思特MES 追加 End

                                    //20230327 抚州比亚迪Mes【张晨铖】 追加 Start
                                    //20240513 抚州比亚迪增加点检开关【曹志鹏】修改 Start
                                    //if (Customization.Current.FuZhouBYDShopfloor.IsEnabled && AutoRunSettings.Default.IsEnableMES)
                                    if (Customization.Current.FuZhouBYDShopfloor.IsEnabled && AutoRunSettings.Default.IsEnableMES && !AutoRunSettings.Default.IsSpotCheckEnable)
                                    //20240513 抚州比亚迪增加点检开关【曹志鹏】修改 End
                                    {
                                        if (!ExportFuZhouBYDShopfloorManager.Current.CheckBarcode(m))
                                        {
                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportFuZhouBYDShopfloorManager Error Board Out Start");
                                            IBatchOperationInline opFuZhouBYDOutBoard = m.CreateBatchOperationInline();
                                            IOperationResult opFuZhouBYDOutBoardRet = null;

                                            opFuZhouBYDOutBoard.BoardOutNG();
                                            opFuZhouBYDOutBoardRet = opFuZhouBYDOutBoard.Execute(MachineParams.Current.OperationStepTimeout);
                                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                                            HeartBeatUtils boardOutHeartBeat = new HeartBeatUtils(1);
                                            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                            {
                                                if (boardOutHeartBeat.IsOutput())
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportFuZhouBYDShopfloorManager wait BoardOut Complete");
                                                }

                                                if (context.StopFlag)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportFuZhouBYDShopfloorManager Error return ExitState.Current");
                                                    return ExitState.Current;
                                                }

                                                m.UpdateInline();
                                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportFuZhouBYDShopfloorManager Error return DesyncState.Current");
                                                    //20230706  查找E05 【徐明武】 修改 Start
                                                    //return DesyncState.Current;
                                                    {
                                                        Holly.Log.HlLogger.Write("E05 => 68 ");
                                                        return DesyncState.Current;
                                                    }
                                                    //20230706  查找E05 【徐明武】 修改 End 
                                                }
                                                Thread.Sleep(50);
                                            }

                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportFuZhouBYDShopfloorManager BoardOut End return GoState.Current");
                                            return GoState.Current;
                                        }
                                    }
                                    //20230327 抚州比亚迪Mes【张晨铖】 追加 End

                                    // 20230620 昆山立讯Mes DEMO机途程检查【王小雪】 追加 Start
                                    if (Customization.Current.LuxshareShopfloor_KS2.IsEnabled && AutoRunSettings.Default.IsEnableMES)
                                    {
                                        if (!ExportLuxshareShopfloor_KS2Manager.Current.CheckBarcode(m))
                                        {
                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportLuxshareShopfloor_KS2Manager Error Board Out Start");
                                            IBatchOperationInline opLuxshareOutBoard = m.CreateBatchOperationInline();
                                            IOperationResult opLuxshareOutBoardRet = null;

                                            opLuxshareOutBoard.BoardOutNG();
                                            opLuxshareOutBoardRet = opLuxshareOutBoard.Execute(MachineParams.Current.OperationStepTimeout);
                                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                                            HeartBeatUtils boardOutHeartBeat = new HeartBeatUtils(1);
                                            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                            {
                                                if (boardOutHeartBeat.IsOutput())
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportLuxshareShopfloor_KS2Manager wait BoardOut Complete");
                                                }

                                                if (context.StopFlag)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportLuxshareShopfloor_KS2Manager Error return ExitState.Current");
                                                    return ExitState.Current;
                                                }

                                                m.UpdateInline();
                                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportLuxshareShopfloor_KS2Manager Error return DesyncState.Current");
                                                    //20230706  查找E05 【徐明武】 修改 Start
                                                    //return DesyncState.Current;
                                                    {
                                                        Holly.Log.HlLogger.Write("E05 => 69 ");
                                                        return DesyncState.Current;
                                                    }
                                                    //20230706  查找E05 【徐明武】 修改 End 
                                                }
                                                Thread.Sleep(50);
                                            }
                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportLuxshareShopfloor_KS2Manager BoardOut End return GoState.Current");
                                            return GoState.Current;
                                        }
                                    }
                                    // 20230620 昆山立讯Mes DEMO机途程检查【王小雪】 追加 End

                                    // 20230809 长沙雨花区比亚迪MES对接 【王晨】 追加 Start
                                    if (Customization.Current.ChangShaBYDShopfloor.IsEnabled && AutoRunSettings.Default.IsEnableMES)
                                    {
                                        if (ExportChangShaBYDShopfloorManager.Current.CheckBarcode(m))
                                        {
                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportChangShaBYDShopfloorManager Error Board Out Start");
                                            IBatchOperationInline opChangShaBYDOutBoard = m.CreateBatchOperationInline();
                                            IOperationResult opChangShaBYDOutBoardRet = null;

                                            opChangShaBYDOutBoard.BoardOutNG();
                                            opChangShaBYDOutBoardRet = opChangShaBYDOutBoard.Execute(MachineParams.Current.OperationStepTimeout);
                                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                                            HeartBeatUtils boardOutHeartBeat = new HeartBeatUtils(1);
                                            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                            {
                                                if (boardOutHeartBeat.IsOutput())
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportChangShaBYDShopfloorManager wait BoardOut Complete");
                                                }

                                                if (context.StopFlag)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportChangShaBYDShopfloorManager Error return ExitState.Current");
                                                    return ExitState.Current;
                                                }

                                                m.UpdateInline();
                                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportChangShaBYDShopfloorManager Error return DesyncState.Current");
                                                    return DesyncState.Current;
                                                }
                                                Thread.Sleep(50);
                                            }

                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportChangShaBYDShopfloorManager BoardOut End return GoState.Current");
                                            return GoState.Current;
                                        }
                                    }
                                    // 20230809 长沙雨花区比亚迪MES对接 【王晨】 追加 Start

                                    //20240321 达亮WebService 【李洋】追加 Start
                                    if (Customization.Current.DLWebServiceShopfloor.IsEnabled && AutoRunSettings.Default.IsEnableMES)
                                    {
                                        if (!ExportDLWebServiceShopfloorManager.Current.CheckBarcode(m))
                                        {
                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportDLWebServiceShopfloorManager Error Board Out Start");
                                            IBatchOperationInline opDLWebServiceOutBoard = m.CreateBatchOperationInline();
                                            IOperationResult opDLWebServiceOutBoardRet = null;

                                            opDLWebServiceOutBoard.BoardOutNG();
                                            opDLWebServiceOutBoardRet = opDLWebServiceOutBoard.Execute(MachineParams.Current.OperationStepTimeout);
                                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                                            HeartBeatUtils boardOutHeartBeat = new HeartBeatUtils(1);
                                            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                            {
                                                if (boardOutHeartBeat.IsOutput())
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportDLWebServiceShopfloorManager wait BoardOut Complete");
                                                }

                                                if (context.StopFlag)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportDLWebServiceShopfloorManager Error return ExitState.Current");
                                                    return ExitState.Current;
                                                }

                                                m.UpdateInline();
                                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportDLWebServiceShopfloorManager Error return DesyncState.Current");
                                                    //20230706  查找E05 【徐明武】 修改 Start
                                                    //return DesyncState.Current;
                                                    {
                                                        Holly.Log.HlLogger.Write("E05 => 68 ");
                                                        return DesyncState.Current;
                                                    }
                                                    //20230706  查找E05 【徐明武】 修改 End 
                                                }
                                                Thread.Sleep(50);
                                            }

                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportFuZhouBYDShopfloorManager BoardOut End return GoState.Current");
                                            return GoState.Current;
                                        }
                                    }
                                    //20240321 达亮WebService 【李洋】追加 End

                                    // 20201106 指定错误类型停机报警 追加 Start
                                    if (Customization.Current.AlarmNotification.IsEnabled)
                                    {
                                        ExportAlarmNotificationManager.Current.CheckAlarm(m);
                                    }
                                    // 20201106 指定错误类型停机报警 追加 End
                                    // 20230710 上海安波福中央电器MES 【ygs】 Start
                                    if (Customization.Current.AnBoFuZhongYangDqShopfloor.IsEnabled && AutoRunSettings.Default.IsEnableMES)
                                    {
                                        ExportAnBoFuZhongYangDqShopfloorManager.Current.CheckBarcode(m);
                                    }
                                    // 20230710 上海安波福中央电器MES 【ygs】 End

                                    // 20200519 讯芯2次修改 追加 Start
                                    // 20200616 讯芯不读SPI文件 修改 Start
                                    //if (Customization.Current.XunXin.IsEnabled)
                                    //{
                                    //    XunxinCheckBarcode(m);
                                    //}

                                    // 20200724 讯芯优化修改 修改 Start
                                    //if (Customization.Current.XunXin.IsEnabled && Customization.Current.XunXin.IsSPIFileEnabled)

                                    if (Customization.Current.XunXin.IsEnabled && AutoRunSettings.Default.IsSPIFileEnable)
                                    // 20200724 讯芯优化修改 修改 End
                                    {
                                        XunxinCheckBarcode(m);
                                    }
                                    // 20200616 讯芯不读SPI文件 修改 End
                                    // 20200519 讯芯2次修改 追加 End

                                    // 20201030 德斯倍Map功能 追加 Start
                                    if (Customization.Current.DesibeiShopfloor.IsEnabled)
                                    {
                                        DesibeiCheckBarcode(m);

                                        // 信息Err出板
                                        if (ExportDesibeiShopfloorManager.Current.mainBarcodeStatus == ExportDesibeiShopfloorManager.BarcodeNotExist ||
                                            ExportDesibeiShopfloorManager.Current.mainBarcodeStatus == ExportDesibeiShopfloorManager.MapFileError)
                                        {
                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportDesibeiShopfloorManager Error Board Out Start");
                                            IBatchOperationInline opDesibeiOutBoard = m.CreateBatchOperationInline();
                                            IOperationResult opDesibeiOutBoardRet = null;

                                            opDesibeiOutBoard.BoardOutNG();
                                            opDesibeiOutBoardRet = opDesibeiOutBoard.Execute(MachineParams.Current.OperationStepTimeout);
                                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                                            HeartBeatUtils boardOutHeartBeat = new HeartBeatUtils(1);
                                            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                            {
                                                if (boardOutHeartBeat.IsOutput())
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportDesibeiShopfloorManager wait BoardOut Complete");
                                                }

                                                if (context.StopFlag)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportDesibeiShopfloorManager Error return ExitState.Current");
                                                    return ExitState.Current;
                                                }

                                                m.UpdateInline();
                                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportDesibeiShopfloorManager Error return DesyncState.Current");
                                                    //20230706  查找E05 【徐明武】 修改 Start
                                                    //return DesyncState.Current;
                                                    {
                                                        Holly.Log.HlLogger.Write("E05 => 69 ");
                                                        return DesyncState.Current;
                                                    }
                                                    //20230706  查找E05 【徐明武】 修改 End 
                                                }
                                                Thread.Sleep(50);
                                            }

                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportDesibeiShopfloorManager BoardOut End return GoState.Current");
                                            return GoState.Current;
                                        }
                                    }
                                    // 20201030 德斯倍Map功能 追加 End

                                    // 20201112 移远(佳士达)MES 追加 Start
                                    if (Customization.Current.QisdaShopfloor.IsEnabled)
                                    {
                                        QisdaCheckBarcode(m);

                                        // 信息Err出板
                                        if (ExportQisdaShopfloorManager.Current.mainBarcodeStatus == ExportQisdaShopfloorManager.BarcodeNotExist ||
                                            ExportQisdaShopfloorManager.Current.mainBarcodeStatus == ExportQisdaShopfloorManager.hasError)
                                        {
                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportQisdaShopfloorManager Error Board Out Start");
                                            IBatchOperationInline opQisdaOutBoard = m.CreateBatchOperationInline();
                                            IOperationResult opQisdaOutBoardRet = null;

                                            opQisdaOutBoard.BoardOutNG();
                                            opQisdaOutBoardRet = opQisdaOutBoard.Execute(MachineParams.Current.OperationStepTimeout);
                                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                                            HeartBeatUtils boardOutHeartBeat = new HeartBeatUtils(1);
                                            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                            {
                                                if (boardOutHeartBeat.IsOutput())
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportQisdaShopfloorManager wait BoardOut Complete");
                                                }

                                                if (context.StopFlag)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportQisdaShopfloorManager Error return ExitState.Current");
                                                    return ExitState.Current;
                                                }

                                                m.UpdateInline();
                                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportQisdaShopfloorManager Error return DesyncState.Current");
                                                    //20230706  查找E05 【徐明武】 修改 Start
                                                    //return DesyncState.Current;
                                                    {
                                                        Holly.Log.HlLogger.Write("E05 => 70 ");
                                                        return DesyncState.Current;
                                                    }
                                                    //20230706  查找E05 【徐明武】 修改 End 
                                                }
                                                Thread.Sleep(50);
                                            }

                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportQisdaShopfloorManager BoardOut End return GoState.Current");
                                            return GoState.Current;
                                        }
                                    }
                                    // 20201112 移远(佳士达)MES 追加 End

                                    // 20210312 信维MES 追加 Start
                                    // 20210414 信维MES开关 修改 Start
                                    //if (Customization.Current.XinWeiShopfloor.IsEnabled)

                                    if (ExportXinWeiShopfloorManager.Current.IsEnabled)
                                    // 20210414 信维MES开关 修改 End
                                    {
                                        XinWeiCheckBarcode(m);

                                        // 信息Err出板
                                        if (ExportXinWeiShopfloorManager.Current.mainBarcodeStatus == ExportXinWeiShopfloorManager.BarcodeNotExist ||
                                            ExportXinWeiShopfloorManager.Current.mainBarcodeStatus == ExportXinWeiShopfloorManager.hasError)
                                        {
                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportXinWeiShopfloorManager Error Board Out Start");
                                            IBatchOperationInline opXinWeiOutBoard = m.CreateBatchOperationInline();
                                            IOperationResult opQisdaOutBoardRet = null;

                                            opXinWeiOutBoard.BoardOutNG();
                                            opQisdaOutBoardRet = opXinWeiOutBoard.Execute(MachineParams.Current.OperationStepTimeout);
                                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                                            HeartBeatUtils boardOutHeartBeat = new HeartBeatUtils(1);
                                            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                            {
                                                if (boardOutHeartBeat.IsOutput())
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportXinWeiShopfloorManager wait BoardOut Complete");
                                                }

                                                if (context.StopFlag)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportXinWeiShopfloorManager Error return ExitState.Current");
                                                    return ExitState.Current;
                                                }

                                                m.UpdateInline();
                                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportXinWeiShopfloorManager Error return DesyncState.Current");
                                                    //20230706  查找E05 【徐明武】 修改 Start
                                                    //return DesyncState.Current;
                                                    {
                                                        Holly.Log.HlLogger.Write("E05 => 71 ");
                                                        return DesyncState.Current;
                                                    }
                                                    //20230706  查找E05 【徐明武】 修改 End 
                                                }
                                                Thread.Sleep(50);
                                            }

                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportXinWeiShopfloorManager BoardOut End return GoState.Current");
                                            return GoState.Current;
                                        }
                                    }
                                    // 20210312 信维MES 追加 End

                                    // 20221020 二次测板报警停机不测试 追加 Start
                                    if (Customization.Current.BarcodeRepeatAlarm.IsEnabled)
                                    {
                                        bool isCheckSnOK = BarcodeRepeatAlarmManager.Current.IsSnCheckOK(1);
                                        //二次重测（条码重复）出板
                                        if (!isCheckSnOK)
                                        {
                                            WaitVerify(m, "该板为二次测试，停机报警出板");

                                            //20240809 鹏鼎二次卡关直接退出自动运行 【范克文】 追加 Start
                                            if (Customization.Current.IsBarcodeRepeatExitAuto)
                                            {
                                                return ExitState.Current;
                                            }
                                            else
                                            {
                                                //20240809 鹏鼎二次卡关直接退出自动运行 【范克文】 追加 End
                                                #region BoardOutNG1

                                                Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager Board Out Start");
                                                //Log4Net.Info("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager Board Out Start");
                                                IBatchOperationInline opBarcodeRepeatAlarmManagerBoardOut = m.CreateBatchOperationInline();
                                                IOperationResult opBarcodeRepeatAlarmManagerBoardOutRet = null;

                                                opBarcodeRepeatAlarmManagerBoardOut.BoardOutNG();
                                                opBarcodeRepeatAlarmManagerBoardOutRet = opBarcodeRepeatAlarmManagerBoardOut.Execute(MachineParams.Current.OperationStepTimeout);
                                                progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                                                HeartBeatUtils boardOutHeartBeat = new HeartBeatUtils(1);
                                                while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                                {
                                                    if (boardOutHeartBeat.IsOutput())
                                                    {
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager wait BoardOut Complete");
                                                        //Log4Net.Info("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager wait BoardOut Complete");
                                                    }

                                                    if (context.StopFlag)
                                                    {
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager Error return ExitState.Current");
                                                        //Log4Net.Info("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager Error return ExitState.Current");
                                                        return ExitState.Current;
                                                    }

                                                    m.UpdateInline();
                                                    if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                                    {
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager Error return DesyncState.Current");
                                                        //Log4Net.Info("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager Error return DesyncState.Current");
                                                        //20230706  查找E05 【徐明武】 修改 Start
                                                        //return DesyncState.Current;
                                                        {
                                                            Holly.Log.HlLogger.Write("E05 => 47 ");
                                                            return DesyncState.Current;
                                                        }
                                                        //20230706  查找E05 【徐明武】 修改 End 
                                                    }
                                                    Thread.Sleep(50);
                                                }
                                                Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager BoardOut End return GoState.Current");
                                                //Log4Net.Info("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager BoardOut End return GoState.Current");
                                                return GoState.Current;
                                                #endregion
                                                //20240809 鹏鼎二次卡关直接退出自动运行 【范克文】 追加 Start
                                            }
                                            //20240809 鹏鼎二次卡关直接退出自动运行 【范克文】 追加 End
                                        }
                                    }
                                    // 20221020 二次测板报警停机不测试 追加 End

                                    //20231221 淮安鹏鼎多pannel二次卡关&markerror&nobarcode报警不生成数据【张晨铖】 追加 Start
                                    if (Customization.Current.IsMarkErrorOrNoBarcodeAlarm)
                                    {
                                        bool isOK = BarcodeRepeatAlarmManager.Current.IsMarkErrorOrNoBarcodeAlarm(1);
                                        //二次重测（条码重复）出板
                                        if (!isOK)
                                        {
                                            WaitVerify(m, BarcodeRepeatAlarmManager.Current.errorMsg);
                                            #region BoardOutNG1

                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager.IsMarkErrorOrNoBarcodeAlarm Board Out Start");
                                            IBatchOperationInline opBarcodeRepeatAlarmManagerBoardOut = m.CreateBatchOperationInline();
                                            IOperationResult opBarcodeRepeatAlarmManagerBoardOutRet = null;

                                            opBarcodeRepeatAlarmManagerBoardOut.BoardOutNG();
                                            opBarcodeRepeatAlarmManagerBoardOutRet = opBarcodeRepeatAlarmManagerBoardOut.Execute(MachineParams.Current.OperationStepTimeout);
                                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                                            HeartBeatUtils boardOutHeartBeat = new HeartBeatUtils(1);
                                            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                            {
                                                if (boardOutHeartBeat.IsOutput())
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager.IsMarkErrorOrNoBarcodeAlarm wait BoardOut Complete");
                                                }

                                                if (context.StopFlag)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager.IsMarkErrorOrNoBarcodeAlarm Error return ExitState.Current");
                                                    return ExitState.Current;
                                                }

                                                m.UpdateInline();
                                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager.IsMarkErrorOrNoBarcodeAlarm Error return DesyncState.Current");
                                                    //20230706  查找E05 【徐明武】 修改 Start
                                                    //return DesyncState.Current;
                                                    {
                                                        Holly.Log.HlLogger.Write("E05 => 47 ");
                                                        return DesyncState.Current;
                                                    }
                                                    //20230706  查找E05 【徐明武】 修改 End 
                                                }
                                                Thread.Sleep(50);
                                            }
                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) BarcodeRepeatAlarmManager.IsMarkErrorOrNoBarcodeAlarm BoardOut End return GoState.Current");
                                            return GoState.Current;
                                            #endregion
                                        }
                                    }
                                    //20231221 淮安鹏鼎多pannel二次卡关&markerror&nobarcode报警不生成数据【张晨铖】 追加 End

                                    // 20220221 观澜富士康条码验证 追加 Start
                                    if (Customization.Current.FoxconnManagementBarcodes.IsEnabled)
                                    {
                                        if (!ExportFoxconnManagementBarcodes.Current.WaitCheckBarcodeResult(machine: m))
                                        {
                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > FoxconnManagementBarcodes Error Board Out Start");
                                            IBatchOperationInline opFoxconnManagementBarcodesBoardOut = m.CreateBatchOperationInline();
                                            IOperationResult opFoxconnManagementBarcodesBoardOutRet = null;

                                            opFoxconnManagementBarcodesBoardOut.BoardOutNG();
                                            opFoxconnManagementBarcodesBoardOutRet = opFoxconnManagementBarcodesBoardOut.Execute(MachineParams.Current.OperationStepTimeout);
                                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                                            HeartBeatUtils boardOutHeartBeat = new HeartBeatUtils(1);
                                            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                            {
                                                if (boardOutHeartBeat.IsOutput())
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > FoxconnManagementBarcodes wait BoardOut Complete");
                                                }

                                                if (context.StopFlag)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > FoxconnManagementBarcodes Error return ExitState.Current");
                                                    return ExitState.Current;
                                                }

                                                m.UpdateInline();
                                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > FoxconnManagementBarcodes Error return DesyncState.Current");
                                                    //20230706  查找E05 【徐明武】 修改 Start
                                                    //return DesyncState.Current;
                                                    {
                                                        Holly.Log.HlLogger.Write("E05 => 74 ");
                                                        return DesyncState.Current;
                                                    }
                                                    //20230706  查找E05 【徐明武】 修改 End 
                                                }
                                                Thread.Sleep(50);
                                            }

                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > FoxconnManagementBarcodes BoardOut End return GoState.Current");
                                            return GoState.Current;
                                        }
                                    }
                                    // 20220221 观澜富士康条码验证 追加 End

                                    // 20220815 从Ver6同步上达黄石MES 追加 Start
                                    if (ExportShangDaHuangShiShopfloorManager.Current.IsExportEnabled)
                                    {
                                        if (!ExportShangDaHuangShiShopfloorManager.Current.WaitCheckBarcodeResult(m))
                                        {
                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) ShangDaHuangShiShopfloor Board Out Start");
                                            IBatchOperationInline opShangDaHuangShiShopfloorBoardOut = m.CreateBatchOperationInline();
                                            IOperationResult opShangDaHuangShiShopfloorBoardOutRet = null;

                                            opShangDaHuangShiShopfloorBoardOut.BoardOutNG();
                                            opShangDaHuangShiShopfloorBoardOutRet = opShangDaHuangShiShopfloorBoardOut.Execute(MachineParams.Current.OperationStepTimeout);
                                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                                            HeartBeatUtils boardOutHeartBeat = new HeartBeatUtils(1);
                                            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                            {
                                                if (boardOutHeartBeat.IsOutput())
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) ShangDaHuangShiShopfloor wait BoardOut Complete");
                                                }

                                                if (context.StopFlag)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) ShangDaHuangShiShopfloor Error return ExitState.Current");
                                                    return ExitState.Current;
                                                }

                                                m.UpdateInline();
                                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) ShangDaHuangShiShopfloor Error return DesyncState.Current");
                                                    //20230706  查找E05 【徐明武】 修改 Start
                                                    //return DesyncState.Current;
                                                    {
                                                        Holly.Log.HlLogger.Write("E05 => 75 ");
                                                        return DesyncState.Current;
                                                    }
                                                    //20230706  查找E05 【徐明武】 修改 End 
                                                }
                                                Thread.Sleep(50);
                                            }

                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) ShangDaHuangShiShopfloor BoardOut End return GoState.Current");
                                            return GoState.Current;
                                        }
                                    }
                                    // 20220815 从Ver6同步上达黄石MES 追加 End

                                    // 20211215 闻泰二期MES 追加 Start
                                    if (Customization.Current.Wingtech2Shopfloor.IsEnabled)
                                    {
                                        if (!ExportWingtech2ShopfloorManager.Current.Wingtech2WaitCheckBarcodeResult(m))
                                        {
                                            #region BoardOutNG
                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportWingtech2ShopfloorManager Error Board Out Start");
                                            IBatchOperationInline opWingrechOutBoard = m.CreateBatchOperationInline();
                                            IOperationResult opWingtechBoardRet = null;

                                            opWingrechOutBoard.BoardOutNG();
                                            opWingtechBoardRet = opWingrechOutBoard.Execute(MachineParams.Current.OperationStepTimeout);
                                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                                            HeartBeatUtils boardOutHeartBeat = new HeartBeatUtils(1);
                                            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                            {
                                                if (boardOutHeartBeat.IsOutput())
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportWingtech2ShopfloorManager wait BoardOut Complete");
                                                }

                                                if (context.StopFlag)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportWingtech2ShopfloorManager Error return ExitState.Current");
                                                    return ExitState.Current;
                                                }

                                                m.UpdateInline();
                                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportWingtech2ShopfloorManager Error return DesyncState.Current");
                                                    //20230706  查找E05 【徐明武】 修改 Start
                                                    //return DesyncState.Current;
                                                    {
                                                        Holly.Log.HlLogger.Write("E05 => 76 ");
                                                        return DesyncState.Current;
                                                    }
                                                    //20230706  查找E05 【徐明武】 修改 End 
                                                }
                                                Thread.Sleep(50);
                                            }

                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportWingtech2ShopfloorManager BoardOut End return GoState.Current");
                                            return GoState.Current;
                                            #endregion
                                        }
                                    }
                                    // 20211215 闻泰二期MES 追加 End

                                    // 20230628 淳华此shopfloor无法兼容win7故删除 【刘剑】 删除 Start
                                    // 20230417 淳华AOI-Badmark过滤 【刘剑】 追加 Start
                                    if (Customization.Current.YoujiaShopfloor.IsEnabled && Customization.Current.YoujiaShopfloor.IsReadBadMarkInfo)
                                    {
                                        if (ExportYoujiaShopfloorManager.Current.IsShutDown)
                                        {
                                            Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) 淳华badmark报警.IsShutDown = " + ExportYoujiaShopfloorManager.Current.IsShutDown);
                                            Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) 淳华badmark报警.ErrorMessage = " + ExportYoujiaShopfloorManager.Current.errorMessage);
                                            // 20230505 淳华超时报警优化【刘剑】 追加 Start
                                            string error = ExportYoujiaShopfloorManager.Current.errorMessage;
                                            WaitVerify(m, error);
                                            ExportYoujiaShopfloorManager.Current.IsShutDown = false;
                                            ExportYoujiaShopfloorManager.Current.errorMessage = "";
                                            // 20230505 淳华超时报警优化【刘剑】 追加 End
                                        }
                                    }
                                    // 20230417 淳华AOI-Badmark过滤 【刘剑】 追加 End
                                    // 20230628 淳华此shopfloor无法兼容win7故删除 【刘剑】 删除 End

                                    // 20230605 观澜富士康添加EMARK 【刘剑】 追加 Start
                                    if (Customization.Current.FoxconnGLShopfloor.IsEnabled && Customization.Current.FoxconnGLShopfloor.IsAddEMark)
                                    {
                                        if (ExportFoxconnShopfloor_GLManager.Current.IsShutDown)
                                        {
                                            Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) 观澜emark报警.ErrorMessage = " + ExportFoxconnShopfloor_GLManager.Current.ErrorMessage);
                                            string error = ExportFoxconnShopfloor_GLManager.Current.ErrorMessage;
                                            WaitVerify(m, error);
                                            ExportFoxconnShopfloor_GLManager.Current.IsShutDown = false;
                                            ExportFoxconnShopfloor_GLManager.Current.ErrorMessage = "";
                                        }
                                    }
                                    // 20230605 观澜富士康添加EMARK 【刘剑】 追加 End
                                    // 20230815 观澜富士康CoverLink 【ygs】 追加 Start
                                    if (Customization.Current.FoxconnGLShopfloor.IsEnabled && Customization.Current.FoxconnGLShopfloor.IsCoverLink)
                                    {
                                        if (!string.IsNullOrEmpty(ExportFoxconnShopfloor_GLManager.Current.CoverLinkErrorMessage))
                                        {
                                            string error = ExportFoxconnShopfloor_GLManager.Current.CoverLinkErrorMessage;
                                            WaitVerify(m, error);
                                        }
                                    }
                                    // 20230815 观澜富士康CoverLink 【ygs】 追加 End

                                    // 20211229 福莱盈MES新接口过站 追加 Start
                                    if (Customization.Current.FlyMesShopfloor.IsEnabled && !Customization.Current.FlyMesShopfloor.IsDoubleRail)
                                    {
                                        if (!ExportFlyMesShopfloorManager.Current.FlyMesCheckBarcodeResult(m))
                                        {
                                            #region BoardOutNG
                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportFlyMesShopfloorManager Error Board Out Start");
                                            IBatchOperationInline opFlyMesOutBoard = m.CreateBatchOperationInline();
                                            IOperationResult opFlyMesBoardRet = null;

                                            // 20220506 福莱盈MES过站失败NGBuffer发送异常 追加 Start
                                            NGBufferModbusTCP.Current.SendsFailBarcodeToNGBuffer("FaiBarcode", 1);
                                            // 20220506 福莱盈MES过站失败NGBuffer发送异常 追加 End

                                            opFlyMesOutBoard.BoardOutNG();
                                            opFlyMesBoardRet = opFlyMesOutBoard.Execute(MachineParams.Current.OperationStepTimeout);
                                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                                            HeartBeatUtils boardOutHeartBeat = new HeartBeatUtils(1);
                                            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                            {
                                                if (boardOutHeartBeat.IsOutput())
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportFlyMesShopfloorManager wait BoardOut Complete");
                                                }

                                                if (context.StopFlag)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportFlyMesShopfloorManager Error return ExitState.Current");
                                                    return ExitState.Current;
                                                }

                                                m.UpdateInline();
                                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportFlyMesShopfloorManager Error return DesyncState.Current");
                                                    //20230706  查找E05 【徐明武】 修改 Start
                                                    //return DesyncState.Current;
                                                    {
                                                        Holly.Log.HlLogger.Write("E05 => 77 ");
                                                        return DesyncState.Current;
                                                    }
                                                    //20230706  查找E05 【徐明武】 修改 End 
                                                }
                                                Thread.Sleep(50);
                                            }

                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportFlyMesShopfloorManager BoardOut End return GoState.Current");
                                            return GoState.Current;
                                            #endregion
                                        }
                                    }
                                    // 20211229 福莱盈MES新接口过站 追加 End

                                    // 20220804 景旺AVIMES 追加 Start
                                    if (Customization.Current.JingWangAVIShopfloor.IsEnabled)
                                    {
                                        if (!ExportJingWangAVIShopfloorManager.Current.WaitMesProcess(m))
                                        {

                                            // 20230907 景旺AVIMES过站失败清板 【刘亚杰】 修改 Start
                                            #region BoardOutNG
                                            //Holly.Log.HlLogger.Write("HOLLY AOI =====> ExportJingWangAVIShopfloorManager Error Board Out Start");
                                            //IBatchOperationInline opWingrechOutBoard = m.CreateBatchOperationInline();
                                            //IOperationResult opWingtechBoardRet = null;

                                            //if (AutoRunSettings.Default.IsSendOKNGToNextMachine || AutoRunSettings.Default.IsWaitRepairSendOKNG)
                                            //{
                                            //    opWingrechOutBoard.BoardOutNG();
                                            //}
                                            //else
                                            //{
                                            //    opWingrechOutBoard.BoardOut();
                                            //}

                                            //opWingtechBoardRet = opWingrechOutBoard.Execute(MachineParams.Current.OperationStepTimeout);
                                            //progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                                            //HeartBeatUtils boardOutHeartBeat = new HeartBeatUtils(1);
                                            //while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                            //{
                                            //    if (boardOutHeartBeat.IsOutput())
                                            //    {
                                            //        Holly.Log.HlLogger.Write("HOLLY AOI =====> ExportJingWangAVIShopfloorManager wait BoardOut Complete");
                                            //    }

                                            //    if (context.StopFlag)
                                            //    {
                                            //        Holly.Log.HlLogger.Write("HOLLY AOI =====> ExportJingWangAVIShopfloorManager Error return ExitState.Current");
                                            //        return ExitState.Current;
                                            //    }

                                            //    m.UpdateInline();
                                            //    if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                            //    {
                                            //        Holly.Log.HlLogger.Write("HOLLY AOI =====> ExportJingWangAVIShopfloorManager Error return DesyncState.Current");
                                            //        //20230706  查找E05 【徐明武】 修改 Start
                                            //        //return DesyncState.Current;
                                            //        {
                                            //            Holly.Log.HlLogger.Write("E05 => 78 ");
                                            //            return DesyncState.Current;
                                            //        }
                                            //        //20230706  查找E05 【徐明武】 修改 End 
                                            //    }
                                            //    Thread.Sleep(50);
                                            //}

                                            //Holly.Log.HlLogger.Write("HOLLY AOI =====> ExportJingWangAVIShopfloorManager BoardOut End return GoState.Current");
                                            //return GoState.Current;
                                            #endregion

                                            if (Customization.Current.JingWangAVIShopfloor.IsNGClearBoard)
                                            {
                                                op.ClearCommand();
                                                op.ClearBoard();
                                                op.SetGreenLampBlink();
                                                IOperationResult opResultng = op.Execute(MachineParams.Current.OperationStepTimeout);
                                                progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_ClearingBoard);
                                                opResultng.Wait();
                                                m.UpdateInline();
                                                progressListener.Complete();

                                                Holly.Log.HlLogger.Write("HOLLY AOI =====> ExportJingWangAVIShopfloorManager ClearBoard");
                                                // 等待板子到出板口
                                                while (true)
                                                {
                                                    m.UpdateInline();
                                                    if ((m.InputStatusInline & InputStatusInline.BoardIn) != 0)
                                                        break;
                                                    Thread.Sleep(500);
                                                    Holly.Log.HlLogger.Write("HOLLY AOI =====> ExportJingWangAVIShopfloorManager Wait For The Board To BoardIn Location...");
                                                }
                                                Holly.Log.HlLogger.Write("HOLLY AOI =====> ExportJingWangAVIShopfloorManager ClearBoard Finish");

                                                // 等待板子拿出
                                                while (true)
                                                {
                                                    m.UpdateInline();
                                                    if (!((m.InputStatusInline & InputStatusInline.BoardIn) != 0))
                                                        break;
                                                    Thread.Sleep(500);
                                                    Holly.Log.HlLogger.Write("HOLLY AOI =====> ExportJingWangAVIShopfloorManager Wait For The Board To TakeAway...");
                                                }

                                                context._isReBoardIn = true;
                                                return GoState.Current;
                                            }
                                            else
                                            {
                                                #region BoardOutNG
                                                Holly.Log.HlLogger.Write("HOLLY AOI =====> ExportJingWangAVIShopfloorManager Error Board Out Start");
                                                IBatchOperationInline opWingrechOutBoard = m.CreateBatchOperationInline();
                                                IOperationResult opWingtechBoardRet = null;

                                                if (AutoRunSettings.Default.IsSendOKNGToNextMachine || AutoRunSettings.Default.IsWaitRepairSendOKNG)
                                                {
                                                    opWingrechOutBoard.BoardOutNG();
                                                }
                                                else
                                                {
                                                    opWingrechOutBoard.BoardOut();
                                                }

                                                opWingtechBoardRet = opWingrechOutBoard.Execute(MachineParams.Current.OperationStepTimeout);
                                                progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                                                HeartBeatUtils boardOutHeartBeat = new HeartBeatUtils(1);
                                                while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                                {
                                                    if (boardOutHeartBeat.IsOutput())
                                                    {
                                                        Holly.Log.HlLogger.Write("HOLLY AOI =====> ExportJingWangAVIShopfloorManager wait BoardOut Complete");
                                                    }

                                                    if (context.StopFlag)
                                                    {
                                                        Holly.Log.HlLogger.Write("HOLLY AOI =====> ExportJingWangAVIShopfloorManager Error return ExitState.Current");
                                                        return ExitState.Current;
                                                    }

                                                    m.UpdateInline();
                                                    if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                                    {
                                                        Holly.Log.HlLogger.Write("HOLLY AOI =====> ExportJingWangAVIShopfloorManager Error return DesyncState.Current");
                                                        //20230706  查找E05 【徐明武】 修改 Start
                                                        //return DesyncState.Current;
                                                        {
                                                            Holly.Log.HlLogger.Write("E05 => 78 ");
                                                            return DesyncState.Current;
                                                        }
                                                        //20230706  查找E05 【徐明武】 修改 End 
                                                    }
                                                    Thread.Sleep(50);
                                                }

                                                Holly.Log.HlLogger.Write("HOLLY AOI =====> ExportJingWangAVIShopfloorManager BoardOut End return GoState.Current");
                                                return GoState.Current;
                                                #endregion
                                            }
                                            // 20230907 景旺AVIMES过站失败清板 【刘亚杰】 修改 End
                                        }
                                    }
                                    // 20220804 景旺AVIMES 追加 End

                                    // 20230831 点检【ygs】 Start
                                    if (Customization.Current.SpotCheckShopfloor.IsEnabled && AutoRunSettings.Default.IsSpotCheckEnable)
                                    {
                                        if (!ExportSpotCheckShopfloorManager.Current.TriggerTimeSpotCheckInspection())
                                            WaitVerify(m, "请进行OK/NG样件点检");
                                    }
                                    // 20230831 点检【ygs】 End

                                    // 20220613 杭州惠泓MES 追加 Start
                                    if (Customization.Current.HangZhouHuiHongShopfloor.IsEnabled)
                                    {
                                        if (!ExportHangZhouHuiHongShopfloorManager.Current.WaitCheckBarcodeResult(m))
                                        {
                                            #region BoardOutNG
                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportHangZhouHuiHongShopfloorManager Error Board Out Start");
                                            IBatchOperationInline opHangZhouHuiHongOutBoard = m.CreateBatchOperationInline();
                                            IOperationResult opHangZhouHuiHongBoardRet = null;

                                            opHangZhouHuiHongOutBoard.BoardOutNG();
                                            opHangZhouHuiHongBoardRet = opHangZhouHuiHongOutBoard.Execute(MachineParams.Current.OperationStepTimeout);
                                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                                            HeartBeatUtils boardOutHeartBeat = new HeartBeatUtils(1);
                                            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                            {
                                                if (boardOutHeartBeat.IsOutput())
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportHangZhouHuiHongShopfloorManager wait BoardOut Complete");
                                                }

                                                if (context.StopFlag)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportHangZhouHuiHongShopfloorManager Error return ExitState.Current");
                                                    return ExitState.Current;
                                                }

                                                m.UpdateInline();
                                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportHangZhouHuiHongShopfloorManager Error return DesyncState.Current");
                                                    //20230706  查找E05 【徐明武】 修改 Start
                                                    //return DesyncState.Current;
                                                    {
                                                        Holly.Log.HlLogger.Write("E05 => 79 ");
                                                        return DesyncState.Current;
                                                    }
                                                    //20230706  查找E05 【徐明武】 修改 End 
                                                }
                                                Thread.Sleep(50);
                                            }

                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportHangZhouHuiHongShopfloorManager BoardOut End return GoState.Current");
                                            return GoState.Current;
                                            #endregion
                                        }
                                    }
                                    // 20220613 杭州惠泓MES 追加 End

                                    // 20221021 北京富士康 追加 Start
                                    if (ExportFoxconnShopfloor_BJManager.Current.IsExportEnabled)
                                    {
                                        if (!ExportFoxconnShopfloor_BJManager.Current.WaitCheckResult(m))
                                        {
                                            #region BoardOutNG
                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportFoxconnShopfloor_BJManager Error Board Out Start");
                                            IBatchOperationInline opFoxconnShopfloor_BJOutBoard = m.CreateBatchOperationInline();
                                            IOperationResult opFoxconnShopfloor_BJBoardRet = null;

                                            opFoxconnShopfloor_BJOutBoard.BoardOutNG();
                                            opFoxconnShopfloor_BJBoardRet = opFoxconnShopfloor_BJOutBoard.Execute(MachineParams.Current.OperationStepTimeout);
                                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                                            HeartBeatUtils boardOutHeartBeat = new HeartBeatUtils(1);
                                            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                            {
                                                if (boardOutHeartBeat.IsOutput())
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportFoxconnShopfloor_BJManager wait BoardOut Complete");
                                                }

                                                if (context.StopFlag)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportFoxconnShopfloor_BJManager Error return ExitState.Current");
                                                    return ExitState.Current;
                                                }

                                                m.UpdateInline();
                                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportFoxconnShopfloor_BJManager Error return DesyncState.Current");
                                                    //20230706  查找E05 【徐明武】 修改 Start
                                                    //return DesyncState.Current;
                                                    {
                                                        Holly.Log.HlLogger.Write("E05 => 80 ");
                                                        return DesyncState.Current;
                                                    }
                                                    //20230706  查找E05 【徐明武】 修改 End 
                                                }
                                                Thread.Sleep(50);
                                            }

                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportFoxconnShopfloor_BJManager BoardOut End return GoState.Current");
                                            return GoState.Current;
                                            #endregion
                                        }
                                    }
                                    // 20221021 北京富士康 追加 End

                                    //20230213 惠州欣旺达Mes【张晨铖】 追加 Start
                                    if (Customization.Current.HuiZhouXinWangDaShopfloor.IsEnabled
                                        && AutoRunSettings.Default.IsEnableMES && AutoRunSettings2.Default.IsHZXWDMesEnabled
                                        && !Customization.Current.HuiZhouXinWangDaShopfloor.IsCloseBarcodeGun
                                        && !MachineParams.Current.BarcodeSerialPort.IsEnabled)
                                    {
                                        ExportHZXWDShopfloorManager.Current.HZXWDCheckBarcode(m);
                                        if (ExportHZXWDShopfloorManager.Current.OnlineInspectBarcode == 2)
                                        {
                                            #region BoardOutNG
                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportHZXWDShopfloorManager Error Board Out Start");
                                            IBatchOperationInline opHZXWDOutBoard = m.CreateBatchOperationInline();
                                            IOperationResult opHZXWDBoardRet = null;

                                            opHZXWDOutBoard.BoardOutNG();
                                            opHZXWDBoardRet = opHZXWDOutBoard.Execute(MachineParams.Current.OperationStepTimeout);
                                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                                            HeartBeatUtils boardOutHeartBeat = new HeartBeatUtils(1);
                                            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                            {
                                                if (boardOutHeartBeat.IsOutput())
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportHZXWDShopfloorManager wait BoardOut Complete");
                                                }

                                                if (context.StopFlag)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportHZXWDShopfloorManager Error return ExitState.Current");
                                                    return ExitState.Current;
                                                }

                                                m.UpdateInline();
                                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportFoxconnShopfloor_BJManager Error return DesyncState.Current");
                                                    //20230706  查找E05 【徐明武】 修改 Start
                                                    //return DesyncState.Current;
                                                    {
                                                        Holly.Log.HlLogger.Write("E05 => 81 ");
                                                        return DesyncState.Current;
                                                    }
                                                    //20230706  查找E05 【徐明武】 修改 End 
                                                }
                                                Thread.Sleep(50);
                                            }

                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportHZXWDShopfloorManager BoardOut End return GoState.Current");
                                            return GoState.Current;
                                            #endregion
                                        }
                                    }
                                    //20230213 惠州欣旺达Mes【张晨铖】 追加 Start

                                    //20221128 坪山比亚迪2D双轨MES 追加 Start
                                    //20231014 坪山比亚迪mes增加条码枪过站 【曹志鹏】 修改 Start
                                    //if (Customization.Current.PingShanBYDShopfloor.IsEnabled && AutoRunSettings.Default.IsCheckBarcode && AutoRunSettings.Default.IsEnableMES)
                                    if (Customization.Current.PingShanBYDShopfloor.IsEnabled && AutoRunSettings.Default.IsCheckBarcode && AutoRunSettings.Default.IsEnableMES && !Customization.Current.PingShanBYDShopfloor.IsCheckSnByScanner)
                                    //20231014 坪山比亚迪mes增加条码枪过站 【曹志鹏】 修改 End
                                    {
                                        ExportPingShanBYDShopfloorManager.Current.CheckBarcode(m);
                                    }
                                    //20221128 坪山比亚迪2D双轨MES 追加 End

                                    //20230831 根据生产批次校验条码是否重复 【曹志鹏】 追加 Start
                                    if (Customization.Current.PingShanBYDShopfloor.IsCheckBarcodeRepetitive && !string.IsNullOrEmpty(AutoRunSettings.Default.ProductLotNumber))
                                    {
                                        ExportPingShanBYDShopfloorManager.Current.CheckBarcode(m);
                                    }
                                    //20230831 根据生产批次校验条码是否重复 【曹志鹏】 追加 End

                                    // 20230504 淳华添加mes过站功能 【王小雪】 追加 Start
                                    //if (Customization.Current.YoujiaShopfloor.IsEnabled)
                                    //{
                                    //    if (!ExportYoujiaShopfloorManager.Current.WaitCheckBarcodeResult(m))
                                    //    {
                                    //        #region BoardOutNG
                                    //        Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportYoujiaShopfloorManager Error Board Out Start");
                                    //        IBatchOperationInline opYoujiaOutBoard = m.CreateBatchOperationInline();
                                    //        IOperationResult opYoujiaBoardRet = null;

                                    //        opYoujiaOutBoard.BoardOutNG();
                                    //        opYoujiaBoardRet = opYoujiaOutBoard.Execute(MachineParams.Current.OperationStepTimeout);
                                    //        progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                                    //        HeartBeatUtils boardOutHeartBeat = new HeartBeatUtils(1);
                                    //        while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                    //        {
                                    //            if (boardOutHeartBeat.IsOutput())
                                    //            {
                                    //                Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportYoujiaShopfloorManager wait BoardOut Complete");
                                    //            }

                                    //            if (context.StopFlag)
                                    //            {
                                    //                Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportYoujiaShopfloorManager Error return ExitState.Current");
                                    //                return ExitState.Current;
                                    //            }

                                    //            m.UpdateInline();
                                    //            if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                    //            {
                                    //                Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportYoujiaShopfloorManager Error return DesyncState.Current");
                                    //                return DesyncState.Current;
                                    //            }
                                    //            Thread.Sleep(50);
                                    //        }

                                    //        Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportYoujiaShopfloorManager BoardOut End return GoState.Current");
                                    //        return GoState.Current;
                                    //        #endregion
                                    //    }
                                    //}
                                    // 20230504 淳华添加mes过站功能 【王小雪】 追加 End

                                    //20231117 常州汇川简化自动点检功能 【金伟】 追加 Start 
                                    if (ExportSpotCheckPreventShopfloorManager.Current.IsExportEnabled && ExportSpotCheckPreventShopfloorManager.Current.isNeedSpotCheck)
                                    {
                                        ExportSpotCheckPreventShopfloorManager.Current.SpotCheckResult(m);
                                        return ExitState.Current;
                                    }
                                    //20231117 常州汇川简化自动点检功能 【金伟】 追加 End

                                    //20230521 MES标准化 【曹志鹏】 追加 Start
                                    //if (!ExportMainShopfloorManager.Current.CheckBarcodeStatus(m))
                                    // 20230621 指定报警配置与启用mes能同时生效【刘剑】 修改 Start
                                    Holly.Log.HlLogger.Write("HOLLY AOI =====> ExportAlarmNotificationManager.Current.checkAlarm = " + ExportAlarmNotificationManager.Current.checkAlarm);
                                    if (!ExportAlarmNotificationManager.Current.checkAlarm)
                                    {
                                        // 20201106 指定报警配置与启用mes能同时生效【刘剑】 修改 End

                                        if (!ExportMainShopfloorManager.Current.CheckBarcodeStatus(m))
                                        {
                                            // 20230831 点检【ygs】 Start
                                            if (Customization.Current.IsUninspectedEntityAlarm)
                                            {
                                                context.StopFlag = false;
                                                return ExitState.Current;
                                            }
                                            // 20230831 点检【ygs】 End

                                            // 20240613 太原报警停机增加权限解锁功能 【王晨】 追加 Start
                                            //焊前只特定错漏反需要密码解锁
                                            // 20240724 太原出差修改 【王晨】 追加 Start
                                            if (!ExportFoxconnShopfloor_TYMergeManager.Current.IsPreWeld)
                                            {
                                                // 20240724 太原出差修改 【王晨】 追加 End
                                                ExportCommonShopfloorManager.Current.ShowDialog();
                                                // 20240724 太原出差修改 【王晨】 追加 Start
                                            }
                                            // 20240724 太原出差修改 【王晨】 追加 End
                                            // 20240613 太原报警停机增加权限解锁功能 【王晨】 追加 End

                                            //20231225 华联电子mes 过站失败不NG出板 【曹志鹏】 追加 Start
                                            if (Customization.Current.XiaMenHuaLianDianZiShopfloor.IsEnabled)
                                            //20231225 华联电子mes 过站失败不NG出板 【曹志鹏】 追加 End
                                            { }
                                            // 20240304 太原LQ修改 【王晨】 追加 Start
                                            //太原半自动模式下，超限需要维修站机内控制出板
                                            else if (ExportFoxconnShopfloor_TYMergeManager.Current.IsManualMode
                                                && (ExportFoxconnShopfloor_TYMergeManager.Current.IsExceed || ExportFoxconnShopfloor_TYMergeManager.Current.IsWarningAlarm)
                                                )
                                            {
                                                Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) IsManualMode and IsExceed");
                                            }
                                            // 20240724 太原出差修改 【王晨】 追加 Start
                                            //焊前点完弹框出板，因可能开IsNoBoardOutNG，先行判断
                                            else if (ExportFoxconnShopfloor_TYMergeManager.Current.IsPreWeld
                                                && (ExportFoxconnShopfloor_TYMergeManager.Current.IsExceed || ExportFoxconnShopfloor_TYMergeManager.Current.IsWarningAlarm))
                                            {
                                                if (ExportFoxconnShopfloor_TYMergeManager.Current.IsPreWeld && ExportFoxconnShopfloor_TYMergeManager.Current.IsWarningAlarm)
                                                {
                                                    ExportCommonShopfloorManager.Current.ShowDialog();
                                                }
                                                //可能plc或者轨道不支持发送ng信号,不开机内机外的情况下发送ok信号正常出板
                                                #region boardout
                                                if (AutoRunSettings.Default.IsWaitRepairSendOKNG || AutoRunSettings.Default.IsSendOKNGToNextMachine)
                                                {
                                                    #region BoardOutNG
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportMainShopfloorManager Error BoardOut NG Start");
                                                    IBatchOperationInline opBoardOut = m.CreateBatchOperationInline();
                                                    IOperationResult opBoardOutRet = null;

                                                    opBoardOut.BoardOutNG();
                                                    opBoardOutRet = opBoardOut.Execute(MachineParams.Current.OperationStepTimeout);
                                                    progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                                                    HeartBeatUtils boardOutHeartBeat = new HeartBeatUtils(1);
                                                    while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                                    {
                                                        if (boardOutHeartBeat.IsOutput())
                                                        {
                                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportMainShopfloorManager wait BoardOut NG Complete");
                                                        }

                                                        if (context.StopFlag)
                                                        {
                                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportMainShopfloorManager Error return ExitState.Current");
                                                            return ExitState.Current;
                                                        }

                                                        m.UpdateInline();
                                                        if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                                        {
                                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportMainShopfloorManager Error return DesyncState.Current");
                                                            //20230706  查找E05 【徐明武】 修改 Start
                                                            //return DesyncState.Current;
                                                            {
                                                                Holly.Log.HlLogger.Write("E05 => 82 ");
                                                                return DesyncState.Current;
                                                            }
                                                            //20230706  查找E05 【徐明武】 修改 End 
                                                        }
                                                        Thread.Sleep(50);
                                                    }

                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportMainShopfloorManager BoardOut NG End return GoState.Current");
                                                    return GoState.Current;
                                                    #endregion
                                                }
                                                else
                                                {
                                                    #region BoardoutNormal
                                                    //op.ClearCommand();
                                                    //opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ====> ExportMainShopfloorManager Error Board Out Normal");
                                                    //op.LocateCamera(GlobalDataManager.Current.ReleaseBoardPosition);

                                                    // 20230708 TraceLog【纪明】 追加 Start
                                                    LogManagerComm.Current.OutputLog(LogManagerComm.TRACE_LOG, DateTimeUtils.GetNow(DateTimeUtils.DATE_FORMAT1) + "\t" + "HOLLY AOI ====> ExportMainShopfloorManager Error Board Out Normal Start ");
                                                    // 20230708 TraceLog【纪明】 追加 End
                                                    op.BoardOut();

                                                    op.LocateLoader(GlobalDataManager.Current.LastPosition, GlobalDataManager.Current.ReleaseBoardPosition, false);
                                                    opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                                    progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);
                                                    //opResult.Wait();
                                                    /////////////////////////////////////////////////////////m.UpdateInline();
                                                    //context.CheckInlineMachineStatus();

                                                    // 20220803 PLC状态监控 追加 Start
                                                    Stopwatch normalBoardOutstopwatch = new Stopwatch();
                                                    normalBoardOutstopwatch.Start();
                                                    HeartBeatUtils heartBeat = new HeartBeatUtils(2);

                                                    Holly.Log.HlLogger.Write("HOLLY AOI ====> Board Out m.CompleteProcessStatus = " + m.CompleteProcessStatus);
                                                    // 20220803 PLC状态监控 追加 End

                                                    // 20230714 郑州不进板问题noboardout置位 【陈凤丹】 追加 Start
                                                    int setBoardoutEndTimes = 0;
                                                    // 20230714 郑州不进板问题noboardout置位 【陈凤丹】 追加 End

                                                    // 20220830 2022机台出板异常对应 修改 Start
                                                    //while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)

                                                    while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0 || IsHaveBoard(m))
                                                    // 20220830 2022机台出板异常对应 修改 End
                                                    {
                                                        if (context.StopFlag)
                                                            return ExitState.Current;

                                                        m.UpdateInline();
                                                        if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                                        {
                                                            //20230706  查找E05 【徐明武】 修改 Start
                                                            string message = string.Format("E05 => EmergencyButton:{0},SafeSensor:{1},CommandStatusInline.TimeOut:{2},TwoBoardInside:{3}", m.CurrentInputs.EmergencyButton.ToString(), m.CurrentInputs.SafeSensor.ToString(), ((m.CommandStatusInline & CommandStatusInline.TimeOut) != 0).ToString(), ((m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0).ToString());
                                                            Holly.Log.HlLogger.Write(message);
                                                            //return DesyncState.Current;
                                                            {
                                                                Holly.Log.HlLogger.Write("E05 => 94 Master = " + AutoRunSettings2.Default.IsMaster.ToString());
                                                                return DesyncState.Current;
                                                            }
                                                            //20230706  查找E05 【徐明武】 修改 End 
                                                        }
                                                        //context.CheckInlineMachineStatus();
                                                        Thread.Sleep(50);

                                                        // 20220803 PLC状态监控 追加 Start
                                                        if (normalBoardOutstopwatch.ElapsedMilliseconds / 1000 > 5)
                                                        {
                                                            if (!IsHaveBoard(m))
                                                            {
                                                                Holly.Log.HlLogger.Write("HOLLY AOI ====> ExportMainShopfloorManager Error Board Out is no board break");
                                                                // 20230708 TraceLog【纪明】 追加 Start
                                                                LogManagerComm.Current.OutputLog(LogManagerComm.TRACE_LOG, DateTimeUtils.GetNow(DateTimeUtils.DATE_FORMAT1) + "\t" + "HOLLY AOI ====> ExportMainShopfloorManager Error Board Out is no board break ");
                                                                // 20230708 TraceLog【纪明】 追加 End

                                                                // 20230714 郑州不进板问题noboardout置位 【陈凤丹】 修改 Start
                                                                //break;

                                                                //没收到出板完成信号，通知PLC重发出板完成，重试3次都没成功再退出
                                                                if (setBoardoutEndTimes < 3)
                                                                {
                                                                    CentralControlPLCCommand.Current.SetBoardoutEnd(1);
                                                                    setBoardoutEndTimes++;
                                                                    normalBoardOutstopwatch.Restart();
                                                                }
                                                                else
                                                                {
                                                                    Holly.Log.HlLogger.Write("HOLLY AOI ====> ExportMainShopfloorManager Error Board Out is no board break ， setBoardoutEndTimes = " + setBoardoutEndTimes);
                                                                    //LogManagerComm.Current.OutputLog(LogManagerComm.TRACE_LOG, DateTimeUtils.GetNow(DateTimeUtils.DATE_FORMAT1) + "\t" + "HOLLY AOI ====> Board Out is no board break ， setBoardoutEndTimes = " + setBoardoutEndTimes);
                                                                    break;
                                                                }
                                                                // 20230714 郑州不进板问题noboardout置位 【陈凤丹】 修改 End
                                                            }
                                                        }
                                                        // 20220803 PLC状态监控 追加 End

                                                        if (heartBeat.IsOutput())
                                                        {
                                                            Holly.Log.HlLogger.Write("HOLLY AOI ====> ExportMainShopfloorManager Error Board Out Is Waitting ...");

                                                            // 20230708 TraceLog【纪明】 追加 Start
                                                            LogManagerComm.Current.OutputLog(LogManagerComm.TRACE_LOG, DateTimeUtils.GetNow(DateTimeUtils.DATE_FORMAT1) + "\t" + "HOLLY AOI ====> Board Out Is Waitting ... ");
                                                            // 20230708 TraceLog【纪明】 追加 End
                                                        }

                                                    }
                                                    progressListener.Complete();

                                                    // 20220803 PLC状态监控 追加 Start
                                                    normalBoardOutstopwatch.Stop();
                                                    // 20220803 PLC状态监控 追加 End
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ====> ExportMainShopfloorManager Error Board Out Normal End");

                                                    // 20230708 TraceLog【纪明】 追加 Start
                                                    LogManagerComm.Current.OutputLog(LogManagerComm.TRACE_LOG, DateTimeUtils.GetNow(DateTimeUtils.DATE_FORMAT1) + "\t" + "HOLLY AOI ====> Board Out Normal End ");
                                                    // 20230708 TraceLog【纪明】 追加 End
                                                    return GoState.Current;
                                                    #endregion
                                                }
                                                #endregion
                                            }
                                            // 20240724 太原出差修改 【王晨】 追加 End
                                            //else if (Customization.Current.IsNoBoardOutNG)
                                            //{
                                            //    return ExitState.Current;
                                            //}
                                            // 20240304 太原LQ修改 【王晨】 追加 End
                                            else
                                            {
                                                #region boardout
                                                if (AutoRunSettings.Default.IsWaitRepairSendOKNG || AutoRunSettings.Default.IsSendOKNGToNextMachine)
                                                {
                                                    #region BoardOutNG
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportMainShopfloorManager Error BoardOut NG Start");
                                                    IBatchOperationInline opBoardOut = m.CreateBatchOperationInline();
                                                    IOperationResult opBoardOutRet = null;

                                                    opBoardOut.BoardOutNG();
                                                    opBoardOutRet = opBoardOut.Execute(MachineParams.Current.OperationStepTimeout);
                                                    progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                                                    HeartBeatUtils boardOutHeartBeat = new HeartBeatUtils(1);
                                                    while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                                    {
                                                        if (boardOutHeartBeat.IsOutput())
                                                        {
                                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportMainShopfloorManager wait BoardOut NG Complete");
                                                        }

                                                        if (context.StopFlag)
                                                        {
                                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportMainShopfloorManager Error return ExitState.Current");
                                                            return ExitState.Current;
                                                        }

                                                        m.UpdateInline();
                                                        if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                                        {
                                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportMainShopfloorManager Error return DesyncState.Current");
                                                            //20230706  查找E05 【徐明武】 修改 Start
                                                            //return DesyncState.Current;
                                                            {
                                                                Holly.Log.HlLogger.Write("E05 => 82 ");
                                                                return DesyncState.Current;
                                                            }
                                                            //20230706  查找E05 【徐明武】 修改 End 
                                                        }
                                                        Thread.Sleep(50);
                                                    }

                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportMainShopfloorManager BoardOut NG End return GoState.Current");
                                                    return GoState.Current;
                                                    #endregion
                                                }
                                                else
                                                {
                                                    #region BoardoutNormal
                                                    //op.ClearCommand();
                                                    //opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ====> ExportMainShopfloorManager Error Board Out Normal");
                                                    //op.LocateCamera(GlobalDataManager.Current.ReleaseBoardPosition);

                                                    // 20230708 TraceLog【纪明】 追加 Start
                                                    LogManagerComm.Current.OutputLog(LogManagerComm.TRACE_LOG, DateTimeUtils.GetNow(DateTimeUtils.DATE_FORMAT1) + "\t" + "HOLLY AOI ====> ExportMainShopfloorManager Error Board Out Normal Start ");
                                                    // 20230708 TraceLog【纪明】 追加 End
                                                    op.BoardOut();

                                                    op.LocateLoader(GlobalDataManager.Current.LastPosition, GlobalDataManager.Current.ReleaseBoardPosition, false);
                                                    opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                                    progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);
                                                    //opResult.Wait();
                                                    /////////////////////////////////////////////////////////m.UpdateInline();
                                                    //context.CheckInlineMachineStatus();

                                                    // 20220803 PLC状态监控 追加 Start
                                                    Stopwatch normalBoardOutstopwatch = new Stopwatch();
                                                    normalBoardOutstopwatch.Start();
                                                    HeartBeatUtils heartBeat = new HeartBeatUtils(2);

                                                    Holly.Log.HlLogger.Write("HOLLY AOI ====> Board Out m.CompleteProcessStatus = " + m.CompleteProcessStatus);
                                                    // 20220803 PLC状态监控 追加 End

                                                    // 20230714 郑州不进板问题noboardout置位 【陈凤丹】 追加 Start
                                                    int setBoardoutEndTimes = 0;
                                                    // 20230714 郑州不进板问题noboardout置位 【陈凤丹】 追加 End

                                                    // 20220830 2022机台出板异常对应 修改 Start
                                                    //while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)

                                                    while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0 || IsHaveBoard(m))
                                                    // 20220830 2022机台出板异常对应 修改 End
                                                    {
                                                        if (context.StopFlag)
                                                            return ExitState.Current;

                                                        m.UpdateInline();
                                                        if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                                        {
                                                            //20230706  查找E05 【徐明武】 修改 Start
                                                            string message = string.Format("E05 => EmergencyButton:{0},SafeSensor:{1},CommandStatusInline.TimeOut:{2},TwoBoardInside:{3}", m.CurrentInputs.EmergencyButton.ToString(), m.CurrentInputs.SafeSensor.ToString(), ((m.CommandStatusInline & CommandStatusInline.TimeOut) != 0).ToString(), ((m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0).ToString());
                                                            Holly.Log.HlLogger.Write(message);
                                                            //return DesyncState.Current;
                                                            {
                                                                Holly.Log.HlLogger.Write("E05 => 94 Master = " + AutoRunSettings2.Default.IsMaster.ToString());
                                                                return DesyncState.Current;
                                                            }
                                                            //20230706  查找E05 【徐明武】 修改 End 
                                                        }
                                                        //context.CheckInlineMachineStatus();
                                                        Thread.Sleep(50);

                                                        // 20220803 PLC状态监控 追加 Start
                                                        if (normalBoardOutstopwatch.ElapsedMilliseconds / 1000 > 5)
                                                        {
                                                            if (!IsHaveBoard(m))
                                                            {
                                                                Holly.Log.HlLogger.Write("HOLLY AOI ====> ExportMainShopfloorManager Error Board Out is no board break");
                                                                // 20230708 TraceLog【纪明】 追加 Start
                                                                LogManagerComm.Current.OutputLog(LogManagerComm.TRACE_LOG, DateTimeUtils.GetNow(DateTimeUtils.DATE_FORMAT1) + "\t" + "HOLLY AOI ====> ExportMainShopfloorManager Error Board Out is no board break ");
                                                                // 20230708 TraceLog【纪明】 追加 End

                                                                // 20230714 郑州不进板问题noboardout置位 【陈凤丹】 修改 Start
                                                                //break;

                                                                //没收到出板完成信号，通知PLC重发出板完成，重试3次都没成功再退出
                                                                if (setBoardoutEndTimes < 3)
                                                                {
                                                                    CentralControlPLCCommand.Current.SetBoardoutEnd(1);
                                                                    setBoardoutEndTimes++;
                                                                    normalBoardOutstopwatch.Restart();
                                                                }
                                                                else
                                                                {
                                                                    Holly.Log.HlLogger.Write("HOLLY AOI ====> ExportMainShopfloorManager Error Board Out is no board break ， setBoardoutEndTimes = " + setBoardoutEndTimes);
                                                                    //LogManagerComm.Current.OutputLog(LogManagerComm.TRACE_LOG, DateTimeUtils.GetNow(DateTimeUtils.DATE_FORMAT1) + "\t" + "HOLLY AOI ====> Board Out is no board break ， setBoardoutEndTimes = " + setBoardoutEndTimes);
                                                                    break;
                                                                }
                                                                // 20230714 郑州不进板问题noboardout置位 【陈凤丹】 修改 End
                                                            }
                                                        }
                                                        // 20220803 PLC状态监控 追加 End

                                                        if (heartBeat.IsOutput())
                                                        {
                                                            Holly.Log.HlLogger.Write("HOLLY AOI ====> ExportMainShopfloorManager Error Board Out Is Waitting ...");

                                                            // 20230708 TraceLog【纪明】 追加 Start
                                                            LogManagerComm.Current.OutputLog(LogManagerComm.TRACE_LOG, DateTimeUtils.GetNow(DateTimeUtils.DATE_FORMAT1) + "\t" + "HOLLY AOI ====> Board Out Is Waitting ... ");
                                                            // 20230708 TraceLog【纪明】 追加 End
                                                        }

                                                    }
                                                    progressListener.Complete();

                                                    // 20220803 PLC状态监控 追加 Start
                                                    normalBoardOutstopwatch.Stop();
                                                    // 20220803 PLC状态监控 追加 End
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ====> ExportMainShopfloorManager Error Board Out Normal End");

                                                    // 20230708 TraceLog【纪明】 追加 Start
                                                    LogManagerComm.Current.OutputLog(LogManagerComm.TRACE_LOG, DateTimeUtils.GetNow(DateTimeUtils.DATE_FORMAT1) + "\t" + "HOLLY AOI ====> Board Out Normal End ");
                                                    // 20230708 TraceLog【纪明】 追加 End
                                                    return GoState.Current;
                                                    #endregion
                                                }
                                                #endregion
                                            }
                                        }
                                    }
                                    //20240425 太原富士康：AlarmNotification报警后板子需要停留在机台内 【曹志鹏】 追加 Start
                                    else
                                    {
                                        // 20240613 太原报警停机增加权限解锁功能 【王晨】 追加 Start
                                        ExportCommonShopfloorManager.Current.ShowDialog();
                                        // 20240613 太原报警停机增加权限解锁功能 【王晨】 追加 End

                                        // 20240304 太原LQ修改 【王晨】 追加 Start
                                        if (Customization.Current.IsNoBoardOutNG)
                                        {
                                            return ExitState.Current;
                                        }
                                        // 20240304 太原LQ修改 【王晨】 追加 End
                                    }
                                    //20240425 太原富士康：AlarmNotification报警后板子需要停留在机台内 【曹志鹏】 追加 Start
                                    //20230521 MES标准化 【曹志鹏】 追加 End
                                    Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine MainShopfloorManager End ");

                                    // 20230531 宁波高悦电机MES 【ygs】 Start
                                    if (Customization.Current.NingboGaoyueShopfloor.IsEnabled)
                                    {
                                        ExportNingboGaoyueShopfloorManager.Current.CheckBarcode(m);
                                    }
                                    // 20230531 宁波高悦电机MES 【ygs】 End

                                    // 20231211 汕尾比亚迪Mes 【王晨】 追加 Start
                                    //20240429 启动底部条码枪选项分为1，2轨单独设置 【曹志鹏】 修改 Start
                                    //if (Customization.Current.ShanWeiBYDShopfloor.IsEnabled&& !AutoRunSettings.Default.IsBottomBarcodeScannerEnabled)
                                    if (Customization.Current.ShanWeiBYDShopfloor.IsEnabled && !AutoRunSettings.Default.IsBottomBarcodeScannerEnabled1)
                                    //20240429 启动底部条码枪选项分为1，2轨单独设置 【曹志鹏】 修改 End
                                    {
                                        ExportBYD_ShanWeiShopfloorManager.Current.CheckBarcode(m);
                                    }
                                    // 20231211 汕尾比亚迪Mes 【王晨】 追加 End


                                    //20230725 移远(佳士达) 【ygs】 追加 Start
                                    if (Customization.Current.QisdaShopfloor.IsEnabled)
                                    {
                                        string msg = ExportQisdaShopfloorManager.Current.AlarmShow();
                                        if (!string.IsNullOrEmpty(msg))
                                        {
                                            ExportQisdaShopfloorManager.Current.ShowMessage(m, msg);
                                        }
                                    }
                                    //20230725 移远(佳士达) 【ygs】 追加 End

                                    // 20230407 汇川TCP/IP[李伟峰] 追加 Start
                                    if (Customization.Current.huiChuanTCPShopfloorParams.IsEnabled && AutoRunSettings2.Default.IsMaster)
                                    {
                                        // ExportHuiChuanDoubleSideManager.Current.WriteMW9050();
                                        ExportHuiChuanDoubleSideManager.Current.WriteMW6000();//向提升机发送请求进板
                                        var bl = false;
                                        while (!bl)
                                        {
                                            bl = ExportHuiChuanDoubleSideManager.Current.ReadMW6002();
                                            Thread.Sleep(100);
                                        }
                                        ExportHuiChuanDoubleSideManager.Current.ClearMW6000();
                                        CentralControlPLCCommand.Current.SetDSinal(1, 6032);// 后机要板信号 置1
                                    }
                                    string InspectionID = string.Empty;
                                    //向徐发送出板命令
                                    // 20230407 汇川TCP/IP[李伟峰] 追加 End

                                    //20240326 上海希格斯条码 【李洋】追加 Start
                                    if (Customization.Current.SHXiGeSiShopfloor.IsEnabled && AutoRunSettings.Default.IsEnableMES)
                                    {
                                        if (!ExportSHXiGeSiShopfloorManager.Current.CheckBarcode(m))
                                        {
                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportSHXiGeSiShopfloorManager Error Board Out Start");
                                            IBatchOperationInline opSHXiGeSirOutBoard = m.CreateBatchOperationInline();
                                            IOperationResult opSHXiGeSirOutRet = null;

                                            opSHXiGeSirOutBoard.BoardOutNG();
                                            opSHXiGeSirOutRet = opSHXiGeSirOutBoard.Execute(MachineParams.Current.OperationStepTimeout);
                                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                                            HeartBeatUtils boardOutHeartBeat = new HeartBeatUtils(1);
                                            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                            {
                                                if (boardOutHeartBeat.IsOutput())
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportSHXiGeSiShopfloorManager wait BoardOut Complete");
                                                }

                                                if (context.StopFlag)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportSHXiGeSiShopfloorManager Error return ExitState.Current");
                                                    return ExitState.Current;
                                                }

                                                m.UpdateInline();
                                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportSHXiGeSiShopfloorManager Error return DesyncState.Current");
                                                    //20230706  查找E05 【徐明武】 修改 Start
                                                    //return DesyncState.Current;
                                                    {
                                                        Holly.Log.HlLogger.Write("E05 => 68 ");
                                                        return DesyncState.Current;
                                                    }
                                                    //20230706  查找E05 【徐明武】 修改 End 
                                                }
                                                Thread.Sleep(50);
                                            }

                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportSHXiGeSiShopfloorManager BoardOut End return GoState.Current");
                                            return GoState.Current;
                                        }
                                    }
                                    //20240326 上海希格斯条码 【李洋】追加 End

                                    //20240327 杭州云尖mes上抛数据 【李洋】追加 Start
                                    if (Customization.Current.HZYunJianMesShopfloor.IsEnabled && AutoRunSettings.Default.IsEnableMES && AutoRunSettings2.Default.IsDoubleSideAOI)
                                    {
                                        if (!ExportHZYunJianMesShopfloorManager.Current.CheckBarcode(m))
                                        {
                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportHZYunJianMesShopfloorManager Error Board Out Start");
                                            IBatchOperationInline opDLWebServiceOutBoard = m.CreateBatchOperationInline();
                                            IOperationResult opDLWebServiceOutBoardRet = null;

                                            opDLWebServiceOutBoard.BoardOutNG();
                                            opDLWebServiceOutBoardRet = opDLWebServiceOutBoard.Execute(MachineParams.Current.OperationStepTimeout);
                                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);

                                            HeartBeatUtils boardOutHeartBeat = new HeartBeatUtils(1);
                                            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                            {
                                                if (boardOutHeartBeat.IsOutput())
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportHZYunJianMesShopfloorManager wait BoardOut Complete");
                                                }

                                                if (context.StopFlag)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportHZYunJianMesShopfloorManager Error return ExitState.Current");
                                                    return ExitState.Current;
                                                }

                                                m.UpdateInline();
                                                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportHZYunJianMesShopfloorManager Error return DesyncState.Current");
                                                    //20230706  查找E05 【徐明武】 修改 Start
                                                    //return DesyncState.Current;
                                                    {
                                                        Holly.Log.HlLogger.Write("E05 => 68 ");
                                                        return DesyncState.Current;
                                                    }
                                                    //20230706  查找E05 【徐明武】 修改 End 
                                                }
                                                Thread.Sleep(50);
                                            }

                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ExportHZYunJianMesShopfloorManager BoardOut End return GoState.Current");
                                            return GoState.Current;
                                        }
                                    }
                                    //20240327 杭州云尖mes上抛数据 【李洋】追加 End
                                    #endregion
                                    Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine MES End ");
                                    // 1.等待维修站发OK、NG 等待维修站发送OK/NG信号到后机
                                    if (AutoRunSettings.Default.IsWaitRepairSendOKNG)
                                    {
                                        //不等维修站确认先出板
                                        // 1.1 机外
                                        if (AutoRunSettings.Default.IsRepairControlNotWait)// Customization.Current.IsRepairControlNotWait)
                                        {
                                            //op.LocateCamera(GlobalDataManager.Current.ReleaseBoardPosition);
                                            // 20200829 主面生成空文件 追加 Start
                                            int fileCount = GetCreateEmptyFileCount();
                                            Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) CreateEmptyFileCount = " + fileCount);

                                            if (fileCount >= 1)
                                            {
                                                // 20200829 主面生成空文件 追加 End

                                                // 20190823 等待空文件夹 Start
                                                // 20210705 双轨双头四轨定轨对应 修改 Start
                                                //FileUtils.WaitForEmptyFile(Customization.Current.RepairControlNotWaitExportDirectory, LC.SN + "-1.txt");

                                                if (MachineParams.Current.InlineMachine.IsDoubleRail && !MachineParams.Current.InlineMachine.IsSingleHead && MachineParams.Current.InlineMachine.IsFourthRailFixed)
                                                {
                                                    FileUtils.WaitForEmptyFile(Customization.Current.RepairControlNotWaitExportDirectory, LC.SN + "-2.txt");
                                                }
                                                else
                                                {
                                                    FileUtils.WaitForEmptyFile(Customization.Current.RepairControlNotWaitExportDirectory, LC.SN + "-1.txt");
                                                }
                                                // 20210705 双轨双头四轨定轨对应 修改 End
                                                // 20190823 等待空文件夹 End

                                                // 20190915 出板延时修改 Start
                                                WaitForLastSendOKNGSignal();
                                                // 20190915 出板延时修改 End

                                                // 20221012 机外判定OKNG错乱对应 追加 Start
                                                ProcessDataNotWaitControl.Current.UpdateBoardOutStatu(checkRailID);
                                                InspectionID = ProcessDataNotWaitControl.Current.GetInspectionIDForBoardOut(checkRailID);
                                                // 20221012 机外判定OKNG错乱对应 追加 End

                                                // 20220613 双面机机外判定同步出板 追加 Start
                                                if (AutoRunSettings2.Default.IsDoubleSideAOI && AutoRunSettings2.Default.IsUseDataControl && AutoRunSettings2.Default.IsSyncBoardOut)
                                                {
                                                    DoubleSideDataControl.Current.SyncBoardOutState(checkRailID);
                                                }
                                                // 20220613 双面机机外判定同步出板 追加 End

                                                //20240520 越南华庄：增加检测一定数量板子后自动重启维修站功能【曹志鹏】追加 Start
                                                ViewModels.RailInfoViewModel.Current.UpdateBoardOutData(1, 1);
                                                //20240520 越南华庄：增加检测一定数量板子后自动重启维修站功能【曹志鹏】追加 End

                                                op.BoardOut();
                                                Holly.Log.HlLogger.Write("HOLLY AOI ====> op.BoardOut() = " + GlobalDataManager.Current.OutPCsQuene.Count);
                                                op.LocateLoader(GlobalDataManager.Current.LastPosition, GlobalDataManager.Current.ReleaseBoardPosition, false);
                                                opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                                progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);
                                                /////////////////////////////////////////////////////////m.UpdateInline();
                                                //context.CheckInlineMachineStatus();

                                                // 20190906 OK/NG log修改 Start
                                                // 心跳
                                                DateTime dateTimePre4 = DateTime.Now;
                                                DateTime dateTimeNow4 = DateTime.Now;
                                                // 20190906 OK/NG log修改 End

                                                // 20220830 2022机台出板异常对应 追加 Start
                                                Stopwatch normalBoardOutstopwatch = new Stopwatch();
                                                normalBoardOutstopwatch.Start();
                                                Holly.Log.HlLogger.Write("HOLLY AOI ====> Board Out m.CompleteProcessStatus = " + m.CompleteProcessStatus);
                                                // 20220830 2022机台出板异常对应 追加 End
                                                // 20220830 2022机台出板异常对应 修改 Start
                                                //while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)

                                                while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0 || IsHaveBoard(m))
                                                // 20220830 2022机台出板异常对应 修改 End
                                                {
                                                    // 20190907 OK / NG 信号Log输出追加 Start
                                                    dateTimeNow4 = DateTime.Now;
                                                    TimeSpan ts = dateTimeNow4 - dateTimePre4;
                                                    if (ts.TotalSeconds >= 5)
                                                    {
                                                        dateTimePre4 = dateTimeNow4;
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> Board Out Wait CompleteProcessStatus Heart 5s ...... " + dateTimeNow4);
                                                        // 20240920 状态名称为空故障对应 【陈凤丹】 删除 Start
                                                        //删除原因：状态输出需要有状态名，异常状态需要有相关信息，该状态无法归类，暂时注释
                                                        //ExportEquipmentRunStatusManager.Current.Export("", "", "N/A");
                                                        // 20240920 状态名称为空故障对应 【陈凤丹】 删除 End
                                                    }
                                                    // 20190907 OK / NG 信号Log输出追加 End

                                                    if (context.StopFlag)
                                                        return ExitState.Current;
                                                    m.UpdateInline();
                                                    if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                                    {
                                                        //20230706  查找E05 【徐明武】 修改 Start
                                                        //return DesyncState.Current;
                                                        {
                                                            Holly.Log.HlLogger.Write("E05 => 83 ");
                                                            return DesyncState.Current;
                                                        }
                                                        //20230706  查找E05 【徐明武】 修改 End 
                                                    }
                                                    //context.CheckInlineMachineStatus();
                                                    Thread.Sleep(50);

                                                    // 20220830 2022机台出板异常对应 追加 Start
                                                    if (normalBoardOutstopwatch.ElapsedMilliseconds / 1000 > 5)
                                                    {
                                                        if (!IsHaveBoard(m))
                                                        {

                                                            Holly.Log.HlLogger.Write("HOLLY AOI ====> Board Out is no board break");
                                                            break;
                                                        }
                                                    }
                                                    // 20220830 2022机台出板异常对应 追加 End
                                                }

                                                // 20221010 武汉富士康堆板 追加 start
                                                #region 堆板弹框
                                                string alarmMsg = ExportCacheComAlarmManager.Current.AlertAlarmInfoMsg(checkRailID);
                                                //Holly.Log.HlLogger.Write("HOLLY AOI ====> Board Out alarmMsg=" + alarmMsg);
                                                if (!string.IsNullOrEmpty(alarmMsg))
                                                {
                                                    // 20211221 武汉富士康报警预警 修改 End
                                                    // 20211221 武汉富士康报警预警 删除 Start
                                                    //if ((ExportCacheComAlarmManager.Current.IsCacheMachineAlarmList() || !string.IsNullOrEmpty(slaveAlarmList)) && isSlaveCheckAlarmList && isNumberTimes)
                                                    //{
                                                    // 20211221 武汉富士康报警预警 删除 End

                                                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                                    ExportShanWeiWatchBoardBYDShopfloorManager.Current.WriteAlarm(1, alarmMsg + Lang.UI.UI_Status_CompAlarmExceed, DateTime.Now);
                                                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End

                                                    UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                                                    new Action(
                                                                        delegate ()
                                                                        {
                                                                            op = m.CreateBatchOperationInline();
                                                                            opResult = null;
                                                                            op.ClearLampBlink();
                                                                            op.SetRedAndBuzzer();
                                                                            opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                                                            opResult.Wait();
                                                                            //20230717 log输出【ygs】 Start 
                                                                            ExportLogOuputManager.Current.OuputLog(11, alarmMsg + Lang.UI.UI_Status_CompAlarmExceed);
                                                                            //20230717 log输出【ygs】 End
                                                                            IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                                                            messageManager.ShowError(alarmMsg + Lang.UI.UI_Status_CompAlarmExceed);


                                                                            // 20211207 武汉富士康报警预警 修改 Start
                                                                            ExportCacheComAlarmManager.Current.ClearCacheMachineAlarmList(1);
                                                                            // 20211207 武汉富士康报警预警 修改 End

                                                                            IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                                                            IOperationResult opResult2 = null;
                                                                            op2.SetBuzzer(false);
                                                                            opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                                                            opResult2.Wait();
                                                                        }));

                                                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                                    ExportShanWeiWatchBoardBYDShopfloorManager.Current.UpdateAlarm(3, alarmMsg + Lang.UI.UI_Status_CompAlarmExceed, DateTime.Now);
                                                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End

                                                    // 20240613 太原报警停机增加权限解锁功能 【王晨】 追加 Start
                                                    ExportCommonShopfloorManager.Current.ShowDialog();
                                                    // 20240613 太原报警停机增加权限解锁功能 【王晨】 追加 End

                                                    // 20240304 太原LQ修改 【王晨】 追加 Start
                                                    //if (Customization.Current.IsNoBoardOutNG)
                                                    //{
                                                    //    return ExitState.Current;
                                                    //}
                                                    // 20240304 太原LQ修改 【王晨】 追加 End
                                                }
                                                // 20221010 武汉富士康堆板 追加 End
                                                #endregion
                                                // 20221010 武汉富士康堆板 追加 End

                                                // 20220830 2022机台出板异常对应 追加 Start
                                                normalBoardOutstopwatch.Stop();
                                                // 20220830 2022机台出板异常对应 追加 End

                                                //GlobalDataManager.Current.OutPCsQuene.Enqueue(1);

                                                DeleteCentralControlFile();
                                                // 20190823 OK/NG信号文件内容Copy删除 Start
                                                ////生成文件
                                                //if (!Directory.Exists(Customization.Current.RepairControlNotWaitExportDirectory))
                                                //    {
                                                //        Directory.CreateDirectory(Customization.Current.RepairControlNotWaitExportDirectory);
                                                //    }
                                                // 20190823 OK/NG信号文件内容Copy删除 End
                                                // 20210705 双轨双头四轨定轨对应 修改 Start
                                                //string filePath = DateTime.Now.ToString("yyyyMMddHHmmss") + "-" + LC.SN + "-1.txt";

                                                string filePath = "";
                                                if (MachineParams.Current.InlineMachine.IsDoubleRail && !MachineParams.Current.InlineMachine.IsSingleHead && MachineParams.Current.InlineMachine.IsFourthRailFixed)
                                                {
                                                    filePath = DateTime.Now.ToString("yyyyMMddHHmmss") + "-" + LC.SN + "-2.txt";
                                                    // 20221012 机外判定OKNG错乱对应 追加 Start
                                                    if (Customization.Current.IsProcessDataNotWaitControlEnable)
                                                    {
                                                        filePath = InspectionID + "_" + LC.SN + "_2.txt";
                                                    }
                                                    // 20221012 机外判定OKNG错乱对应 追加 End

                                                    // 20220801 机外判定OKNG信号(队列,先进先出) 追加 Start
                                                    if (Customization.Current.IsQueueDataNotWaitControlEnable)
                                                        filePath = InspectionID + "-" + LC.SN + "-2.txt";
                                                    // 20220801 机外判定OKNG信号(队列,先进先出) 追加 End
                                                }
                                                else
                                                {
                                                    filePath = DateTime.Now.ToString("yyyyMMddHHmmss") + "-" + LC.SN + "-1.txt";
                                                    // 20221012 机外判定OKNG错乱对应 追加 Start
                                                    if (Customization.Current.IsProcessDataNotWaitControlEnable)
                                                    {
                                                        filePath = InspectionID + "_" + LC.SN + "_1.txt";
                                                    }
                                                    // 20221012 机外判定OKNG错乱对应 追加 End
                                                    // 20220801 机外判定OKNG信号(队列,先进先出) 追加 Start
                                                    if (Customization.Current.IsQueueDataNotWaitControlEnable)
                                                        filePath = InspectionID + "-" + LC.SN + "-1.txt";
                                                    // 20220801 机外判定OKNG信号(队列,先进先出) 追加 End
                                                }
                                                // 20210705 双轨双头四轨定轨对应 修改 End
                                                // 20190823 OK/NG信号文件内容删除 Start
                                                //filePath = Path.Combine(Customization.Current.RepairControlNotWaitExportDirectory, filePath);
                                                //    TextWriter tw = new StreamWriter(filePath);
                                                // 20190823 OK/NG信号文件内容删除 Start
                                                //using (tw)
                                                //{
                                                //    tw.WriteLine(DateTime.Now.ToString("yyyyMMddHHmmss"));
                                                //}                                                
                                                //tw.Close();
                                                // 20190823 OK/NG信号文件内容删除 End

                                                // 20190823 OK/NG信号文件内容Copy变更 Start
                                                FileUtils.CreateEmptyFile(Customization.Current.RepairControlNotWaitExportDirectory, filePath);
                                                // 20190823 OK/NG信号文件内容Copy变更 End

                                                // 20220801 机外判定OKNG信号(队列,先进先出) 追加 Start
                                                ProcessDataNotWaitControl1.Current.CreateFileForBoard(1, filePath);
                                                // 20220801 机外判定OKNG信号(队列,先进先出) 追加 End

                                                // 20200829 主面生成空文件 追加 Start
                                                if (fileCount == 2)
                                                {
                                                    string othersideFilePath = DateTime.Now.ToString("yyyyMMddHHmmss") + "-" + AutoRunSettings2.Default.OtherSideSN + "-1.txt";
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ====> ImageAcquisitionMachine  othersideFilePath = " + othersideFilePath);
                                                    FileUtils.CreateEmptyFile(Customization.Current.RepairControlNotWaitExportDirectory, othersideFilePath);
                                                }
                                            }
                                            // 20200829 主面生成空文件 追加 End
                                            Holly.Log.HlLogger.Write("HOLLY AOI ====> op.BoardOut() Finish  GlobalDataManager.Current.OutPCsQuene.Enqueue(1) = " + GlobalDataManager.Current.OutPCsQuene.Count);

                                            //20240520 越南华庄：增加检测一定数量板子后自动重启维修站功能【曹志鹏】追加 Start
                                            ViewModels.RailInfoViewModel.Current.UpdateBoardOutData(1, 2);
                                            //20240520 越南华庄：增加检测一定数量板子后自动重启维修站功能【曹志鹏】追加 End
                                        }
                                        // 20200414 汇川NG出板变清板 追加 Start
                                        else if (Customization.Current.HuiChuanShopfloor.IsDoubleSideAOI)
                                        {
                                            //HuiChuanoperation(m, context);
                                            int repairFlag = -1;
                                            repairFlag = ExportHuiChuanManager.Current.WaitAndReturnResult();

                                            Holly.Log.HlLogger.Write("HOLLY AOI =====> HuiChuanShopfloor repairFlag:" + repairFlag.ToString());
                                            if (repairFlag == 0)
                                            {
                                                Holly.Log.HlLogger.Write("HOLLY AOI =====> HuiChuanShopfloor BoardOut Master Side");
                                                op.BoardOut();
                                                op.LocateLoader(GlobalDataManager.Current.LastPosition, GlobalDataManager.Current.ReleaseBoardPosition, false);
                                                opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                                progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);
                                            }
                                            else
                                            {
                                                op.ClearCommand();
                                                op.ClearBoard();
                                                op.SetGreenLampBlink();
                                                IOperationResult opResultng = op.Execute(MachineParams.Current.OperationStepTimeout);
                                                progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_ClearingBoard);
                                                opResultng.Wait();
                                                m.UpdateInline();
                                                progressListener.Complete();

                                                Holly.Log.HlLogger.Write("HOLLY AOI =====> HuiChuanShopfloor ClearBoard");
                                                // 等待板子到出板口
                                                while (true)
                                                {
                                                    m.UpdateInline();
                                                    if ((m.InputStatusInline & InputStatusInline.BoardIn) != 0)
                                                        break;
                                                    Thread.Sleep(500);
                                                    Holly.Log.HlLogger.Write("HOLLY AOI =====> HuiChuanShopfloor Wait For The Board To BoardIn Location...");
                                                }
                                                Holly.Log.HlLogger.Write("HOLLY AOI =====> HuiChuanShopfloor ClearBoard Finish");

                                                // 等待板子拿出
                                                while (true)
                                                {
                                                    m.UpdateInline();
                                                    if (!((m.InputStatusInline & InputStatusInline.BoardIn) != 0))
                                                        break;
                                                    Thread.Sleep(500);
                                                    Holly.Log.HlLogger.Write("HOLLY AOI =====> HuiChuanShopfloor Wait For The Board To TakeAway...");
                                                }
                                                context._isReBoardIn = true;
                                                return GoState.Current;
                                            }

                                            // 设置多余 20200421
                                            //if (Customization.Current.RepairWaitBuzzer)
                                            //{
                                            //    op.SetBuzzer(false);
                                            //}
                                            progressListener.Complete();
                                        }
                                        // 20200414 汇川NG出板变清板 追加 End

                                        #region 废代码
                                        //// 20201104 通用版本切换程序 追加 Start
                                        //else if (Customization.Current.SwitchProgram.IsEnabled)
                                        //{
                                        //    // 先相机回原点
                                        //    try
                                        //    {
                                        //        m.Update();
                                        //        m.SmartReleaseBoard();
                                        //        Holly.Log.HlLogger.Write("HOLLY AOI ====> SwitchProgram ImageAcquisitionMachine Visit Camera Back To Origin Finish");
                                        //    }
                                        //    catch (Exception ex)
                                        //    {
                                        //        Holly.Log.HlLogger.Write("HOLLY AOI ====> SwitchProgram ImageAcquisitionMachine Visit Camera Back To Origin Exception:" + ex);
                                        //    }

                                        //    Holly.Log.HlLogger.Write("HOLLY AOI ====> SwitchProgram ImageAcquisitionMachine Visit currentInspectionID:" + ExportSwitchProgramManager.Current.currentInspectionID);
                                        //    // 等待结果文件
                                        //    string snBoe = ExportSwitchProgramManager.Current.currentInspectionID;
                                        //    double timeoutBOE = (double)Customization.Current.BOEBigLedInspectionEquipment.WaittingCommitResultTimeOut;       // 60s后结束while循环,超时log显示
                                        //    string dir = Path.Combine(Customization.Current.BOEBigLedInspectionEquipment.ReadResultDirectory, snBoe);
                                        //    string pathResult = Path.Combine(dir, snBoe + "__" + "result.txt");
                                        //    Holly.Log.HlLogger.Write("HOLLY AOI ====> SwitchProgram ImageAcquisitionMachine Visit pathResult:" + pathResult);
                                        //    int repairFlagBOE = -1;
                                        //    DateTime dateTimePre = DateTime.Now;
                                        //    while (true)
                                        //    {
                                        //        try
                                        //        {
                                        //            if (!GlobalDataManager.Current.IsAutoRun)
                                        //            {
                                        //                Holly.Log.HlLogger.Write("HOLLY AOI ====> SwitchProgram ImageAcquisitionMachine Visit Exit AutoRun");
                                        //                break;
                                        //            }
                                        //            if (File.Exists(pathResult))
                                        //            {
                                        //                TextReader tr = new StreamReader(pathResult);
                                        //                using (tr)
                                        //                {
                                        //                    repairFlagBOE = Convert.ToInt32(tr.ReadLine());
                                        //                }
                                        //                tr.Close();
                                        //                break;
                                        //            }

                                        //            TimeSpan ts = DateTime.Now - dateTimePre;
                                        //            if (ts.TotalSeconds > timeoutBOE)
                                        //            {
                                        //                Holly.Log.HlLogger.Write("HOLLY AOI ====> SwitchProgram ImageAcquisitionMachine Visit IsWait ResultFiles Timeout");

                                        //                UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal, new Action(delegate ()
                                        //                {
                                        //                    IBatchOperationInline opBoe1 = m.CreateBatchOperationInline();
                                        //                    IOperationResult opResultBoe1 = null;

                                        //                    opBoe1.ClearLampBlink();
                                        //                    opBoe1.SetRedAndBuzzer();
                                        //                    opResultBoe1 = opBoe1.Execute(MachineParams.Current.OperationStepTimeout);
                                        //                    m.UpdateInline();
                                        //                    Holly.Log.HlLogger.Write("HOLLY AOI ====> SwitchProgram ImageAcquisitionMachine SetRedAndBuzzer");

                                        //                    IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                        //                    messageManager.ShowError("请尽快提交或修改等待超时时间！", "等待维修站确认超时：");
                                        //                    Holly.Log.HlLogger.Write("HOLLY AOI ====> SwitchProgram ImageAcquisitionMachine ShowErrorMessage");

                                        //                    IBatchOperationInline op10 = m.CreateBatchOperationInline();
                                        //                    IOperationResult opResult10 = null;

                                        //                    op10.ClearCommand();
                                        //                    op10.ClearLampBuzzer();
                                        //                    op10.SetBuzzer(false);
                                        //                    opResult10 = op10.Execute(MachineParams.Current.OperationStepTimeout);
                                        //                    m.UpdateInline();
                                        //                    Holly.Log.HlLogger.Write("HOLLY AOI ====> SwitchProgram ImageAcquisitionMachine Reset");
                                        //                }));

                                        //                repairFlagBOE = 1;
                                        //                break;
                                        //            }

                                        //            System.Threading.Thread.Sleep(300);
                                        //            Holly.Log.HlLogger.Write("HOLLY AOI ====> SwitchProgram ImageAcquisitionMachine IsWait ResultFiles...");
                                        //        }
                                        //        catch
                                        //        { }
                                        //    }

                                        //    Holly.Log.HlLogger.Write("HOLLY AOI ====> SwitchProgram ImageAcquisitionMachine Visit repairFlagBOE:" + repairFlagBOE.ToString());

                                        //    if (repairFlagBOE == 0)
                                        //    {
                                        //        Holly.Log.HlLogger.Write("HOLLY AOI ====> SwitchProgram ImageAcquisitionMachine Visit BoardOut");
                                        //        op.BoardOut();
                                        //    }
                                        //    else
                                        //    {
                                        //        Holly.Log.HlLogger.Write("HOLLY AOI ====> SwitchProgram ImageAcquisitionMachine Visit BoardOutNG");
                                        //        op.BoardOutNG();
                                        //    }

                                        //    opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                        //}
                                        //// 20201104 通用版本切换程序 追加 End
                                        #endregion

                                        #region 旧代码
                                        //20241211 贝斯特NG回流异常修正【曹志鹏】删除 Start
                                        //// 20221213 贝思特NG出板变清板 追加 Start
                                        //else if (Customization.Current.BeiSiTeShopfloor.IsNGFlowBack)  
                                        //{
                                        //    Holly.Log.HlLogger.Write("HOLLY AOI =====> Customization.Current.BeiSiTeShopfloor.IsNGFlowBack:" + Customization.Current.BeiSiTeShopfloor.IsNGFlowBack);

                                        //    int repairFlag = -1;
                                        //    // 20230111 贝思特MES报错不退出自动运行重测 修改 Start
                                        //    //repairFlag = ExportBeiSiTeShopfloorManger.Current.ExportGetContentMain2();

                                        //    if (checkBarcodeResult)
                                        //    {
                                        //        repairFlag = ExportBeiSiTeShopfloorManger.Current.ExportGetContentMain2();
                                        //    }
                                        //     // 20230111 贝思特MES报错不退出自动运行重测 修改 End
                                        //    Holly.Log.HlLogger.Write("HOLLY AOI =====> BeiSiTeShopfloor repairFlag:" + repairFlag.ToString());
                                        //    // 20230111 贝思特MES报错不退出自动运行重测 修改 Start
                                        //    //if (repairFlag != -1)
                                        //    //{
                                        //    //    if (repairFlag == 0)

                                        //    if (repairFlag != -1 || !checkBarcodeResult)
                                        //    {
                                        //        if (repairFlag == 0 || !checkBarcodeResult)
                                        //        // 20230111 贝思特MES报错不退出自动运行重测 修改 End
                                        //        {
                                        //            Holly.Log.HlLogger.Write("HOLLY AOI =====> BeiSiTeShopfloor BoardOut Master Side");
                                        //            op.BoardOut();
                                        //            op.LocateLoader(GlobalDataManager.Current.LastPosition, GlobalDataManager.Current.ReleaseBoardPosition, false);
                                        //            opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                        //            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);
                                        //            while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                        //            {
                                        //                if (!GlobalDataManager.Current.IsAutoRun)
                                        //                {
                                        //                    Holly.Log.HlLogger.Write("HOLLY AOI =====> BeiSiTeShopfloor IsAutoRun= " + GlobalDataManager.Current.IsAutoRun);
                                        //                    break;
                                        //                }
                                        //                if (context.StopFlag)
                                        //                {
                                        //                    return ExitState.Current;
                                        //                }

                                        //                m.UpdateInline();
                                        //                if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                        //                {
                                        //                    //20230706  查找E05 【徐明武】 修改 Start
                                        //                    //return DesyncState.Current;
                                        //                    {
                                        //                        Holly.Log.HlLogger.Write("E05 => 84 ");
                                        //                        return DesyncState.Current;
                                        //                    }
                                        //                    //20230706  查找E05 【徐明武】 修改 End 
                                        //                }
                                        //                Thread.Sleep(50);
                                        //            }
                                        //            Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.GoState BeiSiTeShopfloor Board Out Finish ");
                                        //            progressListener.Complete();
                                        //        }
                                        //        else
                                        //        {
                                        //            //op.ClearCommand();
                                        //            op.ClearBoard();
                                        //            op.SetGreenLampBlink();
                                        //            IOperationResult opResultng = op.Execute(MachineParams.Current.OperationStepTimeout);
                                        //            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_ClearingBoard);
                                        //            opResultng.Wait();
                                        //            m.UpdateInline();
                                        //            progressListener.Complete();

                                        //            Holly.Log.HlLogger.Write("HOLLY AOI =====> BeiSiTeShopfloor ClearBoard");
                                        //            // 等待板子到出板口
                                        //            while (true)
                                        //            {
                                        //                m.UpdateInline();
                                        //                if ((m.InputStatusInline & InputStatusInline.BoardIn) != 0)
                                        //                    break;
                                        //                Thread.Sleep(500);
                                        //                Holly.Log.HlLogger.Write("HOLLY AOI =====> BeiSiTeShopfloor Wait For The Board To BoardIn Location...");
                                        //                if (!GlobalDataManager.Current.IsAutoRun)
                                        //                {
                                        //                    Holly.Log.HlLogger.Write("HOLLY AOI =====> BeiSiTeShopfloor IsAutoRun= " + GlobalDataManager.Current.IsAutoRun);
                                        //                    break;
                                        //                }
                                        //            }
                                        //            Holly.Log.HlLogger.Write("HOLLY AOI =====> BeiSiTeShopfloor ClearBoard Finish");

                                        //            // 等待板子拿出
                                        //            while (true)
                                        //            {
                                        //                m.UpdateInline();
                                        //                if (!((m.InputStatusInline & InputStatusInline.BoardIn) != 0))
                                        //                    break;
                                        //                Thread.Sleep(500);
                                        //                Holly.Log.HlLogger.Write("HOLLY AOI =====> BeiSiTeShopfloor Wait For The Board To TakeAway...");
                                        //                if (!GlobalDataManager.Current.IsAutoRun)
                                        //                {
                                        //                    Holly.Log.HlLogger.Write("HOLLY AOI =====> BeiSiTeShopfloor IsAutoRun= " + GlobalDataManager.Current.IsAutoRun);
                                        //                    break;
                                        //                }
                                        //            }
                                        //            context._isReBoardIn = true;
                                        //            return GoState.Current;
                                        //        }
                                        //    }
                                        //}
                                        //// 20221213 贝思特NG出板变清板 追加 End
                                        //20241211 贝斯特NG回流异常修正【曹志鹏】删除 End
                                        #endregion
                                        // 20230223 NG清板【王小雪】 追加 Start 
                                        //20241211 贝斯特NG回流异常修正【曹志鹏】修改 Start
                                        //else if (ExportClearBoardShopfloor.Current.IsExportEnabled)
                                        else if (ExportClearBoardShopfloor.Current.IsExportEnabled || Customization.Current.BeiSiTeShopfloor.IsNGFlowBack)
                                        //20241211 贝斯特NG回流异常修正【曹志鹏】修改 End
                                        {
                                            Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.GoState ClearBoardShopfloor ExportClearBoardShopfloor.Current.IsExportEnabled = " + ExportClearBoardShopfloor.Current.IsExportEnabled);
                                            Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.GoState ClearBoardShopfloor Customization.Current.BeiSiTeShopfloor.IsNGFlowBack = " + Customization.Current.BeiSiTeShopfloor.IsNGFlowBack);

                                            int[] processRet = ExportClearBoardShopfloor.Current.ClearBoard(m, context, reportManager, op, opResult, progressListener);
                                            Holly.Log.HlLogger.Write($"HOLLY AOI =====> ImageAcquisitionMachine.GoState ClearBoardShopfloor Status={processRet[0]} repairFlag={processRet[1]}");
                                            Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.GoState ClearBoardShopfloor IsAutoRun= " + GlobalDataManager.Current.IsAutoRun);

                                            // 20230310 NG清板 双面机追加【王小雪】 修改 Start
                                            // 删除不用变量
                                            //switch (processRet[0])
                                            //{              
                                            //    case ExportClearBoardShopfloor.ExitState:
                                            //        return ExitState.Current;
                                            //    case ExportClearBoardShopfloor.DesyncState:
                                            //        return DesyncState.Current;
                                            //    //case ExportClearBoardShopfloor.GoState:
                                            //    //    return GoState.Current;
                                            //}

                                            if (processRet[0] == ExportClearBoardShopfloor.ExitState)
                                            {
                                                return ExitState.Current;
                                            }
                                            // 20230310 NG清板 双面机追加【王小雪】 修改 End

                                            //ok 出板；ng 清板
                                            int repairFlag = -1;
                                            repairFlag = processRet[1];
                                            if (repairFlag == 0)
                                            {
                                                Holly.Log.HlLogger.Write("HOLLY AOI =====>  ImageAcquisitionMachine.GoState ClearBoardShopfloor BoardOut Master Side");
                                                op.BoardOut();
                                                op.LocateLoader(GlobalDataManager.Current.LastPosition, GlobalDataManager.Current.ReleaseBoardPosition, false);
                                                opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                                progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);
                                                while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                                {
                                                    if (!GlobalDataManager.Current.IsAutoRun)
                                                    {
                                                        Holly.Log.HlLogger.Write("HOLLY AOI =====>  ImageAcquisitionMachine.GoState ClearBoardShopfloor IsAutoRun= " + GlobalDataManager.Current.IsAutoRun);
                                                        break;
                                                    }
                                                    if (context.StopFlag)
                                                    {
                                                        return ExitState.Current;
                                                    }

                                                    m.UpdateInline();
                                                    if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                                    {
                                                        //20230706  查找E05 【徐明武】 修改 Start
                                                        //return DesyncState.Current;
                                                        {
                                                            Holly.Log.HlLogger.Write("E05 => 85 ");
                                                            return DesyncState.Current;
                                                        }
                                                        //20230706  查找E05 【徐明武】 修改 End 
                                                    }
                                                    Thread.Sleep(50);
                                                }
                                                Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.GoState ClearBoardShopfloor Board Out Finish ");
                                                progressListener.Complete();
                                            }
                                            else
                                            {
                                                op.ClearCommand();
                                                op.ClearBoard();
                                                op.SetGreenLampBlink();
                                                IOperationResult opResultng = op.Execute(MachineParams.Current.OperationStepTimeout);
                                                progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_ClearingBoard);
                                                opResultng.Wait();
                                                m.UpdateInline();
                                                progressListener.Complete();

                                                Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.GoState ClearBoardShopfloor ClearBoard");
                                                // 等待板子到出板口
                                                while (true)
                                                {
                                                    m.UpdateInline();
                                                    if ((m.InputStatusInline & InputStatusInline.BoardIn) != 0)
                                                        break;
                                                    Thread.Sleep(500);
                                                    Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.GoState ClearBoardShopfloor Wait For The Board To BoardIn Location...");
                                                    if (!GlobalDataManager.Current.IsAutoRun)
                                                    {
                                                        Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.GoState ClearBoardShopfloor IsAutoRun= " + GlobalDataManager.Current.IsAutoRun);
                                                        break;
                                                    }
                                                }
                                                Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.GoState ClearBoardShopfloor ClearBoard Finish");

                                                // 等待板子拿出
                                                while (true)
                                                {
                                                    m.UpdateInline();
                                                    if (!((m.InputStatusInline & InputStatusInline.BoardIn) != 0))
                                                        break;
                                                    Thread.Sleep(500);
                                                    Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.GoState ClearBoardShopfloor Wait For The Board To TakeAway...");
                                                    if (!GlobalDataManager.Current.IsAutoRun)
                                                    {
                                                        Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.GoState ClearBoardShopfloor IsAutoRun= " + GlobalDataManager.Current.IsAutoRun);
                                                        break;
                                                    }
                                                }
                                                context._isReBoardIn = true;
                                                return GoState.Current;
                                            }
                                        }
                                        // 20230223 NG清板【王小雪】 追加 Start

                                        // 1.2 机内
                                        else
                                        {
                                            // 20200826 异物检测 喷码机追加 Start
                                            Holly.Log.HlLogger.Write("HOLLY PRITNT =====> Customization.Current.CentralControlFileMode.IsEnabled step1 = " + Customization.Current.CentralControlFileMode.IsEnabled);
                                            Holly.Log.HlLogger.Write("HOLLY PRITNT =====> wait result start");
                                            HeartBeatUtils heartBeat = new HeartBeatUtils(2);
                                            // 20200826 异物检测 喷码机追加 End

                                            Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) waiting Inspection result Start");
                                            bool hasReport = false;
                                            // 20210913 NVT检测结果生成信号及空文件丢失问题对应 追加 Start
                                            Stopwatch hasReportTimeoutStopwatch = Stopwatch.StartNew();
                                            TimeSpan hasReportTimeout = new TimeSpan(0, 0, 10);
                                            // 20210913 NVT检测结果生成信号及空文件丢失问题对应 追加 End
                                            while (!hasReport)
                                            {
                                                // 20200826 异物检测 喷码机追加 Start
                                                if (heartBeat.IsOutput())
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY PRITNT =====> wait result 2s ......");
                                                }
                                                // 20200826 异物检测 喷码机追加 End

                                                if (context.StopFlag)
                                                    return ExitState.Current;

                                                System.Threading.Thread.Sleep(50);
                                                //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 Start
                                                //hasReport = reportManager.HasReport;
                                                hasReport = reportManager.HasReport(checkRailID);
                                                //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 End

                                                // 20210913 NVT检测结果生成信号及空文件丢失问题对应 追加 Start
                                                if (!hasReport)
                                                {
                                                    if (hasReportTimeoutStopwatch.Elapsed >= hasReportTimeout)
                                                    {
                                                        //去createDBList1找
                                                        if (checkRailID == 1)
                                                        {
                                                            hasReport = ProcessDataControl.Current.GetCreateDBEndSignal1();
                                                        }
                                                        else
                                                        {
                                                            hasReport = ProcessDataControl.Current.GetCreateDBEndSignal2();
                                                        }
                                                    }
                                                }
                                                if (hasReport)
                                                {
                                                    hasReportTimeoutStopwatch.Stop();
                                                }
                                                // 20210913 NVT检测结果生成信号及空文件丢失问题对应 追加 End
                                            }
                                            Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) waiting Inspection result End");

                                            // 20200826 异物检测 喷码机追加 Start
                                            Holly.Log.HlLogger.Write("HOLLY PRITNT =====> wait result end");

                                            Holly.Log.HlLogger.Write("HOLLY PRITNT =====> hasReport = " + hasReport);
                                            // 20200826 异物检测 喷码机追加 End
                                            //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 Start
                                            //if (!reportManager.IsPassOK)
                                            if (!reportManager.IsPassOK(checkRailID))
                                            //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 End
                                            {
                                                //op.ClearCommand();
                                                if (Customization.Current.RepairWaitBuzzer)
                                                {
                                                    IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                                    IOperationResult opResult2 = null;
                                                    //20230814 共通需亮红灯 【李逸凡】 修改 Start
                                                    //op2.SetBuzzer(true);

                                                    if (Customization.Current.RepairWaitBuzzerIsRed)
                                                    {
                                                        op2.SetRedAndBuzzer();
                                                    }
                                                    else
                                                    {
                                                        op2.SetBuzzer(true);
                                                    }
                                                    //20230814 共通需亮红灯 【李逸凡】 修改 End

                                                    opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                                    opResult2.Wait();
                                                }

                                                // 20210308 以机台检测结果报警 追加 Start 
                                                // 20211020 NG板弹窗报警蜂鸣器响 修改 Start
                                                //if (Customization.Current.DoubleSideAOI.IsDoubleSideAOI && 
                                                //    Customization.Current.DoubleSideAOI.IsMaster && 
                                                //    Customization.Current.DoubleSideAOI.IsAlarmByAOIResult)

                                                Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine1.Visit(GoState) IsNGBoardPopupAndBuzz = " + Customization.Current.CommonShopfloor.IsNGBoardPopupAndBuzz);
                                                if ((AutoRunSettings2.Default.IsDoubleSideAOI &&
                                                    AutoRunSettings2.Default.IsMaster &&
                                                    AutoRunSettings2.Default.IsAlarmByAOIResult) ||
                                                    Customization.Current.CommonShopfloor.IsNGBoardPopupAndBuzz)
                                                // 20211020 NG板弹窗报警蜂鸣器响 修改 End
                                                {
                                                    IBatchOperationInline op5 = m.CreateBatchOperationInline();
                                                    IOperationResult opResult5 = null;
                                                    op5.SetRedAndBuzzer();
                                                    opResult5 = op5.Execute(MachineParams.Current.OperationStepTimeout);
                                                    opResult5.Wait();

                                                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                                    ExportShanWeiWatchBoardBYDShopfloorManager.Current.WriteAlarm(1, Lang.UI.UI_Label_NGPCB, DateTime.Now);
                                                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End

                                                    UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                                        new Action(
                                                            delegate ()
                                                            {
                                                                //20230717 log输出【ygs】 Start 
                                                                ExportLogOuputManager.Current.OuputLog(11, Lang.UI.UI_Label_NGPCB);
                                                                //20230717 log输出【ygs】 End
                                                                IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                                                messageManager.ShowError(Lang.UI.UI_Label_NGPCB);
                                                            }));

                                                    IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                                    IOperationResult opResult2 = null;

                                                    op2.SetBuzzer(false);
                                                    opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                                    opResult2.Wait();
                                                    IBatchOperationInline op3 = m.CreateBatchOperationInline();
                                                    IOperationResult opResult3 = null;

                                                    op3.SetGreenLampOn();
                                                    // 20211020 NG板弹窗报警蜂鸣器响 修改 Start
                                                    //opResult3 = op2.Execute(MachineParams.Current.OperationStepTimeout);

                                                    opResult3 = op3.Execute(MachineParams.Current.OperationStepTimeout);
                                                    // 20211020 NG板弹窗报警蜂鸣器响 修改 End
                                                    opResult3.Wait();

                                                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                                    ExportShanWeiWatchBoardBYDShopfloorManager.Current.UpdateAlarm(1, Lang.UI.UI_Label_NGPCB, DateTime.Now);
                                                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End

                                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) AlarmByAOIResult SetRedAndBuzzer Alarmed");
                                                }
                                                // 20210308 以机台检测结果报警 追加 End 
                                            }
                                            //else
                                            //{
                                            int repairFlag = -1;

                                            // 20200813 立讯MarkError报警 追加 Start
                                            int markErrorFlag = -1;
                                            string markErrorInfo = "";

                                            int unreadableBarcodeFlag = -1;
                                            string unreadableBarcodeInfo = "";
                                            // 20200813 立讯MarkError报警 追加 End
                                            // 20210403 东莞立讯 追加 Start
                                            string pcbMacCheckRetInfo = "";
                                            // 20210403 东莞立讯 追加 End

                                            // 20240615 太原富士康上传结果需要传到AOI 【王晨】 追加 Start
                                            string message = "";
                                            // 20240615 太原富士康上传结果需要传到AOI 【王晨】 追加 End

                                            Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) CentralControlFileMode.IsEnabled = " + Customization.Current.CentralControlFileMode.IsEnabled);
                                            // 20200826 异物检测 喷码机追加 Start 
                                            Holly.Log.HlLogger.Write("HOLLY PRITNT =====> Customization.Current.CentralControlFileMode.IsEnabled  step2 = " + Customization.Current.CentralControlFileMode.IsEnabled);
                                            // 20200826 异物检测 喷码机追加 End
                                            if (Customization.Current.CentralControlFileMode.IsEnabled)
                                            {
                                                //// 20200826 异物检测 喷码机追加 Start 
                                                //Holly.Log.HlLogger.Write("HOLLY PRITNT =====> wait CentralControlFile start");
                                                //HeartBeatUtils heartBeat2 = new HeartBeatUtils(2);
                                                //// 20200826 异物检测 喷码机追加 End

                                                // 机内判定
                                                //生成文件模式
                                                string lastPath = "";
                                                bool hasFile = false;

                                                HeartBeatUtils heartBeat2 = new HeartBeatUtils(5);

                                                // 20200925 机内等待超时 追加 Start
                                                WaitTimeoutUtils timeoutUtils = new WaitTimeoutUtils(Customization.Current.CentralControlFileMode.WaitResultFileSeconds);
                                                // 20200925 机内等待超时 追加 End

                                                // 20210913 NVT检测结果生成信号及空文件丢失问题对应 追加 Start
                                                Stopwatch hasFileTimeoutStopwatch = Stopwatch.StartNew();
                                                TimeSpan hasFileTimeout = new TimeSpan(0, 0, Customization.Current.InMachineOKNGWaitFileTimeout);
                                                bool isGetFileTimeOut = false;
                                                int repairResult = -1;
                                                // 20210913 NVT检测结果生成信号及空文件丢失问题对应 追加 End

                                                while (!hasFile)
                                                {
                                                    if (heartBeat2.IsOutput())
                                                    {
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) Wait Repair result File......");
                                                    }

                                                    //// 20200826 异物检测 喷码机追加 Start 
                                                    //if (heartBeat2.IsOutput())
                                                    //{
                                                    //    Holly.Log.HlLogger.Write("HOLLY PRITNT =====> wait CentralControlFile 2s......");
                                                    //}
                                                    //// 20200826 异物检测 喷码机追加 End

                                                    if (context.StopFlag)
                                                        return ExitState.Current;

                                                    // 20200410 昆山立讯Mes 修正 Start
                                                    //lastPath = GlobalDataManager.Current.GetFileName(Customization.Current.CentralControlFileMode.FileDirectory, reportManager.InspectionID);

                                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState)  AutoRunSettings2.Default.IsDoubleSideAOI=" + AutoRunSettings2.Default.IsDoubleSideAOI);
                                                    if (Customization.Current.LuxshareShopfloor_KS.IsEnabled)
                                                    {
                                                        // 20210319 昆山立臻电子 修正 Start
                                                        //string ret = ExportLuxshareShopfloor_KSManager.Current.ExportGetContentMain();

                                                        string ret = "";
                                                        if (Customization.Current.LuxshareShopfloor_KS.IsLiZhen)
                                                        {
                                                            ret = ExportLuxshareShopfloor_KSManager.Current.ExportGetContentMain2();
                                                        }
                                                        // 20210403 东莞立讯 追加 Start
                                                        else if (Customization.Current.LuxshareShopfloor_KS.IsDongGuan)
                                                        {
                                                            ret = ExportLuxshareShopfloor_KSManager.Current.ExportGetContentMainForDongGuan();
                                                        }
                                                        // 20210403 东莞立讯 追加 End
                                                        else
                                                        {
                                                            ret = ExportLuxshareShopfloor_KSManager.Current.ExportGetContentMain();
                                                        }
                                                        // 20210319 昆山立臻电子 修正 End
                                                        lastPath = FileUtils.GetFileName(AutoRunSettings.Default.CentralControlFileDirectory, "_" + AutoRunSettings2.Default.Side + ".txt");
                                                    }
                                                    // 20221201 贝思特MES 追加 Start
                                                    //20241129 贝思特增加维修站过站选项【曹志鹏】修改 Start
                                                    //else if ((Customization.Current.BeiSiTeShopfloor.IsEnabled && AutoRunSettings.Default.IsEnableMES))
                                                    else if ((Customization.Current.BeiSiTeShopfloor.IsEnabled && !Customization.Current.BeiSiTeShopfloor.IsRepairCommit && AutoRunSettings.Default.IsEnableMES))
                                                    //20241129 贝思特增加维修站过站选项【曹志鹏】修改 End
                                                    {
                                                        string ret = ExportBeiSiTeShopfloorManger.Current.ExportGetContentMain();
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState)  ExportBeiSiTeShopfloorManger ret=" + ret);
                                                        lastPath = FileUtils.GetFileName(AutoRunSettings.Default.CentralControlFileDirectory, "_" + AutoRunSettings2.Default.Side + ".txt");
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState)  ExportBeiSiTeShopfloorManger lastPath=" + lastPath);
                                                    }
                                                    // 20221201 贝思特MES 追加 End
                                                    // 20230620 昆山立讯Mes DEMO机【王小雪】 追加 Start
                                                    else if (Customization.Current.LuxshareShopfloor_KS2.IsEnabled)
                                                    {
                                                        string ret = ExportLuxshareShopfloor_KS2Manager.Current.ExportGetContentMain();
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) LuxshareShopfloor_KS2 ret=" + ret);
                                                        lastPath = FileUtils.GetFileName(AutoRunSettings.Default.CentralControlFileDirectory, "_" + AutoRunSettings2.Default.Side + ".txt");
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) LuxshareShopfloor_KS2 lastPath=" + lastPath);
                                                    }
                                                    // 20230620 昆山立讯Mes DEMO机【王小雪】 追加 End
                                                    // 20210126 双面机机内合并发结果 追加 Start
                                                    else if (AutoRunSettings2.Default.IsDoubleSideAOI)
                                                    {
                                                        string ret = ExportDoubleSideOKNGShopfloorManger.Current.ExportGetContentMain();
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState)  ret=" + ret);
                                                        lastPath = FileUtils.GetFileName(AutoRunSettings.Default.CentralControlFileDirectory, "_" + AutoRunSettings2.Default.Side + ".txt");
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState)  lastPath=" + lastPath);
                                                    }
                                                    // 20210126 双面机机内合并发结果 追加 End
                                                    // 20201013 异物检测控制测试 追加 Start
                                                    else if (Customization.Current.SpotShopfloor.IsTestEnabled)
                                                    {
                                                        lastPath = GlobalDataManager.Current.GetFileName(AutoRunSettings.Default.CentralControlFileDirectory, "");
                                                    }
                                                    // 20201013 异物检测控制测试 追加 End
                                                    else
                                                    {
                                                        //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 Start
                                                        //lastPath = GlobalDataManager.Current.GetFileName(Customization.Current.CentralControlFileMode.FileDirectory, reportManager.InspectionID);
                                                        lastPath = GlobalDataManager.Current.GetFileName(AutoRunSettings.Default.CentralControlFileDirectory, reportManager.InspectionID(checkRailID));
                                                        //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 End
                                                    }
                                                    // 20200410 昆山立讯Mes 修正 End

                                                    // 20200826 异物检测 喷码机追加 End
                                                    Holly.Log.HlLogger.Write("HOLLY PRITNT =====> lastPath = " + lastPath);
                                                    // 20200826 异物检测 喷码机追加 End

                                                    if (lastPath != "")
                                                    {
                                                        hasFile = true;
                                                    }
                                                    // 20200925 机内等待超时 追加 Start
                                                    else if (timeoutUtils.IsTimeOut())
                                                    {
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) Wait Repair result File Timeout. time = " + Customization.Current.CentralControlFileMode.WaitResultFileSeconds);
                                                        break;
                                                    }
                                                    // 20200925 机内等待超时 追加 End
                                                    System.Threading.Thread.Sleep(100);

                                                    // 20210913 NVT检测结果生成信号及空文件丢失问题对应 追加 Start
                                                    if (!hasFile)
                                                    {
                                                        if (hasFileTimeoutStopwatch.Elapsed >= hasFileTimeout)
                                                        {
                                                            //去正式库找（用SQL）
                                                            repairResult = ProcessDataControl.Current.GetRepairFlag("1");
                                                            if (repairResult != -1)
                                                            {
                                                                repairFlag = repairResult;
                                                                hasFile = true;
                                                                isGetFileTimeOut = true;
                                                                // 20240615 太原富士康上传结果需要传到AOI 【王晨】 追加 Start
                                                                if (ExportFoxconnShopfloor_TYMergeManager.Current.IsManualMode)
                                                                {
                                                                    isGetFileTimeOut = false;
                                                                    DateTime dateTimeRre = DateTime.Now;
                                                                    while (string.IsNullOrEmpty(lastPath))
                                                                    {
                                                                        TimeSpan ts = DateTime.Now - dateTimeRre;
                                                                        if (ts.TotalSeconds > 5)
                                                                        {
                                                                            Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.Visit(GoState) timeout 5");
                                                                            break;
                                                                        }
                                                                        //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 Start
                                                                        //lastPath = GlobalDataManager.Current.GetFileName(Customization.Current.CentralControlFileMode.FileDirectory, "_" + reportManager.InspectionID + "_1.txt");
                                                                        lastPath = GlobalDataManager.Current.GetFileName(AutoRunSettings.Default.CentralControlFileDirectory, "_" + reportManager.InspectionID(checkRailID) + "_1.txt");
                                                                        //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 End
                                                                        System.Threading.Thread.Sleep(100);
                                                                    }
                                                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) lastPath = " + lastPath);
                                                                }
                                                                // 20240615 太原富士康上传结果需要传到AOI 【王晨】 追加 End

                                                            }
                                                        }
                                                    }
                                                    if (hasFile)
                                                    {
                                                        hasFileTimeoutStopwatch.Stop();
                                                    }
                                                    // 20210913 NVT检测结果生成信号及空文件丢失问题对应 追加 End
                                                }

                                                // 20200925 机内等待超时 追加 Start
                                                if (timeoutUtils.GetIsTimeOutRet())
                                                {
                                                    // 20201010 不报警直接清空重测 删除 Start
                                                    //WaitVerify(m, "Wait Repair result File Timeout");
                                                    // 20201010 不报警直接清空重测 删除 End

                                                    // 20211122 机内等待超时NG出板 修改 Start
                                                    //return DesyncState.Current;

                                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) IsWaitResultFileTimeoutBoardOutNG = " + Customization.Current.CentralControlFileMode.IsWaitResultFileTimeoutBoardOutNG);
                                                    if (Customization.Current.CentralControlFileMode.IsWaitResultFileTimeoutBoardOutNG)
                                                    {
                                                        hasFile = true;
                                                        isGetFileTimeOut = true;
                                                        repairFlag = 1;
                                                    }
                                                    else
                                                    {
                                                        // 20230209 E05区分 追加 Start   
                                                        GlobalDataManager.Current.EquipmentErrorCode = "E51";//机内等待超时
                                                        Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                                        // 20230209 E05区分 追加 End 
                                                        //机内判定等待文件超时清板重测
                                                        //20230706  查找E05 【徐明武】 修改 Start
                                                        //return DesyncState.Current;
                                                        {
                                                            Holly.Log.HlLogger.Write("E05 => 86 ");
                                                            return DesyncState.Current;
                                                        }
                                                        //20230706  查找E05 【徐明武】 修改 End 
                                                    }
                                                    // 20211122 机内等待超时NG出板 修改 End
                                                }
                                                // 20200925 机内等待超时 追加 End

                                                Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) have Repair result. lastPath = " + lastPath);

                                                // 20200826 异物检测 喷码机追加 Start
                                                Holly.Log.HlLogger.Write("HOLLY PRITNT =====> wait CentralControlFile End");
                                                Holly.Log.HlLogger.Write("HOLLY PRITNT =====> MachineParams.Current.IsInlineMode = " + MachineParams.Current.IsInlineMode + " ,  this.IsRequestOne= " + this.IsRequestOne + ",MachineParams.Current.InkjetPrinter.IsEnabled=" + MachineParams.Current.InkjetPrinter.IsEnabled + ",Customization.Current.SpotShopfloor.IsEnabled=" + Customization.Current.SpotShopfloor.IsEnabled);
                                                Holly.Log.HlLogger.Write("HOLLY PRITNT =====> MachineParams.Current.InkjetPrinter.Offset X = " + MachineParams.Current.InkjetPrinter.Offset.X.ToString() + " Offset.Y = " + MachineParams.Current.InkjetPrinter.Offset.Y.ToString());
                                                Holly.Log.HlLogger.Write("HOLLY PRITNT =====> MachineParams.Current.OriginPosition X = " + MachineParams.Current.OriginPosition.X.ToString() + " OriginPosition.Y = " + MachineParams.Current.OriginPosition.Y.ToString());
                                                if (MachineParams.Current.IsInlineMode && !this.IsRequestOne && MachineParams.Current.InkjetPrinter.IsEnabled && Customization.Current.SpotShopfloor.IsEnabled)
                                                {
                                                    List<Length2> positionList = new List<Length2>();
                                                    // 20210329 双轨机喷墨 修改 Start
                                                    //positionList = ExportSpotShopfloorManager.Current.Export();
                                                    //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 Start
                                                    //positionList = ExportSpotShopfloorManager.Current.Export(reportManager.InspectionID);
                                                    positionList = ExportSpotShopfloorManager.Current.Export(reportManager.InspectionID(checkRailID));
                                                    //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 End
                                                    // 20210329 双轨机喷墨 修改 End
                                                    // 20201010 异物检测 追加 Start
                                                    Length2[] ps = new Length2[positionList.Count];
                                                    int i = 0;
                                                    foreach (Length2 p in positionList)
                                                    {
                                                        //var calibration = InspectionManager.GetCoordinateCalibration(p.ToPixels());
                                                        ps[i] = p + MachineParams.Current.InkjetPrinter.Offset + MachineParams.Current.OriginPosition;
                                                        i++;
                                                    }

                                                    PointComparer fc = new PointComparer();
                                                    Array.Sort(ps, fc);
                                                    // 20201010 异物检测 追加 End


                                                    // 20201010 异物检测 修改 Start
                                                    //if (positionList.Count > 0)

                                                    if (ps.Length > 0)
                                                    // 20201010 异物检测 修改 End
                                                    {
                                                        // 20201010 异物检测 修改 Start
                                                        //foreach (var p in positionList)

                                                        // 20230315 喷码异常对应【纪明】 追加 Start
                                                        int ii = 0;
                                                        // 20230315 喷码异常对应【纪明】 追加 End

                                                        foreach (var p in ps)
                                                        // 20201010 异物检测 修改 End
                                                        {
                                                            Holly.Log.HlLogger.Write("HOLLY PRITNT =====> point.X = " + p.X + " ,  point.Y = " + p.Y);

                                                            IBatchOperationInline printOp = m.CreateBatchOperationInline();
                                                            printOp.ReadySignal(false);
                                                            var printResult = printOp.Execute(MachineParams.Current.OperationStepTimeout);
                                                            printResult.Wait();

                                                            Holly.Log.HlLogger.Write("HOLLY PRITNT =====> printOp.ReadySignal(false)");

                                                            var goOp = m.CreateBatchOperation();
                                                            var pos0 = p.ToPlugs();

                                                            goOp.LocateCamera(pos0);
                                                            var goResult = goOp.Execute(MachineParams.Current.OperationStepTimeout);
                                                            goResult.Wait();

                                                            // 20201013 异物检测控制测试 追加 Start
                                                            // todo当前位置相机等待
                                                            if (Customization.Current.SpotShopfloor.IsTestEnabled)
                                                            {
                                                                Holly.Log.HlLogger.Write("HOLLY PRITNT =====> wait heartBeat3 LocateCamera start");
                                                                HeartBeatUtils heartBeat3 = new HeartBeatUtils(2);

                                                                bool hasFile1 = false;
                                                                while (!hasFile1)
                                                                {
                                                                    if (heartBeat3.IsOutput())
                                                                    {
                                                                        Holly.Log.HlLogger.Write("HOLLY PRITNT =====> wait heartBeat3 2s......");
                                                                    }

                                                                    if (context.StopFlag)
                                                                        return ExitState.Current;
                                                                    System.Threading.Thread.Sleep(300);
                                                                }
                                                            }
                                                            // 20201013 异物检测控制测试 追加 End
                                                            Holly.Log.HlLogger.Write("HOLLY PRITNT =====> LocateCamera");
                                                            printOp = m.CreateBatchOperationInline();
                                                            printOp.ReadySignal(true);
                                                            printResult = printOp.Execute(MachineParams.Current.OperationStepTimeout);
                                                            printResult.Wait();

                                                            Holly.Log.HlLogger.Write("HOLLY PRITNT =====> printOp.ReadySignal(true)");

                                                            // 20230315 喷码异常对应【纪明】 追加 Start
                                                            // 第二片不喷码
                                                            ii = ii + 1;

                                                            Holly.Log.HlLogger.Write("HOLLY PRITNT =====> printOp ii = " + ii);

                                                            if (ii == ps.Length)
                                                            {
                                                                printOp = m.CreateBatchOperationInline();
                                                                printOp.ReadySignal(false);
                                                                printResult = printOp.Execute(MachineParams.Current.OperationStepTimeout);
                                                                printResult.Wait();

                                                                Holly.Log.HlLogger.Write("HOLLY PRITNT =====> printOp.ReadySignal(false) last One");
                                                            }
                                                            // 20230315 喷码异常对应【纪明】 追加 End

                                                        }
                                                        var origin = context.GetOriginPosition();
                                                        var goOp1 = m.CreateBatchOperation();
                                                        var pos1 = origin.ToPlugs();
                                                        goOp1.LocateCamera(pos1);
                                                        var goResult1 = goOp1.Execute(MachineParams.Current.OperationStepTimeout);
                                                        goResult1.Wait();
                                                    }
                                                }
                                                // 20200826 异物检测 喷码机追加 Start

                                                // 20210913 NVT检测结果生成信号及空文件丢失问题对应 追加 Start
                                                if (!isGetFileTimeOut)
                                                {
                                                    // 20210913 NVT检测结果生成信号及空文件丢失问题对应 追加 End
                                                    // 20200619 福莱盈MES 追加 Start
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) IsFLY = " + Customization.Current.IsFLY);
                                                    if (Customization.Current.IsFLY)
                                                    {
                                                        try
                                                        {
                                                            StreamReader sr = new StreamReader(lastPath);
                                                            string txt = sr.ReadLine();
                                                            sr.Close();

                                                            Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) FLY result = " + txt);

                                                            string[] txtSplit = txt.Split(':');
                                                            if (txtSplit[0].Contains("Pass"))
                                                                repairFlag = 0;
                                                            else
                                                            {
                                                                // 20200914 福莱盈二次修改 修改 Start
                                                                //repairFlag = 1;

                                                                repairFlag = 0;     //解除报警后正常出板
                                                                                    // 20200914 福莱盈二次修改 修改 End

                                                                IBatchOperationInline op5 = m.CreateBatchOperationInline();
                                                                IOperationResult opResult5 = null;

                                                                op5.SetRedAndBuzzer();

                                                                opResult5 = op5.Execute(MachineParams.Current.OperationStepTimeout);
                                                                opResult5.Wait();

                                                                // 20200725 直接显示异常信息 删除 Start
                                                                //string[] errorInfo = txtSplit[1].Split('+');
                                                                // 20200725 直接显示异常信息 删除 End  

                                                                // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                                                ExportShanWeiWatchBoardBYDShopfloorManager.Current.WriteAlarm(1, txt, DateTime.Now);
                                                                // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End

                                                                UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                                                    new Action(
                                                                        delegate ()
                                                                        {
                                                                            //20230717 log输出【ygs】 Start 
                                                                            ExportLogOuputManager.Current.OuputLog(11, txt);
                                                                            //20230717 log输出【ygs】 End
                                                                            IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                                                            // 20200725 直接显示异常信息 修改 Start
                                                                            //messageManager.ShowError(errorInfo[1]);

                                                                            messageManager.ShowError(txt);
                                                                            // 20200725 直接显示异常信息 修改 End
                                                                        }));

                                                                IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                                                IOperationResult opResult2 = null;

                                                                op2.SetBuzzer(false);
                                                                opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                                                opResult2.Wait();
                                                                // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                                                ExportShanWeiWatchBoardBYDShopfloorManager.Current.UpdateAlarm(3, txt, DateTime.Now);
                                                                // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End
                                                            }

                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            repairFlag = 1;
                                                        }
                                                    }
                                                    // 20200813 立讯MarkError报警 追加 Start
                                                    else if (Customization.Current.LuxshareShopfloor_KS.IsEnabled)
                                                    {
                                                        try
                                                        {
                                                            StreamReader sr = new StreamReader(lastPath);
                                                            // 结果
                                                            string txt = sr.ReadLine();
                                                            Holly.Log.HlLogger.Write("HOLLY AOI == > ImageAcquisitionMachine CentralControlFile result = " + txt);
                                                            repairFlag = Convert.ToInt32(txt);
                                                            // 轨道信息
                                                            string rail = sr.ReadLine();
                                                            Holly.Log.HlLogger.Write("HOLLY AOI == > ImageAcquisitionMachine CentralControlFile rail = " + rail);
                                                            // 面别
                                                            string side = sr.ReadLine();
                                                            Holly.Log.HlLogger.Write("HOLLY AOI == > ImageAcquisitionMachine CentralControlFile side = " + side);
                                                            // 20220617 出板信号不合并过站结果 追加 Start
                                                            // 20230105 立臻过站结果发OKNG双面信号合并 追加 Start
                                                            // 原来的文件重命名方法 改为直接修改OKNG信号
                                                            //if (!Customization.Current.LuxshareShopfloor_KS.IsBoardOutUseRepairRet)
                                                            // 20230105 立臻过站结果发OKNG双面信号合并 追加 End
                                                            {
                                                                // 20220617 出板信号不合并过站结果 追加 End
                                                                // ID1
                                                                string id1 = sr.ReadLine();
                                                                Holly.Log.HlLogger.Write("HOLLY AOI == > ImageAcquisitionMachine CentralControlFile id1 = " + id1);
                                                                // ID2
                                                                string id2 = sr.ReadLine();
                                                                Holly.Log.HlLogger.Write("HOLLY AOI == > ImageAcquisitionMachine CentralControlFile id2 = " + id2);
                                                            }
                                                            // MarkError
                                                            string markError = sr.ReadLine();
                                                            Holly.Log.HlLogger.Write("HOLLY AOI == > ImageAcquisitionMachine CentralControlFile markError = " + markError);
                                                            string[] markErrorArr = HandleExtInfo(markError);
                                                            markErrorFlag = Convert.ToInt32(markErrorArr[0]);
                                                            markErrorInfo = markErrorArr[1];

                                                            // 条码未读到
                                                            string unreadableBarcode = sr.ReadLine();
                                                            Holly.Log.HlLogger.Write("HOLLY AOI == > ImageAcquisitionMachine CentralControlFile unreadableBarcode = " + unreadableBarcode);
                                                            string[] unreadableBarcodeArr = HandleExtInfo(unreadableBarcode);
                                                            unreadableBarcodeFlag = Convert.ToInt32(unreadableBarcodeArr[0]);
                                                            unreadableBarcodeInfo = unreadableBarcodeArr[1];

                                                            // 20210403 东莞立讯 追加 Start
                                                            // 包装机过站
                                                            // 20220617 出板信号不合并过站结果 追加 Start
                                                            // 20230105 立臻过站结果发OKNG双面信号合并 追加 Start
                                                            // 原来的文件重命名方法 改为直接修改OKNG信号
                                                            //if (!Customization.Current.LuxshareShopfloor_KS.IsBoardOutUseRepairRet)
                                                            // 20230105 立臻过站结果发OKNG双面信号合并 追加 End
                                                            {
                                                                // 20220617 出板信号不合并过站结果 追加 End
                                                                pcbMacCheckRetInfo = sr.ReadLine();
                                                            }
                                                            // 20210403 东莞立讯 追加 End
                                                            Holly.Log.HlLogger.Write("HOLLY AOI == > ImageAcquisitionMachine CentralControlFile MarkErrorFlag = " + markErrorFlag);
                                                            Holly.Log.HlLogger.Write("HOLLY AOI == > ImageAcquisitionMachine CentralControlFile unreadableBarcodeFlag = " + unreadableBarcodeFlag);

                                                            // 重置
                                                            if (markErrorFlag == 1 || unreadableBarcodeFlag == 1)
                                                            {
                                                                repairFlag = 1;
                                                            }
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            Holly.Log.HlLogger.Write("HOLLY AOI == > ImageAcquisitionMachine CentralControlFile Exception = " + ex);
                                                            // 借用输出 Exception
                                                            pcbMacCheckRetInfo = ex.ToString();
                                                            repairFlag = 1;
                                                        }
                                                    }
                                                    // 20200813 立讯MarkError报警 追加 End
                                                    // 20220906 南京西门子 追加 Start
                                                    else if (Customization.Current.NanJingSiemensShopfloor.IsEnabled)
                                                    {
                                                        try
                                                        {
                                                            Holly.Log.HlLogger.Write("HOLLY AOI ============> Customization.Current.NanJingSiemensShopfloor.IsEnabled = " + Customization.Current.NanJingSiemensShopfloor.IsEnabled);
                                                            StreamReader sr = new StreamReader(lastPath);
                                                            string txt = sr.ReadLine();
                                                            sr.Close();
                                                            repairFlag = Convert.ToInt32(txt);
                                                            string Result = txt == "0" ? "OK" : "NG";
                                                            Shopfloor.ExportNanJingSiemensShopfloorManager.Current.RFIDWriteOKNG(Result);
                                                            Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine NanJingSiemensShopfloor get Repair result ,Send Result to RFID Tag,result=" + Result + ",repairResult=" + txt);
                                                            // 20230209 WINCC通讯 追加 Start
                                                            string info = txt == "0" ? "1" : "2";
                                                            ExportNanJingSiemensShopfloorManager.Current.TestResult(info);
                                                            // 20230209 WINCC通讯 追加 End


                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            Holly.Log.HlLogger.Write("HOLLY AOI == > ImageAcquisitionMachine NanJingSiemensShopfloor Exception = " + ex);
                                                            repairFlag = 1;
                                                        }
                                                    }
                                                    // 20220906 南京西门子 追加 End
                                                    // 20240615 太原富士康上传结果需要传到AOI 【王晨】 追加 Start
                                                    else if (ExportFoxconnShopfloor_TYMergeManager.Current.IsManualMode)
                                                    {
                                                        try
                                                        {
                                                            StreamReader sr = new StreamReader(lastPath);
                                                            // 结果
                                                            string txt = sr.ReadLine();
                                                            Holly.Log.HlLogger.Write("HOLLY AOI == > ImageAcquisitionMachine CentralControlFile result = " + txt);
                                                            //repairFlag = Convert.ToInt32(txt);
                                                            //后机没有NG信号，强制发OK
                                                            repairFlag = 0;
                                                            // 轨道信息
                                                            string rail = sr.ReadLine();
                                                            Holly.Log.HlLogger.Write("HOLLY AOI == > ImageAcquisitionMachine CentralControlFile rail = " + rail);
                                                            // 面别
                                                            string side = sr.ReadLine();
                                                            Holly.Log.HlLogger.Write("HOLLY AOI == > ImageAcquisitionMachine CentralControlFile side = " + side);
                                                            //接口上传报警信息
                                                            message = sr.ReadLine();
                                                            sr.Close();
                                                            if (message.Equals(txt) || message.Equals(rail) || message.Equals(side))
                                                            {
                                                                message = "维修站合并接口未开启，请检查半自动模式的相关配置";
                                                            }
                                                            Holly.Log.HlLogger.Write("HOLLY AOI == > ImageAcquisitionMachine CentralControlFile message = " + message);
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            repairFlag = 0;
                                                            message = "";
                                                            Holly.Log.HlLogger.Write("HOLLY AOI == > ImageAcquisitionMachine CentralControlFile ex = " + ex);
                                                        }
                                                    }
                                                    // 20240615 太原富士康上传结果需要传到AOI 【王晨】 追加 End
                                                    else
                                                    {
                                                        // 20200619 福莱盈MES 追加 End
                                                        try
                                                        {
                                                            StreamReader sr = new StreamReader(lastPath);
                                                            string txt = sr.ReadLine();
                                                            sr.Close();
                                                            repairFlag = Convert.ToInt32(txt);

                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            repairFlag = 1;
                                                        }
                                                        // 20200619 福莱盈MES 追加 Start


                                                    }
                                                    // 20200619 福莱盈MES 追加 End
                                                    try
                                                    {
                                                        File.Delete(lastPath);
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) Delete File Exception= " + ex);
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> Delete File Error");
                                                    }
                                                    // 20210913 NVT检测结果生成信号及空文件丢失问题对应 追加 Start
                                                }
                                                else
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI == > ImageAcquisitionMachine CentralControlFile isGetFileTimeOut = " + isGetFileTimeOut + ", repairFlag = " + repairFlag);
                                                }
                                                // 20210913 NVT检测结果生成信号及空文件丢失问题对应 追加 End
                                            }
                                            else
                                            {
                                                //RepairTempDB.RepairTempDBEntities ctx = RepairDBAccess.Current.GetRepairTempDBEntities();
                                                //var rc = (from r in ctx.RepairCentralControls where r.Station == LC.SN.ToUpper() && r.RailID == 1 select r).ToList();
                                                ////RepairTempDB.RepairCentralControl rc = (from r in ctx.RepairCentralControls where r.Station == LC.SN.ToUpper() && r.RailID == 1 select r).Take(1).SingleOrDefault();
                                                ////RepairTempDB.RepairCentralControl rc = ctx.GetObjectByKey(new System.Data.EntityKey("RepairTempDBEntities.RepairCentralControls", "Station", LC.SN.ToUpper())) as RepairTempDB.RepairCentralControl;
                                                ////repairFlag = rc.StopFlag;
                                                //while (rc.Count == 0)
                                                //{
                                                //    if (context.StopFlag)
                                                //        return ExitState.Current;

                                                //    System.Threading.Thread.Sleep(50);
                                                //    rc = (from r in ctx.RepairCentralControls where r.Station == LC.SN.ToUpper() && r.RailID == 1 select r).ToList();
                                                //    //rc = ctx.GetObjectByKey(new System.Data.EntityKey("RepairTempDBEntities.RepairCentralControls", "Station", LC.SN.ToUpper())) as RepairTempDB.RepairCentralControl;
                                                //    //repairFlag = rc.StopFlag;
                                                //}
                                                //RepairTempDB.RepairCentralControl repairCentralControl = rc.Last();
                                                //repairFlag = repairCentralControl.StopFlag;

                                                //ctx.DeleteObject(repairCentralControl);
                                                ////rc.StopFlag = -1;
                                                //ctx.SaveChanges();

                                                // 20240223 数据库模式 【Ygs】 追加 Start
                                                string station = LC.SN.ToLower();
                                                RepairTempDB.RepairTempDBEntities ctx = RepairDBAccess.Current.GetRepairTempDBEntities();
                                                // 20240723 检测结果慢造成的取不到inspection的GUID 【刘亚杰】 修改 Start
                                                ////20240709 1，2轨数据缓存分开存放【曹志鹏】修改 Start
                                                ////Guid id = Guid.Parse(reportManager.InspectionID);//ProcessDataNotWaitControl.Current.GetInspectionIDForBoardOut(1, true);
                                                //Guid id = Guid.Parse(reportManager.InspectionID(1));//ProcessDataNotWaitControl.Current.GetInspectionIDForBoardOut(1, true);
                                                ////20240709 1，2轨数据缓存分开存放【曹志鹏】修改 End

                                                string guid = "";
                                                while (true)
                                                {
                                                    guid = reportManager.InspectionID(checkRailID);
                                                    Holly.Log.HlLogger.Write("HOLLY AOI RepairCentralControl ============>ImageAcquisitionMachine.Visit(GoState) guid:" + guid + "  waitting ... ");
                                                    if (!string.IsNullOrEmpty(guid))
                                                        break;

                                                    Thread.Sleep(100);

                                                    if (!GlobalDataManager.Current.IsAutoRun)
                                                        break;
                                                }
                                                // 20240723 检测结果慢造成的取不到inspection的GUID 【刘亚杰】 修改 End
                                                Holly.Log.HlLogger.Write("HOLLY AOI RepairCentralControl ============>ImageAcquisitionMachine.Visit(GoState) RepairCentralControl count = " + ctx.RepairCentralControls.Count() + "staion=" + station + "InspectionID=" + guid);
                                                if (!string.IsNullOrEmpty(guid))
                                                {
                                                    Guid id = Guid.Parse(guid);
                                                    while (true)
                                                    {
                                                        var rc = (from r in ctx.RepairCentralControls where ((r.Station.ToLower() == station) && (r.RailID == 1) && (r.ID == id)) select r).ToList();
                                                        Holly.Log.HlLogger.Write("HOLLY AOI RepairCentralControl ============>ImageAcquisitionMachine.Visit(GoState) RepairCentralControl rc= " + rc.Count());

                                                        if (rc.Count != 0)
                                                        {
                                                            var repairCentralControl = rc.FirstOrDefault();
                                                            repairFlag = repairCentralControl == null ? -1 : repairCentralControl.StopFlag;
                                                        }
                                                        if (repairFlag != -1)
                                                            break;
                                                        Thread.Sleep(150);
                                                    }

                                                    Holly.Log.HlLogger.Write("HOLLY AOI RepairCentralControl ============>ImageAcquisitionMachine.Visit(GoState) repairFlag = " + repairFlag + " , rail = " + 1);
                                                }

                                                ExportCommonShopfloorManager.Current.DeleteOldRepairCentralControlRecord();
                                                // 20240223 数据库模式 【Ygs】 追加 End

                                            }

                                            if (Customization.Current.HaiKangAnalysis.IsEnabled)
                                            {
                                                //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 Start
                                                //reportManager.UpdateTopDefects("");
                                                reportManager.UpdateTopDefects("", 1);
                                                //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 End
                                                if (App.Current.TryFindResource("CompDefectList") != null)
                                                {
                                                    op = m.CreateBatchOperationInline();
                                                    opResult = null;
                                                    op.ClearLampBlink();
                                                    op.SetRedAndBuzzer();
                                                    opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                                    opResult.Wait();

                                                    UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                                       new Action(
                                                           delegate ()
                                                           {
                                                               ProblemInputDialog dialog = new ProblemInputDialog();
                                                               dialog.Show();
                                                           }));

                                                    GlobalDataManager.Current.StartDateTime = DateTime.Now;

                                                    IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                                    IOperationResult opResult2 = null;

                                                    op2.SetBuzzer(false);
                                                    opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                                    opResult2.Wait();

                                                    //if(Customization.Current.)

                                                    Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> Customization.Current.HaiKangAnalysis");
                                                    context._isNeedResetForce = false;
                                                    // 20230209 E05区分 追加 Start   
                                                    GlobalDataManager.Current.EquipmentErrorCode = "E50";//HaiKangAnalysis相关报警
                                                    Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                                    // 20230209 E05区分 追加 End 
                                                    //20230706  查找E05 【徐明武】 修改 Start
                                                    //return DesyncState.Current;
                                                    {
                                                        Holly.Log.HlLogger.Write("E05 => 87 ");
                                                        return DesyncState.Current;
                                                    }
                                                    //20230706  查找E05 【徐明武】 修改 End 
                                                }
                                            }

                                            // 20201010 异物检测 追加 Start
                                            // 喷码完成才能走
                                            //if (Customization.Current.SpotShopfloor.IsEnabled)
                                            //{
                                            //    //出板，先走到出板感应器
                                            //    IBatchOperationInline op1 = m.CreateBatchOperationInline();
                                            //    IOperationResult opResult1 = null;
                                            //    op1.BoardOutHighSpeed();
                                            //    opResult1 = op1.Execute(MachineParams.Current.OperationStepTimeout);
                                            //    progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);
                                            //    //opResult1.Wait();
                                            //    while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOutHighSpeed) == 0 && (m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                            //    {
                                            //        if (context.StopFlag)
                                            //            return ExitState.Current;
                                            //        m.UpdateInline();
                                            //        if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                            //        {
                                            //            return DesyncState.Current;
                                            //        }
                                            //        //context.CheckInlineMachineStatus();
                                            //        Thread.Sleep(50);
                                            //    }

                                            //    Holly.Log.HlLogger.Write("HOLLY AOI ============> BoardOut HighSpeed");
                                            //}
                                            // 20201010 异物检测 追加 End

                                            //op.LocateCamera(GlobalDataManager.Current.ReleaseBoardPosition);

                                            // 20211111 米琦MES 追加 Start
                                            if (Customization.Current.MiQiShopfloor.IsEnabled)
                                            {
                                                string miQiResult = ExportMiQiShopfloorManager.Current.GetAlarmContent();
                                                if (!string.IsNullOrWhiteSpace(miQiResult))
                                                {
                                                    WaitVerify(m, miQiResult);
                                                }
                                            }
                                            // 20211111 米琦MES 追加 End

                                            // 20211101 立景MES 追加 Start
                                            if (Customization.Current.LiJingShopfloor.IsEnabled)
                                            {
                                                string errorMessage = ExportLiJingShopfloorManager.Current.InteractionWithPlcMain();

                                                if (errorMessage != string.Empty)
                                                {
                                                    WaitVerify(m, errorMessage);
                                                    return ExitState.Current;
                                                }
                                            }
                                            // 20211101 立景MES 追加 End

                                            // 20240615 太原富士康上传结果需要传到AOI 【王晨】 追加 Start
                                            if (ExportFoxconnShopfloor_TYMergeManager.Current.IsManualMode && (!ExportFoxconnShopfloor_TYMergeManager.Current.IsPreWeld))
                                            {
                                                if (!string.IsNullOrEmpty(message))
                                                {
                                                    if (!message.Contains("OK"))
                                                    {
                                                        WaitVerify(m, message);
                                                        return ExitState.Current;
                                                    }
                                                }
                                                else
                                                {
                                                    string errormessage = "未读取到维修站结果文件或维修站合并接口未开启，请检查半自动模式的相关配置";
                                                    WaitVerify(m, errormessage);
                                                    return ExitState.Current;
                                                }
                                            }
                                            // 20240615 太原富士康上传结果需要传到AOI 【王晨】 追加 End

                                            // 20220210 飞宏MES 追加 Start
                                            //if (Customization.Current.FeiHongShopfloor.IsEnabled)
                                            //{
                                            //    //string errorMessage = ExportFeiHongShopfloorManager.Current.GetAlarmFile(1); ;

                                            //    //if (!string.IsNullOrEmpty(errorMessage))
                                            //    //{
                                            //    //    WaitVerify(m, errorMessage);
                                            //    //    return ExitState.Current;
                                            //    //}
                                            //}
                                            // 20220210 飞宏MES 追加 End

                                            //op.ClearCommand();
                                            // 20220111 立景机内判定只发OK信号 修改 Start  
                                            //if (repairFlag == 0)

                                            Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) Customization.Current.LiJingShopfloor.IsEnabled = " +
                                                Customization.Current.LiJingShopfloor.IsEnabled);

                                            // 20240425 抚州比亚迪2D设备机内判定出板方式修改【陆志福】追加 Start
                                            // 通知维修站复判完成
                                            SimpleMessageHandler.Send(nameof(CommonMessages.REPAIR_END), m);
                                            // 20240425 抚州比亚迪2D设备机内判定出板方式修改【陆志福】追加 End

                                            if (repairFlag == 0 || Customization.Current.LiJingShopfloor.IsEnabled) //repairFlag  0:OK  1：NG
                                            // 20220111 立景机内判定只发OK信号 修改 End
                                            {
                                                Holly.Log.HlLogger.Write("HOLLY AOI ============> BoardOut");
                                                op.BoardOut();
                                            }
                                            else
                                            {
                                                //闻泰集中管控回传的NG数据报警
                                                // 20210126 双面机机内合并发结果 修改 Start
                                                // 20210308 以机台检测结果报警 恢复 Start 
                                                if (Customization.Current.RepairCentralControlNGBuzzer || Customization.Current.IsKangJie)

                                                //if (Customization.Current.RepairCentralControlNGBuzzer || 
                                                //    Customization.Current.IsKangJie || 
                                                //    (Customization.Current.DoubleSideAOI.IsDoubleSideAOI && Customization.Current.DoubleSideAOI.IsMaster))
                                                // 20210308 以机台检测结果报警 恢复 End
                                                // 20210126 双面机机内合并发结果 修改 End
                                                {
                                                    IBatchOperationInline op5 = m.CreateBatchOperationInline();
                                                    IOperationResult opResult5 = null;

                                                    //if (Customization.Current.IsKangJie)
                                                    //{
                                                    op5.SetRedAndBuzzer();
                                                    //}
                                                    //else
                                                    //{
                                                    //    op5.SetBuzzer(true);
                                                    //}                                                  

                                                    opResult5 = op5.Execute(MachineParams.Current.OperationStepTimeout);
                                                    opResult5.Wait();

                                                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                                    ExportShanWeiWatchBoardBYDShopfloorManager.Current.WriteAlarm(1, Lang.UI.UI_Label_NGPCB, DateTime.Now);
                                                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End

                                                    UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                                        new Action(
                                                            delegate ()
                                                            {
                                                                //20230717 log输出【ygs】 Start 
                                                                ExportLogOuputManager.Current.OuputLog(11, Lang.UI.UI_Label_NGPCB);
                                                                //20230717 log输出【ygs】 End
                                                                IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                                                messageManager.ShowError(Lang.UI.UI_Label_NGPCB);
                                                            }));

                                                    IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                                    IOperationResult opResult2 = null;

                                                    op2.SetBuzzer(false);
                                                    opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                                    opResult2.Wait();

                                                    // 20210126 双面机机内合并发结果 追加 Start
                                                    IBatchOperationInline op3 = m.CreateBatchOperationInline();
                                                    IOperationResult opResult3 = null;

                                                    op3.SetGreenLampOn();
                                                    opResult3 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                                    opResult3.Wait();

                                                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                                    ExportShanWeiWatchBoardBYDShopfloorManager.Current.UpdateAlarm(3, Lang.UI.UI_Label_NGPCB, DateTime.Now);
                                                    // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End

                                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) SetRedAndBuzzer Alarmed");
                                                    // 20210126 双面机机内合并发结果 追加 End
                                                }

                                                // 20200813 立讯MarkError报警 追加 Start
                                                else if (Customization.Current.LuxshareShopfloor_KS.IsEnabled && AutoRunSettings2.Default.IsMaster)
                                                {
                                                    if (markErrorFlag == 1)
                                                    {
                                                        string errorInfo = markErrorInfo + " Side MarkError Error";
                                                        WaitVerify(m, errorInfo);
                                                    }
                                                    else if (unreadableBarcodeFlag == 1)
                                                    {
                                                        string errorInfo = unreadableBarcodeInfo + " Side UnRead Barcode Error";
                                                        WaitVerify(m, errorInfo);
                                                    }
                                                    // 20210403 东莞立讯 追加 Start
                                                    // 包装机检查失败
                                                    else if (!pcbMacCheckRetInfo.Equals(""))
                                                    {
                                                        WaitVerify(m, pcbMacCheckRetInfo);
                                                    }
                                                    // 20210403 东莞立讯 追加 End
                                                }
                                                // 20200813 立讯MarkError报警 追加 End
                                                //if (!Customization.Current.IsKangJie)
                                                //{
                                                Holly.Log.HlLogger.Write("HOLLY AOI ============> BoardOutNG");
                                                op.BoardOutNG();// 1：ng
                                                //}
                                                //else
                                                //{
                                                //    return DesyncState.Current;
                                                //}
                                            }
                                            if (Customization.Current.RepairWaitBuzzer)
                                            {
                                                //op.ClearLampBuzzer();
                                                //op.SetGreenLampOn();

                                                //20230814 共通需亮红灯 【李逸凡】 追加 Start
                                                if (Customization.Current.RepairWaitBuzzerIsRed)
                                                {
                                                    op.SetGreenLampOn();
                                                }
                                                //20230814 共通需亮红灯 【李逸凡】 追加  End

                                                op.SetBuzzer(false);
                                            }

                                            Holly.Log.HlLogger.Write("HOLLY AOI ====> Board Out context.StopFlag = " + context.StopFlag);
                                            op.LocateLoader(GlobalDataManager.Current.LastPosition, GlobalDataManager.Current.ReleaseBoardPosition, false);
                                            opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                            progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);
                                            //opResult.Wait();
                                            /////////////////////////////////////////////////////////m.UpdateInline();
                                            //context.CheckInlineMachineStatus();

                                            if (!Customization.Current.IsKangJie || (Customization.Current.IsKangJie && repairFlag == 0))
                                            {
                                                // 20220830 2022机台出板异常对应 追加 Start
                                                Stopwatch normalBoardOutstopwatch = new Stopwatch();
                                                normalBoardOutstopwatch.Start();
                                                Holly.Log.HlLogger.Write("HOLLY AOI ====> Board Out m.CompleteProcessStatus = " + m.CompleteProcessStatus);
                                                // 20220830 2022机台出板异常对应 追加 End
                                                // 20220830 2022机台出板异常对应 修改 Start
                                                //while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)
                                                Holly.Log.HlLogger.Write("HOLLY AOI ====> Board Out context.StopFlag = " + context.StopFlag);

                                                while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0 || IsHaveBoard(m))
                                                // 20220830 2022机台出板异常对应 修改 End
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ====> Board Out context.StopFlag = " + context.StopFlag);
                                                    if (context.StopFlag)
                                                        return ExitState.Current;
                                                    m.UpdateInline();
                                                    if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                                    {
                                                        //20230706  查找E05 【徐明武】 修改 Start
                                                        //return DesyncState.Current;
                                                        {
                                                            Holly.Log.HlLogger.Write("E05 => 89 ");
                                                            return DesyncState.Current;
                                                        }
                                                        //20230706  查找E05 【徐明武】 修改 End 
                                                    }
                                                    //context.CheckInlineMachineStatus();
                                                    Thread.Sleep(50);

                                                    // 20220830 2022机台出板异常对应 追加 Start
                                                    if (normalBoardOutstopwatch.ElapsedMilliseconds / 1000 > 5)
                                                    {
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ====> Board Out Waiting");
                                                        if (!IsHaveBoard(m))
                                                        {
                                                            Holly.Log.HlLogger.Write("HOLLY AOI ====> Board Out is no board break");
                                                            break;
                                                        }
                                                    }
                                                    // 20220830 2022机台出板异常对应 追加 End
                                                }

                                                // 20220830 2022机台出板异常对应 追加 Start
                                                normalBoardOutstopwatch.Stop();
                                                // 20220830 2022机台出板异常对应 追加 End
                                            }

                                            progressListener.Complete();

                                            //20240520 越南华庄：增加检测一定数量板子后自动重启维修站功能【曹志鹏】追加 Start
                                            ViewModels.RailInfoViewModel.Current.UpdateBoardOutData(1, 2);
                                            //20240520 越南华庄：增加检测一定数量板子后自动重启维修站功能【曹志鹏】追加 End
                                        }

                                        //}

                                    }
                                    // 2.根据AOI结果发OK、NG 发送OK/NG信号到后机
                                    else if (AutoRunSettings.Default.IsSendOKNGToNextMachine)
                                    {

                                        //ReportManager reportManager = App.Current.GetService<ReportManager>();
                                        bool hasReport = false;

                                        // 20200918 华贝现场调试 追加 Start
                                        // 华贝过站结果取得
                                        bool checkRouteResult = false;
                                        // 20220420 东勤MES 修改 Start
                                        //if (Customization.Current.HuaBei2ndShopfloor.IsEnabled)
                                        // 20221128 贝思特MES 修改 Start
                                        //if (Customization.Current.HuaBei2ndShopfloor.IsEnabled || Customization.Current.DongQinShopfloor.IsEnabled)

                                        if (Customization.Current.HuaBei2ndShopfloor.IsEnabled || Customization.Current.DongQinShopfloor.IsEnabled || (Customization.Current.BeiSiTeShopfloor.IsEnabled && AutoRunSettings.Default.IsEnableMES))
                                        // 20220420 东勤MES 修改 End
                                        // 20221128 贝思特MES 修改 Start
                                        {
                                            // 20200921 检查结果取得 修改 Start
                                            //int flagValue = DoubleSideDataControl.Current.CheckRouteResultValue;

                                            int flagValue = 0;
                                            flagValue = GetCheckRouteResult();
                                            // 20200921 检查结果取得 修改 End
                                            Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState)  ExportHuaBeiShopfloorManger CheckResult flagValue = " + flagValue);
                                            if (flagValue % 40 == 1)
                                            {
                                                checkRouteResult = true;
                                            }
                                            else
                                            {
                                                // 过站失败，检测结果不生成
                                                hasReport = true;
                                            }
                                        }
                                        // 20200918 华贝现场调试 追加 End

                                        // 20210707 奥海检测崩掉对应 追加 Start
                                        bool isTimeout = false;
                                        Stopwatch timeoutStopwatch = Stopwatch.StartNew();
                                        // 20211210 紫光现场调试检测结果超时 追加 Start
                                        //TimeSpan timeout = new TimeSpan(0, 0, 10);

                                        TimeSpan timeout = new TimeSpan(0, 0, Customization.Current.WaitInspectionResultTimeout);
                                        // 20211210 紫光现场调试检测结果超时 追加 End
                                        // 20210707 奥海检测崩掉对应 追加 End
                                        while (!hasReport)
                                        {
                                            if (context.StopFlag)
                                                return ExitState.Current;

                                            System.Threading.Thread.Sleep(50);
                                            //hasReport = GlobalDataManager.Current.IsPassOK != string.Empty;
                                            if (AutoRunSettings.Default.IsLocalCommit && (AutoRunSettings.Default.IsAutoVerificationEnabled || Customization.Current.IsWaitLocalCommit))
                                            {
                                                if (Customization.Current.IsWaitLocalCommit)
                                                {
                                                    hasReport = (GlobalDataManager.Current.IsPassOK1 != string.Empty) && (GlobalDataManager.Current.IsPassOK1 != "WAIT");
                                                }
                                                else
                                                {
                                                    //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 Start
                                                    //hasReport = (GlobalDataManager.Current.IsPassOK1 != string.Empty || reportManager.HasReport);// GlobalDataManager.Current.IsPassOK1 != string.Empty;
                                                    hasReport = ((checkRailID == 1 ? GlobalDataManager.Current.IsPassOK1 != string.Empty : GlobalDataManager.Current.IsPassOK2 != string.Empty) || reportManager.HasReport(checkRailID));// GlobalDataManager.Current.IsPassOK1 != string.Empty;
                                                    //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 End
                                                }
                                            }
                                            else
                                            {
                                                //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 Start
                                                //hasReport = GlobalDataManager.Current.IsPassOK != string.Empty;// reportManager.HasReport;
                                                hasReport = GlobalDataManager.Current.IsPassOK1 != string.Empty;// reportManager.HasReport;
                                                //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 End
                                            }

                                            //20231017 等待超时修改 【李逸凡】 追加 Start
                                            if (!Customization.Current.IsNoWaitSecondsTimeout)
                                            {
                                                //20231017 等待超时修改 【李逸凡】 追加 End

                                                // 20210707 奥海检测崩掉对应 追加 Start
                                                if (timeoutStopwatch.Elapsed >= timeout)
                                                {
                                                    timeoutStopwatch.Stop();
                                                    isTimeout = true;
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) inspection Timeout , timeout setting = 10s");
                                                    break;
                                                }
                                                // 20210707 奥海检测崩掉对应 追加 End

                                                //20231017 等待超时修改 【李逸凡】 追加 Start
                                            }
                                            //20231017 等待超时修改 【李逸凡】 追加 End

                                            //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 Start
                                            //Holly.Log.HlLogger.Write("HOLLY AOI ============> reportManager.HasReport = " + reportManager.HasReport + " GlobalDataManager.Current.IsPassOK = " + GlobalDataManager.Current.IsPassOK);
                                            if (checkRailID == 1)
                                            {
                                                Holly.Log.HlLogger.Write("HOLLY AOI ============> reportManager.HasReport = " + reportManager.HasReport(checkRailID) + " GlobalDataManager.Current.IsPassOK1 = " + GlobalDataManager.Current.IsPassOK1);
                                            }
                                            else
                                            {
                                                Holly.Log.HlLogger.Write("HOLLY AOI ============> reportManager.HasReport = " + reportManager.HasReport(checkRailID) + " GlobalDataManager.Current.IsPassOK2 = " + GlobalDataManager.Current.IsPassOK2);
                                            }
                                            //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 End
                                        }
                                        //Holly.Log.HlLogger.Write("HOLLY AOI ============> reportManager.HasReport = " + reportManager.HasReport + " GlobalDataManager.Current.IsPassOK = " + GlobalDataManager.Current.IsPassOK);

                                        //20231017 等待超时修改 【李逸凡】 追加 Start
                                        if (!Customization.Current.IsNoWaitSecondsTimeout)
                                        {
                                            //20231017 等待超时修改 【李逸凡】 追加 End

                                            // 20210707 奥海检测崩掉对应 追加 Start
                                            if (isTimeout)
                                            {
                                                Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) inspection Timeout return DesyncState");
                                                GlobalDataManager.Current.IsPLCError = true;
                                                // 20230209 E05区分 追加 Start   
                                                GlobalDataManager.Current.EquipmentErrorCode = "E34 ";//PLC报警
                                                Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                                // 20230209 E05区分 追加 End 
                                                //20230706  查找E05 【徐明武】 修改 Start
                                                //return DesyncState.Current;
                                                {
                                                    Holly.Log.HlLogger.Write("E05 => 90 ");
                                                    return DesyncState.Current;
                                                }
                                                //20230706  查找E05 【徐明武】 修改 End 
                                            }
                                            // 20210707 奥海检测崩掉对应 追加 End

                                            //20231017 等待超时修改 【李逸凡】 追加 Start
                                        }
                                        //20231017 等待超时修改 【李逸凡】 追加 End

                                        //op.LocateCamera(GlobalDataManager.Current.ReleaseBoardPosition);

                                        // 20190823 等待空文件夹 Start
                                        if (AutoRunSettings.Default.IsRepairControlNotWait
                                            // 20241104 北京小米出板后显示数据 【李伟】 追加 Start
                                            || Customization.Current.XiaoMiShopfloor.IsEnabled
                                            // 20241104 北京小米出板后显示数据 【李伟】 追加 End
                                            )
                                        {
                                            // 20210705 双轨双头四轨定轨对应 修改 Start
                                            //FileUtils.WaitForEmptyFile(Customization.Current.RepairControlNotWaitExportDirectory, LC.SN + "-1.txt");

                                            if (MachineParams.Current.InlineMachine.IsDoubleRail && !MachineParams.Current.InlineMachine.IsSingleHead && MachineParams.Current.InlineMachine.IsFourthRailFixed)
                                            {
                                                FileUtils.WaitForEmptyFile(Customization.Current.RepairControlNotWaitExportDirectory, LC.SN + "-2.txt");
                                            }
                                            else
                                            {
                                                FileUtils.WaitForEmptyFile(Customization.Current.RepairControlNotWaitExportDirectory, LC.SN + "-1.txt");
                                            }
                                            // 20210705 双轨双头四轨定轨对应 修改 End
                                        }
                                        // 20190823 等待空文件夹 End

                                        // 20201015 紫光NGBuffer 追加 Start
                                        if (!ZiGuangNGBuffer.Current.WriteNGBuffer(m))
                                        {
                                            // 20230209 E05区分 追加 Start   
                                            GlobalDataManager.Current.EquipmentErrorCode = "E52";// 紫光NGBuffer报警
                                            Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                            // 20230209 E05区分 追加 End 
                                            //20230706  查找E05 【徐明武】 修改 Start
                                            //return DesyncState.Current;
                                            {
                                                Holly.Log.HlLogger.Write("E05 => 91 ");
                                                return DesyncState.Current;
                                            }
                                            //20230706  查找E05 【徐明武】 修改 End 
                                        }
                                        // 20201015 紫光NGBuffer 追加 End

                                        // 20220115 ModBusTcp_NGBuffer 追加 Start
                                        if (!NGBufferModbusTCP.Current.SingleRailWriteNGBufferContent(m))
                                        {
                                            // 20230209 E05区分 追加 Start   
                                            GlobalDataManager.Current.EquipmentErrorCode = "E53";// ModBusTcp_NGBuffer报警
                                            Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                            // 20230209 E05区分 追加 End 
                                            //20230706  查找E05 【徐明武】 修改 Start
                                            //return DesyncState.Current;
                                            {
                                                Holly.Log.HlLogger.Write("E05 => 92 ");
                                                return DesyncState.Current;
                                            }
                                            //20230706  查找E05 【徐明武】 修改 End 
                                        }
                                        // 20220115 ModBusTcp_NGBuffer 追加 End

                                        if (AutoRunSettings.Default.IsLocalCommit && Customization.Current.IsWaitLocalCommit)
                                        {
                                            if (GlobalDataManager.Current.IsPassOK1 == "FAIL")
                                            {
                                                op.ClearCommand();
                                                op.BoardOutNG();
                                                Holly.Log.HlLogger.Write("HOLLY AOI ============> BoardOut NG");
                                            }
                                            else
                                            {
                                                op.ClearCommand();
                                                op.BoardOut();
                                                Holly.Log.HlLogger.Write("HOLLY AOI ============> BoardOut OK");
                                            }
                                        }
                                        // 20200820 华贝指定元件报警 追加 Start
                                        else if (Customization.Current.HuaBei2ndShopfloor.IsEnabled)
                                        {
                                            // 20200917 华贝指定元件报警 调试追加 Start
                                            //bool checkRouteResult = DoubleSideDataControl.Current.GetCheckRouteResult(1);

                                            Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState)  ExportHuaBeiShopfloorManger CheckOK Strat");
                                            // 20200918 华贝现场调试 删除 Start
                                            //bool checkRouteResult = DoubleSideDataControl.Current.CheckRouteResultFlag;
                                            // 20200918 华贝现场调试 删除 End
                                            Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState)  ExportHuaBeiShopfloorManger CheckOK End");
                                            // 20200917 华贝指定元件报警 调试追加 End
                                            // 过站成功，等结果发送OK/NG
                                            if (checkRouteResult)
                                            {
                                                Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) Wait ExportHuaBeiShopfloorManger CheckOK");
                                                // 20200918 华贝现场调试 删除 Start
                                                //ExportHuaBeiShopfloorManger.Current.ExportOKNG();
                                                // 20200918 华贝现场调试 删除 End
                                                HeartBeatUtils heartBeat = new HeartBeatUtils(5);

                                                string okNGPath = "";
                                                while (okNGPath == "")
                                                {
                                                    if (heartBeat.IsOutput())
                                                    {
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) Wait ExportOKNGDirectory result File......");
                                                    }

                                                    // 20200918 华贝现场调试 追加 Start
                                                    ExportHuaBeiShopfloorManger.Current.ExportOKNG();
                                                    // 20200918 华贝现场调试 追加 End
                                                    okNGPath = ExportHuaBeiShopfloorManger.Current.GetFileName(Customization.Current.HuaBei2ndShopfloor.ExportOKNGDirectory, "_" + AutoRunSettings2.Default.Side + ".txt");
                                                }

                                                if (okNGPath != "")
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) Wait ExportHuaBeiShopfloorManger handle filename = " + okNGPath);

                                                    string txt = "";
                                                    StreamReader sr = new StreamReader(okNGPath);
                                                    using (sr)
                                                    {
                                                        txt = sr.ReadLine().Trim();
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) Wait ExportHuaBeiShopfloorManger Read txt = " + txt);
                                                    }
                                                    sr.Close();
                                                    if (txt.Equals("1"))
                                                    {
                                                        op.ClearCommand();
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) Wait ExportHuaBeiShopfloorManger BoardOutNG");
                                                        // 20200918 华贝现场调试 追加 Start
                                                        File.Delete(okNGPath);
                                                        // 20200918 华贝现场调试 追加 End
                                                        op.BoardOutNG();
                                                    }
                                                    else
                                                    {
                                                        op.ClearCommand();
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) Wait ExportHuaBeiShopfloorManger BoardOut");
                                                        // 20200918 华贝现场调试 追加 Start
                                                        File.Delete(okNGPath);
                                                        // 20200918 华贝现场调试 追加 End
                                                        op.BoardOut();
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                op.ClearCommand();
                                                Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) Wait ExportHuaBeiShopfloorManger CheckNG BoardOut");
                                                op.BoardOut();
                                            }
                                        }
                                        // 20200820 华贝指定元件报警 追加 End
                                        // 20220420 东勤MES 追加 Start
                                        else if (Customization.Current.DongQinShopfloor.IsEnabled)
                                        {
                                            // 过站成功，等结果发送OK/NG
                                            if (checkRouteResult)
                                            {
                                                Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) Wait ExportDongQinShopfloorManager CheckOK");
                                                HeartBeatUtils heartBeat = new HeartBeatUtils(5);
                                                string okNGPath = "";
                                                while (okNGPath == "")
                                                {
                                                    if (heartBeat.IsOutput())
                                                    {
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) Wait ExportOKNGDirectory result File......");
                                                    }

                                                    ExportDongQinShopfloorManager.Current.ExportOKNG();
                                                    okNGPath = ExportDongQinShopfloorManager.Current.GetFileName(Customization.Current.DongQinShopfloor.ExportOKNGDirectory, "_" + AutoRunSettings2.Default.Side + ".txt");
                                                }

                                                if (okNGPath != "")
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) Wait ExportDongQinShopfloorManager handle filename = " + okNGPath);

                                                    string txt = "";
                                                    StreamReader sr = new StreamReader(okNGPath);
                                                    using (sr)
                                                    {
                                                        txt = sr.ReadLine().Trim();
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) Wait ExportDongQinShopfloorManager Read txt = " + txt);
                                                    }
                                                    sr.Close();
                                                    if (txt.Equals("1"))
                                                    {
                                                        op.ClearCommand();
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) Wait ExportDongQinShopfloorManager BoardOutNG");
                                                        File.Delete(okNGPath);
                                                        op.BoardOutNG();
                                                    }
                                                    else
                                                    {
                                                        op.ClearCommand();
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) Wait ExportDongQinShopfloorManager BoardOut");
                                                        File.Delete(okNGPath);
                                                        op.BoardOut();
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                op.ClearCommand();
                                                Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) Wait ExportDongQinShopfloorManager CheckNG BoardOut");
                                                op.BoardOut();
                                            }
                                        }
                                        // 20220420 东勤MES 追加 End
                                        // 20221128 贝思特MES 追加 Start
                                        else if ((Customization.Current.BeiSiTeShopfloor.IsEnabled && AutoRunSettings.Default.IsEnableMES))
                                        {
                                            // 过站成功，等结果发送OK/NG
                                            if (checkRouteResult)
                                            {
                                                Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) Wait ExportBeiSiTeShopfloorManger CheckOK");
                                                HeartBeatUtils heartBeat = new HeartBeatUtils(5);

                                                string okNGPath = "";
                                                while (okNGPath == "")
                                                {
                                                    if (heartBeat.IsOutput())
                                                    {
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) Wait ExportOKNGDirectory result File......");
                                                    }

                                                    ExportBeiSiTeShopfloorManger.Current.ExportOKNG();
                                                    okNGPath = ExportBeiSiTeShopfloorManger.Current.GetFileName(Customization.Current.BeiSiTeShopfloor.ExportOKNGDirectory, "_" + AutoRunSettings2.Default.Side + ".txt");
                                                }

                                                if (okNGPath != "")
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) Wait ExportBeiSiTeShopfloorManger handle filename = " + okNGPath);

                                                    string txt = "";
                                                    StreamReader sr = new StreamReader(okNGPath);
                                                    using (sr)
                                                    {
                                                        txt = sr.ReadLine().Trim();
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) Wait ExportBeiSiTeShopfloorManger Read txt = " + txt);
                                                    }
                                                    sr.Close();
                                                    if (txt.Equals("1"))
                                                    {
                                                        op.ClearCommand();
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) Wait ExportBeiSiTeShopfloorManger BoardOutNG");
                                                        File.Delete(okNGPath);
                                                        op.BoardOutNG();
                                                    }
                                                    else
                                                    {
                                                        op.ClearCommand();
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) Wait ExportBeiSiTeShopfloorManger BoardOut");
                                                        File.Delete(okNGPath);
                                                        op.BoardOut();
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                op.ClearCommand();
                                                Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Visit(GoState) Wait ExportBeiSiTeShopfloorManger CheckNG BoardOut");
                                                op.BoardOut();
                                            }
                                        }
                                        // 20221128 贝思特MES 追加 End
                                        else
                                        {
                                            //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 Start
                                            //if (GlobalDataManager.Current.IsPassOK1 == "NG2" || GlobalDataManager.Current.IsPassOK == "NG2")
                                            if ((checkRailID == 1 ? GlobalDataManager.Current.IsPassOK1 == "NG2" : GlobalDataManager.Current.IsPassOK2 == "NG2"))
                                            //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 End
                                            {
                                                op.ClearCommand();
                                                op.BoardOutNG2();
                                                Holly.Log.HlLogger.Write("HOLLY AOI ============> BoardOut NG 2");
                                            }
                                            //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 Start
                                            //else if (GlobalDataManager.Current.IsPassOK1 == "PASS" || reportManager.IsPassOK)
                                            else if ((checkRailID == 1 ? GlobalDataManager.Current.IsPassOK1 == "PASS" : GlobalDataManager.Current.IsPassOK2 == "PASS") || reportManager.IsPassOK(checkRailID))
                                            //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 End
                                            {
                                                op.ClearCommand();
                                                op.BoardOut();
                                                Holly.Log.HlLogger.Write("HOLLY AOI ============> BoardOut");
                                            }
                                            else
                                            {
                                                op.ClearCommand();
                                                op.BoardOutNG();
                                                Holly.Log.HlLogger.Write("HOLLY AOI ============> BoardOut NG");
                                            }
                                        }


                                        //20250320 越南富士康AOI自动运行界面直通率优化，移植SPI进出板轨道信息【曹志鹏】追加 Start
                                        ViewModels.RailInfoViewModel.Current.UpdateBoardOutData(1, 1);
                                        //20250320 越南富士康AOI自动运行界面直通率优化，移植SPI进出板轨道信息【曹志鹏】追加 End

                                        op.LocateLoader(GlobalDataManager.Current.LastPosition, GlobalDataManager.Current.ReleaseBoardPosition, false);
                                        opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                        progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);
                                        //opResult.Wait();
                                        /////////////////////////////////////////////////////////m.UpdateInline();
                                        //context.CheckInlineMachineStatus();

                                        // 20230912 汇川空拍【纪明】  修改 Start
                                        //while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)

                                        Stopwatch noBoardGrab = new Stopwatch();
                                        noBoardGrab.Start();
                                        while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0 || IsHaveBoard(m))
                                        // 20230912 汇川空拍【纪明】  修改 End
                                        {
                                            if (context.StopFlag)
                                                return ExitState.Current;
                                            m.UpdateInline();
                                            if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                            {
                                                //20230706  查找E05 【徐明武】 修改 Start
                                                //return DesyncState.Current;
                                                {
                                                    Holly.Log.HlLogger.Write("E05 => 93 ");
                                                    return DesyncState.Current;
                                                }
                                                //20230706  查找E05 【徐明武】 修改 End 
                                            }

                                            // 20230912 汇川空拍【纪明】  追加 Start
                                            if (noBoardGrab.ElapsedMilliseconds / 1000 > 5)
                                            {
                                                Holly.Log.HlLogger.Write("HOLLY AOI ====> Board Out Waiting");
                                                if (!IsHaveBoard(m))
                                                {

                                                    Holly.Log.HlLogger.Write("HOLLY AOI ====> Board Out is no board break");
                                                    break;
                                                }
                                            }
                                            // 20230912 汇川空拍【纪明】  追加 Start

                                            //context.CheckInlineMachineStatus();
                                            Thread.Sleep(50);
                                        }

                                        // 20230912 汇川空拍【纪明】  追加 Start
                                        noBoardGrab.Stop();
                                        // 20230912 汇川空拍【纪明】  追加 End

                                        if (AutoRunSettings.Default.IsRepairControlNotWait
                                            // 20241104 北京小米出板后显示数据 【李伟】 追加 Start
                                            || Customization.Current.XiaoMiShopfloor.IsEnabled
                                            // 20241104 北京小米出板后显示数据 【李伟】 追加 End
                                            )
                                        {
                                            // 20190823 OK/NG信号文件内容Copy删除 Start
                                            //if (!Directory.Exists(Customization.Current.RepairControlNotWaitExportDirectory))
                                            //    {
                                            //        Directory.CreateDirectory(Customization.Current.RepairControlNotWaitExportDirectory);
                                            //    }
                                            // 20190823 OK/NG信号文件内容Copy删除 End
                                            // 20210705 双轨双头四轨定轨对应 修改 Start
                                            //string filePath = DateTime.Now.ToString("yyyyMMddHHmmss") + "-" + LC.SN + "-1.txt";
                                            // 20241104 北京小米出板后显示数据 【李伟】 追加 Start
                                            Holly.Log.HlLogger.Write("HOLLY AOI ======> ImageAcquisitionMachine.Visit Create RepairControl File Start");
                                            // 20241104 北京小米出板后显示数据 【李伟】 追加 End
                                            string filePath = "";
                                            if (MachineParams.Current.InlineMachine.IsDoubleRail && !MachineParams.Current.InlineMachine.IsSingleHead && MachineParams.Current.InlineMachine.IsFourthRailFixed)
                                            {
                                                filePath = DateTime.Now.ToString("yyyyMMddHHmmss") + "-" + LC.SN + "-2.txt";
                                            }
                                            else
                                            {
                                                filePath = DateTime.Now.ToString("yyyyMMddHHmmss") + "-" + LC.SN + "-1.txt";
                                            }
                                            // 20210705 双轨双头四轨定轨对应 修改 End
                                            // 20190823 OK/NG信号文件内容删除 Start
                                            //filePath = Path.Combine(Customization.Current.RepairControlNotWaitExportDirectory, filePath);
                                            //TextWriter tw = new StreamWriter(filePath);                                                
                                            //using (tw)
                                            //{
                                            //    tw.WriteLine(DateTime.Now.ToString("yyyyMMddHHmmss"));
                                            //}
                                            //tw.Close();
                                            // 20190823 OK/NG信号文件内容删除 End

                                            // 20190823 OK/NG信号文件内容Copy变更 Start
                                            FileUtils.CreateEmptyFile(Customization.Current.RepairControlNotWaitExportDirectory, filePath);
                                            // 20190823 OK/NG信号文件内容Copy变更 End
                                        }

                                        progressListener.Complete();

                                        //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 Start
                                        //Holly.Log.HlLogger.Write("HOLLY AOI ============> BoardOut = " + GlobalDataManager.Current.IsPassOK);
                                        //GlobalDataManager.Current.IsPassOK = string.Empty;
                                        Holly.Log.HlLogger.Write("HOLLY AOI ============> BoardOut = " + GlobalDataManager.Current.IsPassOK1);
                                        GlobalDataManager.Current.IsPassOK1 = string.Empty;
                                        //20240709 1，2轨数据缓存分开存放【曹志鹏】修改 End

                                        //20250320 越南富士康AOI自动运行界面直通率优化，移植SPI进出板轨道信息【曹志鹏】追加 Start
                                        ViewModels.RailInfoViewModel.Current.UpdateBoardOutData(1, 2);
                                        //20250320 越南富士康AOI自动运行界面直通率优化，移植SPI进出板轨道信息【曹志鹏】追加 End
                                    }
                                    // 3.普通模式 简化模式单工
                                    else
                                    {
                                        // 20241008 连续预警满足条件时报警在出板 【ygs】 追加 Start
                                        #region 连续预警满足条件时报警在出板
                                        string alarmMsg = string.Empty;
                                        if (AutoRunSettings.Default.IsMachineAlarmEnabled)
                                        {
                                            Holly.Log.HlLogger.Write("HOLLY AOI ============>ImageAcquisitionMachine Start IsBoardOut=" + GlobalDataManager.Current.IsBoardOut);
                                            if (Customization.Current.WarningStatistics.IsFoxTaiYuan)
                                            {
                                                while (!GlobalDataManager.Current.IsBoardOut && GlobalDataManager.Current.IsAutoRun)
                                                {
                                                    System.Threading.Thread.Sleep(100);
                                                    //报警退出
                                                    if (ExportAlarmNotificationManager.Current.checkAlarm)
                                                    {
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ============>ImageAcquisitionMachine checkAlarm=" + ExportAlarmNotificationManager.Current.checkAlarm);
                                                        break;
                                                    }
                                                }
                                            }
                                            Holly.Log.HlLogger.Write("HOLLY AOI ============>ImageAcquisitionMachine End IsBoardOut=" + GlobalDataManager.Current.IsBoardOut);

                                            alarmMsg = ExportCacheComAlarmManager.Current.AlertAlarmInfoMsg(checkRailID);
                                            if (!string.IsNullOrEmpty(alarmMsg))
                                            {
                                                // 20241012 太原直通率报警移植 【王晨】 删除 Start
                                                //WaitVerify(m,alarmMsg);
                                                // 20241012 太原直通率报警移植 【王晨】 删除 End
                                                ExportCacheComAlarmManager.Current.ClearCacheMachineAlarmList(1);
                                            }
                                            Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine  报警提示 = " + alarmMsg);
                                        }
                                        #endregion

                                        // 20241012 太原直通率报警移植 【王晨】 追加 Start
                                        // 20241009 直通率预警出板 【ygs】 追加 Start
                                        #region 直通率预警出板 【ygs】
                                        //20240801 直通率报警【张晨铖】 追加 Start
                                        bool isIpyAlarm = false;
                                        if (Customization.Current.IPYAlarm.IsEnabled && AutoRunSettings.Default.ZdtcoIPYAlarm)
                                        {
                                            Holly.Log.HlLogger.Write("HOLLY AOI ============>ImageAcquisitionMachine Start IsFpyBoardOut=" + GlobalDataManager.Current.IsFpyBoardOut);

                                            while (!GlobalDataManager.Current.IsFpyBoardOut && GlobalDataManager.Current.IsAutoRun)
                                            {
                                                System.Threading.Thread.Sleep(100);
                                                //报警退出
                                                if (ExportAlarmNotificationManager.Current.checkAlarm)
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ============>ImageAcquisitionMachine checkAlarm=" + ExportAlarmNotificationManager.Current.checkAlarm);
                                                    break;
                                                }
                                            }
                                            GlobalDataManager.Current.IsFpyBoardOut = false;
                                            Holly.Log.HlLogger.Write("HOLLY AOI ============>ImageAcquisitionMachine End IsFpyBoardOut=" + GlobalDataManager.Current.IsFpyBoardOut);

                                            //20240923 太原直通率报警切换选项 【张晨铖】 追加 Start

                                            if (AutoRunSettings.Default.IsIPYAlarmByBoard)
                                            {
                                                isIpyAlarm = GlobalDataManager.Current.IPYForBoard1 < AutoRunSettings.Default.IPY1 ? true : false;
                                            }
                                            else if (AutoRunSettings.Default.IsIPYAlarmByComponent)
                                            {
                                                isIpyAlarm = GlobalDataManager.Current.IPYForComponent1 < AutoRunSettings.Default.IPY1 ? true : false;
                                            }
                                            else if (AutoRunSettings.Default.IsIPYAlarmByBlock)
                                            {
                                                isIpyAlarm = GlobalDataManager.Current.IPYForBlock1 < AutoRunSettings.Default.IPY1 ? true : false;
                                            }
                                            //20240923 太原直通率报警切换选项 【张晨铖】 追加 End
                                            ExportZdtcoIPYAlarmManger.Current.TestPCBCount1++;
                                        }
                                        Holly.Log.HlLogger.Write("HOLLY AOI ============>ImageAcquisitionMachine Ipy isIpyAlarm=" + isIpyAlarm);

                                        if ((isIpyAlarm && ExportZdtcoIPYAlarmManger.Current.IsCanAlarm(DateTime.Now, 1)) || !string.IsNullOrEmpty(alarmMsg))
                                        {
                                            List<string> errorMsg = new List<string>();
                                            if (isIpyAlarm && ExportZdtcoIPYAlarmManger.Current.IsCanAlarm(DateTime.Now, 1))
                                            {
                                                errorMsg.Add("检测直通率未达到设定值");
                                            }

                                            if (!string.IsNullOrEmpty(alarmMsg))
                                            {
                                                errorMsg.Add(alarmMsg);
                                            }
                                            Holly.Log.HlLogger.Write("HOLLY AOI ==== >ImageAcquisitionMachine IPY Alarm !!! " + alarmMsg);
                                            WaitVerify(m, string.Join(",", errorMsg));
                                            ExportZdtcoIPYAlarmManger.Current.LastAlarmDateTime1 = DateTime.Now.AddMinutes(Customization.Current.IPYAlarm.IntervalMinutes);
                                            ExportZdtcoIPYAlarmManger.Current.TestPCBCount1 = 0;
                                            //return DesyncState.Current;
                                        }
                                        #endregion
                                        //20240801 直通率报警【张晨铖】 追加 End
                                        // 20241009 直通率预警出板 【ygs】 追加 End
                                        // 20241012 太原直通率报警移植 【王晨】 追加 End

                                        // 20241217 鹏鼎双panel报警异常修复 【ygs】 追加 Start
                                        #region 双panel出板
                                        if (MachineParams.Current.InlineMachine.MultiProgramMarkAutoCheck)
                                        {
                                            while (!GlobalDataManager.Current.IsMultPanelInsectionEnd)
                                            {
                                                if (context.StopFlag)
                                                    return ExitState.Current;
                                                Holly.Log.HlLogger.Write("HOLLY AOI ==== >ImageAcquisitionMachine GlobalDataManager.Current.AlarmPopList.Count=" + GlobalDataManager.Current.AlarmPopList.Count);
                                                System.Threading.Thread.Sleep(10);
                                            }
                                        }
                                        #endregion
                                        // 20241217 鹏鼎双panel报警异常修复 【ygs】 追加 End

                                        //op.ClearCommand();
                                        //opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                        Holly.Log.HlLogger.Write("HOLLY AOI ====> Board Out Normal");
                                        //op.LocateCamera(GlobalDataManager.Current.ReleaseBoardPosition);

                                        //20250320 越南富士康AOI自动运行界面直通率优化，移植SPI进出板轨道信息【曹志鹏】追加 Start
                                        ViewModels.RailInfoViewModel.Current.UpdateBoardOutData(1, 1);
                                        //20250320 越南富士康AOI自动运行界面直通率优化，移植SPI进出板轨道信息【曹志鹏】追加 End

                                        // 20230708 TraceLog【纪明】 追加 Start
                                        LogManagerComm.Current.OutputLog(LogManagerComm.TRACE_LOG, DateTimeUtils.GetNow(DateTimeUtils.DATE_FORMAT1) + "\t" + "HOLLY AOI ====> Board Out Normal Start ");
                                        // 20230708 TraceLog【纪明】 追加 End

                                        // 20220613 双面机机外判定同步出板 追加 Start
                                        if (AutoRunSettings2.Default.IsDoubleSideAOI && AutoRunSettings2.Default.IsUseDataControl && AutoRunSettings2.Default.IsSyncBoardOut)
                                        {
                                            DoubleSideDataControl.Current.SyncBoardOutState(checkRailID);
                                        }
                                        // 20220613 双面机机外判定同步出板 追加 End
                                        //Holly.Log.HlLogger.Write("E05 => BoardOut Start");
                                        op.BoardOut();

                                        op.LocateLoader(GlobalDataManager.Current.LastPosition, GlobalDataManager.Current.ReleaseBoardPosition, false);
                                        opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                        progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);
                                        //opResult.Wait();
                                        /////////////////////////////////////////////////////////m.UpdateInline();
                                        //context.CheckInlineMachineStatus();

                                        // 20230927 E05 【ygs】 删除 Start
                                        //Holly.Log.HlLogger.Write("E05 => BoardOut End");
                                        // 20230927 E05 【ygs】 删除 End

                                        // 20220803 PLC状态监控 追加 Start
                                        Stopwatch normalBoardOutstopwatch = new Stopwatch();
                                        normalBoardOutstopwatch.Start();
                                        HeartBeatUtils heartBeat = new HeartBeatUtils(2);

                                        Holly.Log.HlLogger.Write("HOLLY AOI ====> Board Out m.CompleteProcessStatus = " + m.CompleteProcessStatus);
                                        // 20220803 PLC状态监控 追加 End

                                        // 20230714 郑州不进板问题noboardout置位 【陈凤丹】 追加 Start
                                        int setBoardoutEndTimes = 0;
                                        // 20230714 郑州不进板问题noboardout置位 【陈凤丹】 追加 End

                                        // 20220830 2022机台出板异常对应 修改 Start
                                        //while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0)

                                        while ((m.CompleteProcessStatus & CompleteProcessStatus1.BoardOut) == 0 || IsHaveBoard(m))
                                        // 20220830 2022机台出板异常对应 修改 End
                                        {
                                            if (context.StopFlag)
                                            {
                                                Holly.Log.HlLogger.Write("HOLLY AOI ====> Board Out StopFlag = true");
                                                return ExitState.Current;
                                            }
                                                

                                            m.UpdateInline();
                                            if (m.CurrentInputs.EmergencyButton || m.CurrentInputs.SafeSensor || (m.CommandStatusInline & CommandStatusInline.TimeOut) != 0 || (m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                                            {
                                                //20230706  查找E05 【徐明武】 修改 Start
                                                string message = string.Format("E05 => EmergencyButton:{0},SafeSensor:{1},CommandStatusInline.TimeOut:{2},TwoBoardInside:{3}", m.CurrentInputs.EmergencyButton.ToString(), m.CurrentInputs.SafeSensor.ToString(), ((m.CommandStatusInline & CommandStatusInline.TimeOut) != 0).ToString(), ((m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0).ToString());
                                                Holly.Log.HlLogger.Write(message);
                                                //return DesyncState.Current;
                                                {
                                                    Holly.Log.HlLogger.Write("E05 => 94 Master = " + AutoRunSettings2.Default.IsMaster.ToString());
                                                    return DesyncState.Current;
                                                }
                                                //20230706  查找E05 【徐明武】 修改 End 
                                            }
                                            //context.CheckInlineMachineStatus();
                                            Thread.Sleep(50);

                                            // 20220803 PLC状态监控 追加 Start
                                            if (normalBoardOutstopwatch.ElapsedMilliseconds / 1000 > 5)
                                            {
                                                if (!IsHaveBoard(m))
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ====> Board Out is no board break");
                                                    // 20230708 TraceLog【纪明】 追加 Start
                                                    LogManagerComm.Current.OutputLog(LogManagerComm.TRACE_LOG, DateTimeUtils.GetNow(DateTimeUtils.DATE_FORMAT1) + "\t" + "HOLLY AOI ====> Board Out is no board break ");
                                                    // 20230708 TraceLog【纪明】 追加 End

                                                    // 20230714 郑州不进板问题noboardout置位 【陈凤丹】 修改 Start
                                                    //break;

                                                    //没收到出板完成信号，通知PLC重发出板完成，重试3次都没成功再退出
                                                    if (setBoardoutEndTimes < 3)
                                                    {
                                                        CentralControlPLCCommand.Current.SetBoardoutEnd(1);
                                                        setBoardoutEndTimes++;
                                                        normalBoardOutstopwatch.Restart();
                                                    }
                                                    else
                                                    {
                                                        Holly.Log.HlLogger.Write("HOLLY AOI ====> Board Out is no board break ， setBoardoutEndTimes = " + setBoardoutEndTimes);
                                                        //LogManagerComm.Current.OutputLog(LogManagerComm.TRACE_LOG, DateTimeUtils.GetNow(DateTimeUtils.DATE_FORMAT1) + "\t" + "HOLLY AOI ====> Board Out is no board break ， setBoardoutEndTimes = " + setBoardoutEndTimes);
                                                        break;
                                                    }
                                                    // 20230714 郑州不进板问题noboardout置位 【陈凤丹】 修改 End
                                                }

                                                //20241206 AVI拍 拍照完成信号和出板信号 【徐明武】 追加  Start
                                                //注释：获取出板传感器信号,读取地址为1485中的值是否是256
                                                if (GetBoardOutSignal())
                                                {
                                                    Holly.Log.HlLogger.Write("HOLLY AOI ====> Board Out is mode2 break ");
                                                    break;
                                                }

                                                //20241206 AVI拍 拍照完成信号和出板信号 【徐明武】 追加  End
                                            }
                                            // 20220803 PLC状态监控 追加 End

                                            if (heartBeat.IsOutput())
                                            {
                                                Holly.Log.HlLogger.Write("HOLLY AOI ====> Board Out Is Waitting ...");

                                                // 20230708 TraceLog【纪明】 追加 Start
                                                LogManagerComm.Current.OutputLog(LogManagerComm.TRACE_LOG, DateTimeUtils.GetNow(DateTimeUtils.DATE_FORMAT1) + "\t" + "HOLLY AOI ====> Board Out Is Waitting ... ");
                                                // 20230708 TraceLog【纪明】 追加 End
                                            }

                                        }
                                        progressListener.Complete();

                                        Holly.Log.HlLogger.Write("HOLLY AOI ====> Board Out Normal End");

                                        //20250320 越南富士康AOI自动运行界面直通率优化，移植SPI进出板轨道信息【曹志鹏】追加 Start
                                        ViewModels.RailInfoViewModel.Current.UpdateBoardOutData(1, 2);
                                        //20250320 越南富士康AOI自动运行界面直通率优化，移植SPI进出板轨道信息【曹志鹏】追加 End

                                        // 20220803 PLC状态监控 追加 Start
                                        normalBoardOutstopwatch.Stop();
                                        // 20220803 PLC状态监控 追加 End

                                        // 20230708 TraceLog【纪明】 追加 Start
                                        LogManagerComm.Current.OutputLog(LogManagerComm.TRACE_LOG, DateTimeUtils.GetNow(DateTimeUtils.DATE_FORMAT1) + "\t" + "HOLLY AOI ====> Board Out Normal End ");
                                        // 20230708 TraceLog【纪明】 追加 End
                                    }

                                }
                                //op.LocateLoader(GlobalDataManager.Current.LastPosition, GlobalDataManager.Current.ReleaseBoardPosition, false);
                                //opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                //progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_BoardOuting);
                            }

                            //context.ClearBoard();
                            if (opResult.HasError)
                            {
                                Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> Board Out opResult.HasError 2");
                                //Log4Net.Error("HOLLY AOI DesyncState============> Board Out opResult.HasError 2");
                                GlobalDataManager.Current.IsPLCError = true;
                                // 20230209 E05区分 追加 Start   
                                GlobalDataManager.Current.EquipmentErrorCode = "E34";//PLC报警
                                Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                //Log4Net.Warn("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                // 20230209 E05区分 追加 End 
                                //20230706  查找E05 【徐明武】 修改 Start
                                //return DesyncState.Current;
                                {
                                    Holly.Log.HlLogger.Write("E05 => 95 ");
                                    return DesyncState.Current;
                                }
                                //20230706  查找E05 【徐明武】 修改 End 
                            }
                            
                            //if ((m.CommandStatusInline & CommandStatusInline.TimeOut) != 0)
                            //{
                            //    return DesyncState.Current;
                            //}

                            //检查气压
                            m.UpdateInline();
                            //context.CheckInlineMachineStatus();
                            if (Customization.Current.CheckAirPressure && !AutoRunSettings.Default.IsOfflineMode && (m.InputStatusInline & InputStatusInline.AirPressureSwitch) == 0)
                            {
                                op = m.CreateBatchOperationInline();
                                opResult = null;
                                op.ClearLampBlink();
                                op.SetRedAndBuzzer();
                                opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                                opResult.Wait();
                                // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                ExportShanWeiWatchBoardBYDShopfloorManager.Current.WriteAlarm(1, Lang.UI.UI_Status_AirPressureWarning, DateTime.Now);
                                // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End
                                UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                                                new Action(
                                                    delegate ()
                                                    {
                                                        //20230717 log输出【ygs】 Start 
                                                        ExportLogOuputManager.Current.OuputLog(11, Lang.UI.UI_Status_AirPressureWarning);
                                                        //20230717 log输出【ygs】 End
                                                        // 20240406 启动屏幕录制程序 追加 Start                                                    
                                                        SocketScreenRecorder.Current.clientSendStart();
                                                        // 20240406 启动屏幕录制程序 追加 End
                                                        IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                                        messageManager.ShowError(Lang.UI.UI_Status_AirPressureWarning);
                                                    }));

                                IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                IOperationResult opResult2 = null;

                                op2.SetBuzzer(false);
                                opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                opResult2.Wait();

                                // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 Start
                                ExportShanWeiWatchBoardBYDShopfloorManager.Current.UpdateAlarm(3, Lang.UI.UI_Status_AirPressureWarning, DateTime.Now);
                                // 20240524 汕尾海丰看板数据传输功能 【ygs】 追加 End

                                Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> CheckAirPressure 4");
                                // 20230209 E05区分 追加 Start   
                                GlobalDataManager.Current.EquipmentErrorCode = "E33";//气压报警
                                Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                // 20230209 E05区分 追加 End 
                                //20230706  查找E05 【徐明武】 修改 Start
                                //return DesyncState.Current;
                                {
                                    Holly.Log.HlLogger.Write("E05 =>  99");
                                    return DesyncState.Current;
                                }
                                //20230706  查找E05 【徐明武】 修改 End 
                            }

                        }

                    }
                }

                // 20211022 导出处理日期 追加 Start
                ExportProcessDataShopfloorManager.Current.BoardOutEnd(DateTime.Now, 1);
                // 20211022 导出处理日期 追加 End

                // 20221115 元件码上传丢失对应 追加 Start
                if (Customization.Current.LuxshareShopfloor_KS.IsEnabled && Customization.Current.LuxshareShopfloor_KS.IsLiZhen && AutoRunSettings2.Default.IsMaster)
                {
                    string message = Shopfloor.ExportLuxshareShopfloor_KSManager.Current.GetMesUploadCheckRet("1");
                    if (message != "")
                    {
                        //WaitVerify(m, message);
                        System.Windows.Forms.MessageBox.Show(message);
                    }
                }
                // 20221115 元件码上传丢失对应 追加 End

                // 20210622 版本恢复 删除
                //// 20210602 相机头复位延迟 追加 Start
                //Holly.Log.HlLogger.Write("HOLLY AOI ============> DoubleRailDoubleHead Step");
                //if (Customization.Current.DoubleRailDoubleHead.IsEnabled && MachineParams.Current.SerialPort.IsHuichuan)
                //{
                //    Holly.Log.HlLogger.Write("HOLLY AOI ====> SetY24(false)");

                //    // 拍完照后，在出板时，相机头在回起始位置，导致撞击，延迟1.5秒
                //    int delaySeconds = (int)(Customization.Current.DoubleRailDoubleHead.ResetDelaySeconds * 1000);

                //    Thread.Sleep(delaySeconds);
                //    CentralControlPLCCommand.Current.SetY24(false);
                //    //m40.UpdateInline();
                //    //Holly.Log.HlLogger.Write("HOLLY AOI ====> SetY14(false) = " + ((m.OutputStatusInline & OutputStatusInline.SMEMAReadyOut) != 0));
                //}
                //// 20210602 相机头复位延迟 追加 End

                //20240527 aoi报警列表数据不及时更新和出板延迟修复【曹志鹏】追加 Start
                //20240329 维修站确认inspection队列未及时移走数据导致界面一直显示第一片板子的数据bug修复 【曹志鹏】 追加 Start
                // 20240603 苏州迎安离线设备本机确认修改需求【王小雪】 修改 Start
                // 离线机本机确认复判界面偶尔会闪退
                //reportManager.DequeueInspection(); 

                // 20240603 工厂测试本机确认离线模式复判界面偶尔闪退 【王小雪】 修改 Start
                //if (MachineParams.Current.IsInlineMode)

                if (!(!MachineParams.Current.IsInlineMode || AutoRunSettings.Default.IsOfflineMode))
                // 20240603 工厂测试本机确认离线模式复判界面偶尔闪退 【王小雪】 修改 End
                {
                    // 20240624 本机确认报未将对象引用到实例 【王晨】 删除 Start
                    //reportManager.DequeueInspection();
                    // 20240624 本机确认报未将对象引用到实例 【王晨】 删除 End
                }
                // 20240603 苏州迎安离线设备本机确认修改需求【王小雪】 修改 End
                //20240329 维修站确认inspection队列未及时移走数据导致界面一直显示第一片板子的数据bug修复 【曹志鹏】 追加 End
                //20240527 aoi报警列表数据不及时更新和出板延迟修复【曹志鹏】追加 End

                if (this.IsRequestOne)
                {
                    return ExitState.Current;
                }
                else
                {
                    //2015/9/8 注释 出板出错
                    if (result != null && result.HasError)
                    {
                        var err = result.Exception as MachineException;
                        if (err != null)
                        {
                            if (err.MachineInputs.EmergencyButton)
                            {
                                context.GetProgressListener().ReportProgress(0, 1, Lang.UI.UI_Error_Emergency);
                            }
                            else if (err.MachineInputs.SafeSensor)
                            {
                                context.GetProgressListener().ReportProgress(0, 1, Lang.UI.UI_Error_SafeSensor);
                            }
                        }
                        Holly.Log.HlLogger.Write("HOLLY AOI DesyncState============> Final result.HasError = " + result.HasError);
                        //Log4Net.Error("HOLLY AOI DesyncState============> Final result.HasError = " + result.HasError);
                        GlobalDataManager.Current.IsPLCError = true;
                        // 20230209 E05区分 追加 Start   
                        GlobalDataManager.Current.EquipmentErrorCode = "E34";//PLC报警
                        Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                        //Log4Net.Error("HOLLY AOI =====>ImageAcquisitionMachine.Visit(GoState) EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                        // 20230209 E05区分 追加 End 
                        //20230706  查找E05 【徐明武】 修改 Start
                        //return DesyncState.Current;
                        {
                            Holly.Log.HlLogger.Write("E05 => 97 ");
                            return DesyncState.Current;
                        }
                        //20230706  查找E05 【徐明武】 修改 End 
                    }
                    else
                    {
                        if (MachineParams.Current.IsInlineMode)
                        {
                            IBatchOperationInline op = m.CreateBatchOperationInline();
                            op.ClearLampBuzzer();
                            op.SetGreenLampBlink();
                            IOperationResult opResult = op.Execute(MachineParams.Current.OperationStepTimeout);

                            //20240429 启动底部条码枪选项分为1，2轨单独设置 【曹志鹏】 修改 Start
                            //if (MachineParams.Current.BarcodeSerialPort.IsEnabled && AutoRunSettings.Default.IsBottomBarcodeScannerEnabled && Customization.Current.IsBottomBarcodeUnreadableNotIn)
                            if (MachineParams.Current.BarcodeSerialPort.IsEnabled && AutoRunSettings.Default.IsBottomBarcodeScannerEnabled1 && Customization.Current.IsBottomBarcodeUnreadableNotIn)
                            //20240429 启动底部条码枪选项分为1，2轨单独设置 【曹志鹏】 修改 End
                            {
                                //GlobalDataManager.Current.hasBottomBarcode = (GlobalDataManager.Current.Barcodes.Count - 1 > 0);

                                // 20241121 条码枪装机外条码处理对应前移(从AOI_REPAIR3D_2500W移植功能) 追加 Start 
                                // 启动软件第一块板子，检测和结果生成偶尔会慢，第二块板子后正常
                                if (Customization.Current.WaitBarcodeHandleOnStart != 0 && !Customization.Current.IsBarcodeScannerInMachine)
                                {
                                    Holly.Log.HlLogger.Write("HOLLY AOI ====> Customization.Current.WaitBarcodeHandleOnStart = " + Customization.Current.WaitBarcodeHandleOnStart);
                                    Stopwatch waitHandleBarcodeStopwatch = new Stopwatch();
                                    waitHandleBarcodeStopwatch.Start();
                                    while (GlobalDataManager.Current.InOutPCBs != 0)
                                    {
                                        if (waitHandleBarcodeStopwatch.ElapsedMilliseconds / 1000 > Customization.Current.WaitBarcodeHandleOnStart)
                                        {
                                            if (GlobalDataManager.Current.InOutPCBs != 0)
                                            {
                                                break;
                                            }
                                        }
                                        Thread.Sleep(100);
                                    }
                                    waitHandleBarcodeStopwatch.Stop();
                                    if (GlobalDataManager.Current.InOutPCBs == 0)
                                    {
                                        return ReadyState.Current;
                                    }
                                    string error = "检测结果生成时间异常，请退出自动运行";
                                    WaitVerify(m, error);
                                    return ExitState.Current;
                                }
                                else
                                // 20241121 条码枪装机外条码处理对应前移(从AOI_REPAIR3D_2500W移植功能) 追加 End 
                                {
                                    return ReadyState.Current;
                                }
                            }

                            if (AutoRunSettings.Default.IsOfflineMode && !Customization.Current.UseOfflineModeAsInlineMode && (AutoRunSettings.Default.AutoRunOfflineMode == (int)AutoRunOfflineMode.EntranceToEntrance || AutoRunSettings.Default.AutoRunOfflineMode == (int)AutoRunOfflineMode.PCBOutAndReturnMode || AutoRunSettings.Default.AutoRunOfflineMode == (int)AutoRunOfflineMode.ExitToExit))
                            {
                                return RemoveBoardState.Current;
                            }

                            //return ReadyState.Current;
                            //go to board in process directly
                            if (!MeshBufferManager.Current.HasFreeBuffer)// && (AutoRunSettings.Default.IsLocalCommit || AutoRunSettings.Default.IsLocalAndRepairCommit))
                            {
                                System.Threading.Thread.Sleep(50);
                                return ReadyState.Current;
                            }
                            else
                            {
                                return GoState.Current;
                            }

                        }
                        else
                        {
                            return RemoveBoardState.Current;
                        }
                    }
                }
                //}
                //catch (Exception ex)
                //{
                //    GlobalDataManager.Current.IsPLCError = true;
                //    Holly.Log.HlLogger.Write("HOLLY AOI =====> GoState Exception = " + ex.ToString());
                //    return DesyncState.Current;
                //}
            }

            // 20220803 PLC状态监控 追加 Start
            private bool IsHaveBoard(Machine m)
            {
                //Holly.Log.HlLogger.Write("HOLLY AOI ====> ImageAcquisitionMachine.IsHaveBoard");

                bool ret = true;

                InputStatusInline inputsInline = m.InputStatusInline;
                // 进板检测
                bool entrance = (inputsInline & InputStatusInline.BoardIn) != 0;
                // 同进同出不判断
                if (AutoRunSettings.Default.IsSyncBoardInOut)
                    entrance = false;
                // 减速检测
                bool deceleration = (inputsInline & InputStatusInline.SlowDown) != 0;
                // 停板检测
                bool boardStop = (inputsInline & InputStatusInline.Stopper) != 0;
                // 出板检测
                bool exit = (inputsInline & InputStatusInline.BoardOut) != 0;

                // 20221103 后机要板监控 追加 Start
                InputStatusInline2 inputsInline2 = m.InputStatusInline2;
                bool nextRequest = (inputsInline2 & InputStatusInline2.SMEMANextRequest) != 0;
                // 20221103 后机要板监控 追加 End

                if (!entrance && !deceleration && !boardStop && !exit)
                {
                    ret = false;
                }

                //Holly.Log.HlLogger.Write("HOLLY AOI ====> ImageAcquisitionMachine.IsHaveBoard entrance = " + entrance);
                //Holly.Log.HlLogger.Write("HOLLY AOI ====> ImageAcquisitionMachine.IsHaveBoard deceleration = " + deceleration);
                //Holly.Log.HlLogger.Write("HOLLY AOI ====> ImageAcquisitionMachine.IsHaveBoard boardStop = " + boardStop);
                //Holly.Log.HlLogger.Write("HOLLY AOI ====> ImageAcquisitionMachine.IsHaveBoard exit = " + exit);

                //Holly.Log.HlLogger.Write("HOLLY AOI ====> ImageAcquisitionMachine.IsHaveBoard ret = " + ret);

                return ret;
            }
            // 20220803 PLC状态监控 追加 End

            //20241206 AVI拍 拍照完成信号和出板信号 【徐明武】 追加  Start
            //注释：获取出板传感器信号,读取地址为1485中的值是否是256
            public static bool GetBoardOutSignal()
            {
                if (!Customization.Current.IsBoardoutCompleteMode2)
                    return false;

                try
                {
                    var m = App.Current.GetService<Machine>();
                    if (m == null)
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI ImageAcquisitionMachine GetBoardOutSignal m == null");
                        return false;
                    }

                    return m.GetBoardOutSignal();
                }
                catch (Exception ex)
                {
                    Holly.Log.HlLogger.Write("HOLLY AOI ImageAcquisitionMachine Exception:" + ex);
                }

                return false;
            }
            //20241206 AVI拍 拍照完成信号和出板信号 【徐明武】 追加  End

            // 20210622 相机头先复位 追加 Start
            public void LocateCamera(Machine m)
            {
                Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.LocateCamera");
                IBatchOperationInline opReset = m.CreateBatchOperationInline();
                IOperationResult opResetResult = null;
                opReset.ClearCommand();
                opReset.LocateLoader(GlobalDataManager.Current.LastPosition, GlobalDataManager.Current.ReleaseBoardPosition, false);
                opResetResult = opReset.Execute(MachineParams.Current.OperationStepTimeout);
                opResetResult.Wait();
            }
            // 20210622 相机头先复位 追加 End

            // 20200813 立讯MarkError报警 追加 Start
            private string[] HandleExtInfo(string extInfo)
            {
                string[] ret = { "", "" };
                string[] retTemp = extInfo.Split(',');

                ret[0] = retTemp[0];

                string retSub = "";
                for (int i = 1; i < retTemp.Count(); i++)
                {
                    retSub = retSub + retTemp[i];
                }
                ret[1] = retSub;

                return ret;
            }
            // 20200813 立讯MarkError报警 追加 End

            // 20200928 2台AOI对1台AOI 修改 Start
            private string GetRepairAlarmContent()
            {
                Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.GetRepairAlarmContent Start");
                string ret = "";

                Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.GetRepairAlarmContent IsShowRepairAlarm = " + Customization.Current.IsShowRepairAlarm);
                if (Customization.Current.IsShowRepairAlarm)
                {
                    List<string> pathList = FileUtils.GetFilePath(Customization.Current.ShowRepairAlarmDirectory);

                    Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.GetRepairAlarmContent Dir = " + Customization.Current.ShowRepairAlarmDirectory);
                    Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.GetRepairAlarmContent pathList.Count = " + pathList.Count);
                    if (pathList.Count > 0)
                    {
                        ret = FileUtils.GetFileContent(Customization.Current.ShowRepairAlarmDirectory, pathList[0]);

                        FileUtils.DelFile(Customization.Current.ShowRepairAlarmDirectory, pathList[0]);
                    }
                }

                Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.GetRepairAlarmContent End. ret = " + ret);
                return ret;
            }
            // 20200928 2台AOI对1台AOI 修改 End

            // 20200925 机内等待超时 追加 Start
            // 机内判定等待维修站确认结果
            private void ClearCentralControlFileForInMachineWaitRepairRet()
            {
                if (AutoRunSettings.Default.IsWaitRepairSendOKNG && !AutoRunSettings.Default.IsRepairControlNotWait)
                {
                    if (Customization.Current.CentralControlFileMode.IsEnabled)
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.ClearCentralControlFileForInMachineWaitRepairRet Start");

                        FileUtils.WaitForEmptyDirectory(AutoRunSettings.Default.CentralControlFileDirectory);

                        // 20210126 双面机机内合并发结果 追加 Start
                        FileUtils.WaitForEmptyDirectory(AutoRunSettings.Default.CentralControlFileDirectory);
                        // 20210126 双面机机内合并发结果 追加 End

                        Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.ClearCentralControlFileForInMachineWaitRepairRet End");
                    }
                }
            }
            // 20200925 机内等待超时 追加 End

            // 20200921 华贝检测结果取得 追加 Start
            private int GetCheckRouteResult()
            {
                int checkResult = 0;

                HeartBeatUtils heartBeat = new HeartBeatUtils(2);

                while (true)
                {
                    if (heartBeat.IsOutput())
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.GetCheckRouteResult curTime = " + DateTimeUtils.GetNow());
                    }

                    checkResult = DoubleSideDataControl.Current.CheckRouteResultValue;
                    if (checkResult != 0)
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.GetCheckRouteResult checkResult = " + checkResult);
                        break;
                    }

                    Thread.Sleep(200);
                }

                return checkResult;
            }
            // 20200921 华贝检测结果取得 追加 End

            // 20200909 数据上传异常需返回AOI机台停机报警 追加 Start
            public bool WaitVerify(Machine m, string error)
            {
                if (error.Equals(""))
                    return false;

                Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.WaitVerify error = " + error);
                try
                {
                    // 20230915 弹框提示使用WinForm 【刘亚杰】 修改 Start
                    #region 删除
                    //UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                    //    new Action(delegate ()
                    //    {
                    //        IBatchOperationInline op = m.CreateBatchOperationInline();
                    //        IOperationResult opResult = null;

                    //        op.ClearLampBlink();
                    //        op.SetRedAndBuzzer();
                    //        opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                    //        m.UpdateInline();
                    //        //20230717 log输出【ygs】 Start 
                    //        ExportLogOuputManager.Current.OuputLog(11, error);
                    //        //20230717 log输出【ygs】 End
                    //        IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                    //        messageManager.ShowError(error);
                    //        IBatchOperationInline op1 = m.CreateBatchOperationInline();
                    //        IOperationResult opResult1 = null;

                    //        op1.ClearCommand();
                    //        op1.ClearLampBuzzer();
                    //        op1.SetBuzzer(false);
                    //        opResult1 = op1.Execute(MachineParams.Current.OperationStepTimeout);
                    //        m.UpdateInline();
                    //    }));
                    #endregion

                    if (Customization.Current.IsAlarmUseProgress)
                    {
                        IBatchOperationInline op = m.CreateBatchOperationInline();
                        IOperationResult opResult = null;

                        // 20240406 启动屏幕录制程序 追加 Start                                                    
                        SocketScreenRecorder.Current.clientSendStart();
                        // 20240406 启动屏幕录制程序 追加 End

                        op.ClearLampBlink();
                        op.SetRedAndBuzzer();
                        opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                        m.UpdateInline();
                        //20230717 log输出【ygs】 Start 
                        ExportLogOuputManager.Current.OuputLog(11, error);
                        //20230717 log输出【ygs】 End
                        //IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                        //messageManager.ShowError(error);

                        MessageManagerForm.Message = error;

                        UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Background,
                        new Action(delegate ()
                        {
                            MessageManagerForm.getstatus().Show();
                        }));

                        while (true)
                        {
                            Thread.Sleep(200);
                            if (!MessageManagerForm.IsRun)
                                break;

                            if (!GlobalDataManager.Current.IsAutoRun)
                                break;
                            Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.WaitVerify Waitting ... MessageManagerForm.IsRun = " + MessageManagerForm.IsRun);
                        }


                        MessageManagerForm.getstatus().Close();
                        Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.WaitVerify Waitting ... MessageManagerForm. 关闭");
                        IBatchOperationInline op1 = m.CreateBatchOperationInline();
                        IOperationResult opResult1 = null;

                        op1.ClearCommand();
                        op1.ClearLampBuzzer();
                        op1.SetBuzzer(false);
                        opResult1 = op1.Execute(MachineParams.Current.OperationStepTimeout);
                        m.UpdateInline();
                    }
                    else
                    {
                        UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                        new Action(delegate ()
                        {
                            IBatchOperationInline op = m.CreateBatchOperationInline();
                            IOperationResult opResult = null;
                            Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.WaitVerify clientSendStart Start");
                            // 20240406 启动屏幕录制程序 追加 Start                                                    
                            SocketScreenRecorder.Current.clientSendStart();
                            // 20240406 启动屏幕录制程序 追加 End
                            Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.WaitVerify clientSendStart End");
                            // 20250116 常州理想报警设备状态上传 【刘红绅】追加 Start
                            if (Customization.Current.S7ReadRFID.IsEnabled)
                            {
                                ExportLiXiangShopfloorManager.Current.bool_Write("DB10002.5320.0", true);
                            }
                            // 20250116 常州理想报警设备状态上传 【刘红绅】追加 End
                            Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.WaitVerify ShowError Start");
                            op.ClearLampBlink();
                            op.SetRedAndBuzzer();
                            opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                            m.UpdateInline();
                            //20230717 log输出【ygs】 Start 
                            ExportLogOuputManager.Current.OuputLog(11, error);
                            //20230717 log输出【ygs】 End
                            //IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                            //messageManager.ShowError(error);
                           System.Windows.MessageBox.Show(error, "信息",System.Windows.MessageBoxButton.OK,System.Windows.MessageBoxImage.Information,
                               System.Windows.MessageBoxResult.OK,System.Windows.MessageBoxOptions.DefaultDesktopOnly);
                            IBatchOperationInline op1 = m.CreateBatchOperationInline();
                            IOperationResult opResult1 = null;

                            op1.ClearCommand();
                            op1.ClearLampBuzzer();
                            op1.SetBuzzer(false);
                            opResult1 = op1.Execute(MachineParams.Current.OperationStepTimeout);
                            m.UpdateInline();
                            // 20250116 常州理想报警设备状态上传 【刘红绅】追加 Start
                            if (Customization.Current.S7ReadRFID.IsEnabled)
                            {
                                ExportLiXiangShopfloorManager.Current.bool_Write("DB10002.5320.0", true);
                            }
                            // 20250116 常州理想报警设备状态上传 【刘红绅】追加 End
                            Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.WaitVerify ShowError End");
                        }));
                    }
                    // 20230915 弹框提示使用WinForm 【刘亚杰】 修改  End
                }
                catch (Exception ex)
                {
                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.WaitVerify Exception = " + ex);
                }

                return true;
            }
            // 20200909 数据上传异常需返回AOI机台停机报警 追加 End
            // 20230712 昆山仁宝AI停机【刘剑】 追加 Start
            public bool WaitVerifyForRenBao(Machine m, string error)
            {
                if (!Customization.Current.RenBao_KS.IsEnabled)
                {
                    return false;
                }
                if (string.IsNullOrEmpty(error))
                    return false;

                Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.WaitVerifyForRenBao error = " + error);
                try
                {
                    UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                        new Action(delegate ()
                        {
                            IBatchOperationInline op = m.CreateBatchOperationInline();
                            IOperationResult opResult = null;

                            op.ClearLampBlink();
                            if (!Customization.Current.RenBao_KS.IsBuzzerOff)
                            {
                                op.SetRedAndBuzzer();
                            }
                            else
                            {
                                op.SetRedLampOn();
                            }
                            opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                            m.UpdateInline();

                            // 20230731 昆山仁宝AI停机弹框修改【刘剑】 修改 Start
                            Message2 mes = new Message2(error);
                            mes.Show();
                            //IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                            //messageManager.ShowError(error);

                            //IBatchOperationInline op1 = m.CreateBatchOperationInline();
                            //IOperationResult opResult1 = null;

                            //op1.ClearCommand();
                            //op1.ClearLampBuzzer();
                            //op1.SetBuzzer(false);
                            //opResult1 = op1.Execute(MachineParams.Current.OperationStepTimeout);
                            //m.UpdateInline();
                            // 20230731 昆山仁宝AI停机弹框修改【刘剑】 修改 End
                            // 需要循环等待 拿到 restart文件 否则就停机不动
                            string station = LC.SN;
                            Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAccquisitionMachine.WaitVerifyForRenBao RenBao_KS 重启 start station=" + station);

                            while (true)
                            {
                                string type = "restart";

                                string dirNameReq = Customization.Current.RenBao_KS.ServerDirectory + "\\REQUEST" + "\\" + type.ToUpper();
                                string dirNameRes = Customization.Current.RenBao_KS.ServerDirectory + "\\RESPONSE" + "\\" + type.ToUpper();

                                // 根据station 去拿文件，拿到了就退出 报警；没拿到就继续
                                string fileFullName = FileUtils.GetFilePath2(dirNameReq, station);
                                Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAccquisitionMachine.WaitVerifyForRenBao RenBao_KS 重启  fileFullName=" + fileFullName);

                                if (!string.IsNullOrWhiteSpace(fileFullName))
                                {
                                    string content = FileUtils.GetFileContent(fileFullName);
                                    string[] fileNames = fileFullName.Split('\\');
                                    string fileName = fileNames[fileNames.Length - 1];
                                    string fileNameRes = fileName.Replace("request", "response");
                                    Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAccquisitionMachine.WaitVerifyForRenBao RenBao_KS 重启  fileNameReq=" + fileNameRes);
                                    Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAccquisitionMachine.WaitVerifyForRenBao RenBao_KS 重启  content=" + content);

                                    // RequestData.STATION_ID + "-" + type + "-response-" + nowDateTimeStr;
                                    FileUtils.CreateContentFile(dirNameRes, fileNameRes, content);

                                    // 20230731 昆山仁宝AI停机弹框修改【刘剑】 追加 Start

                                    IBatchOperationInline op1 = m.CreateBatchOperationInline();
                                    IOperationResult opResult1 = null;

                                    op1.ClearCommand();
                                    if (!Customization.Current.RenBao_KS.IsBuzzerOff)
                                    {
                                        op1.ClearLampBuzzer();
                                        op1.SetBuzzer(false);
                                    }
                                    else
                                    {
                                        op1.ClearLampBlink();
                                        op1.SetGreenLampOn();
                                    }
                                    opResult1 = op1.Execute(MachineParams.Current.OperationStepTimeout);
                                    m.UpdateInline();
                                    // 20230731 昆山仁宝AI停机弹框修改【刘剑】 追加 End
                                    break;
                                }
                                Thread.Sleep(100);
                            }
                            mes.Close();
                            Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAccquisitionMachine.WaitVerifyForRenBao RenBao_KS 重启 End station=" + station);
                        }));
                }
                catch (Exception ex)
                {
                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.WaitVerifyForRenBao Exception = " + ex);
                }

                return true;
            }
            // 20230712 昆山仁宝AI停机【刘剑】 追加 End
            // 20250115 常州理想进出站异常报警弹框显示更新 追加 Start
            public bool WaitVerifyWithYesNo(Machine m, string error, string yes, string no)
            {
                if (error.Equals(""))
                    return false;

                Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.WaitVerify error = " + error);
                bool result = true;
                try
                {

                    UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                    new Action(delegate ()
                    {
                        IBatchOperationInline op = m.CreateBatchOperationInline();
                        IOperationResult opResult = null;
                        Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.WaitVerify clientSendStart Start");
                        // 20240406 启动屏幕录制程序 追加 Start                                                    
                        SocketScreenRecorder.Current.clientSendStart();
                        // 20240406 启动屏幕录制程序 追加 End
                        Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.WaitVerify clientSendStart End");
                        Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.WaitVerify ShowError Start");
                        // 20250116 常州理想报警设备状态上传 【刘红绅】追加 Start
                        if (Customization.Current.S7ReadRFID.IsEnabled)
                        {
                            ExportLiXiangShopfloorManager.Current.bool_Write("DB10002.5320.0", true);
                        }
                        // 20250116 常州理想报警设备状态上传 【刘红绅】追加 End
                        op.ClearLampBlink();
                        op.SetRedAndBuzzer();
                        opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                        m.UpdateInline();
                        //20230717 log输出【ygs】 Start 
                        ExportLogOuputManager.Current.OuputLog(11, error);
                        //20230717 log输出【ygs】 End
                        MessageBoxWithYesNo messageDialog = new MessageBoxWithYesNo(error, yes, no);
                        messageDialog.ShowDialog();
                        IBatchOperationInline op1 = m.CreateBatchOperationInline();
                        IOperationResult opResult1 = null;

                        op1.ClearCommand();
                        op1.ClearLampBuzzer();
                        op1.SetBuzzer(false);
                        opResult1 = op1.Execute(MachineParams.Current.OperationStepTimeout);
                        m.UpdateInline();
                        if (messageDialog.DialogResult == true)
                        {
                            result = true;

                        }
                        else if (messageDialog.DialogResult == false)
                        {
                            result = false;
                        }
                        // 20250116 常州理想报警设备状态上传 【刘红绅】追加 Start
                        if (Customization.Current.S7ReadRFID.IsEnabled)
                        {
                            ExportLiXiangShopfloorManager.Current.bool_Write("DB10002.5320.0", false);
                        }
                        // 20250116 常州理想报警设备状态上传 【刘红绅】追加 End
                        Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.WaitVerify ShowError End");
                    }));
                }
                catch (Exception ex)
                {
                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.WaitVerify Exception = " + ex);
                }

                return result;
            }

            // 20250115 常州理想进出站异常报警弹框显示更新 追加 End

            // 20200829 主面生成空文件 追加 Start
            // 0：不生成 空文件
            // 1: 生成1个 空文件
            // 2: 生成2个 空文件
            private int GetCreateEmptyFileCount()
            {
                int ret = 0;

                if (AutoRunSettings2.Default.IsDoubleSideAOI)
                {
                    if (AutoRunSettings2.Default.IsCreateEmptyOnMasterSide)
                    {
                        if (AutoRunSettings2.Default.IsMaster)
                        {
                            ret = 2;
                        }
                        else
                        {
                            ret = 0;
                        }
                    }
                    else
                    {
                        ret = 1;
                    }
                }
                else
                {
                    ret = 1;
                }

                return ret;
            }
            // 20200829 主面生成空文件 追加 End

            // 20200415 富士康程序定时检测报警 追加 Start

            private static string GetFoxconnNotificationFileResult()
            {
                string fileContent = "";
                var hlaoiRoot = Environment.ExpandEnvironmentVariables("%HLAOI_ROOT%");
                fileContent = FileUtils.GetFileContent(hlaoiRoot, "foxconnNotificationHistory.txt");
                return fileContent;
            }

            private static void CreateFoxconnNotificationFile(String inspectionResult)
            {
                var hlaoiRoot = Environment.ExpandEnvironmentVariables("%HLAOI_ROOT%");
                FileUtils.CreateContentFile2(hlaoiRoot, "foxconnNotificationHistory.txt", inspectionResult);
            }

            private static void DeleteFoxconnNotificationFile()
            {
                var hlaoiRoot = Environment.ExpandEnvironmentVariables("%HLAOI_ROOT%");
                FileUtils.DelFile(hlaoiRoot, "foxconnNotificationHistory.txt");
            }
            private static void NotifyMessageBoxShow()
            {
                System.Windows.Application.Current.Dispatcher.Invoke(() =>
                {
                    InputBottomBarcodeDialog dialog = new InputBottomBarcodeDialog("请检查程序名称是否正确", "密码");
                    dialog.ShowDialog();
                });
            }
            // 20200415 富士康程序定时检测报警 追加 End

            // 20190915 出板延时修改 Start
            private void WaitForLastSendOKNGSignal()
            {
                Holly.Log.HlLogger.Write("HOLLY AOI ====> WaitForLastSendOKNGSignal Start = " + DateTimeUtils.GetNow(DateTimeUtils.DATETIME_FORMAT_FFF));
                Holly.Log.HlLogger.Write("HOLLY AOI ====> WaitForLastSendOKNGSignal LastOKNGSendTime = " + GlobalDataManager.Current.LastOKNGSendTime);
                // 20191113 出板延时不等待
                double needIntervalSeconds = 3.8;
                //double needIntervalSeconds = 0;

                DateTime dateTimeBefore = GlobalDataManager.Current.LastOKNGSendTime;
                DateTime dateTimeAfter = DateTimeUtils.GetNowDateTime();
                double currentInterval = DateTimeUtils.GetDiffSeconds(dateTimeBefore, dateTimeAfter);

                if (currentInterval < needIntervalSeconds)
                {
                    Double waitSeconds = needIntervalSeconds - currentInterval;
                    int waitMilliSeonds = (int)Math.Round(waitSeconds * 1000, 0);

                    DateTimeUtils.WaitForSettingSeconds(waitMilliSeonds);
                }
                Holly.Log.HlLogger.Write("HOLLY AOI ====> WaitForLastSendOKNGSignal End = " + DateTimeUtils.GetNow(DateTimeUtils.DATETIME_FORMAT_FFF));
            }
            // 20190915 出板延时修改 End

            private void DeleteCentralControlFile()
            {
                if (Customization.Current.CentralControlFileMode.IsEnabled)
                {
                    //生成文件模式
                    bool hasB2File = true;
                    while (hasB2File)
                    {
                        string pathB2 = GlobalDataManager.Current.GetFileName(AutoRunSettings.Default.CentralControlFileDirectory, "");
                        if (pathB2 == "")
                        {
                            hasB2File = false;
                        }
                        else
                        {
                            try
                            {
                                File.Delete(pathB2);
                            }
                            catch (Exception ex)
                            {
                            }
                        }
                    }
                }
                else
                {
                    try
                    {
                        RepairTempDB.RepairTempDBEntities ctxNew = RepairDBAccess.Current.GetRepairTempDBEntities();
                        var rc = (from r in ctxNew.RepairCentralControls where r.Station == LC.SN.ToUpper() select r).ToList();
                        foreach (var r in rc)
                        {
                            //r.StopFlag = -1;
                            //RepairTempDB.RepairCentralControl repair = ctxNew.GetObjectByKey(new System.Data.EntityKey("Entities.RepairCentralControls", "ID", id)) as SMTUFDB.SMTNGComponent;
                            ctxNew.DeleteObject(r);
                            ctxNew.SaveChanges();
                        }
                    }
                    catch (Exception ex)
                    {
                    }

                }
            }

            public State Visit(RemoveBoardState state, ImageAcquisitionMachine context)
            {
                Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Visit(RemoveBoardState)");

                if (this.IsRequestOne)
                    return ReadyState.Current;

                var m = context.GetMachine2();
                if (!m.Update())
                    return state;
                var inputs = m.CurrentInputs;

                var newState = ProcessButtons(state, inputs, context);

                if (newState != null)
                {
                    Holly.Log.HlLogger.Write("HOLLY AOI ==== > new state = " + newState);
                    return newState;
                }

                if (MachineParams.Current.IsInlineMode)
                {
                    if (!m.UpdateInline())
                        return state;

                    if ((MachineParams.Current.InlineMachine.RightToLeftWithoutChange && !AutoRunSettings.Default.IsOfflineMode && AutoRunSettings.Default.AutoRunOfflineMode != (int)AutoRunOfflineMode.ExitToExit) || (!MachineParams.Current.InlineMachine.RightToLeftWithoutChange && AutoRunSettings.Default.IsOfflineMode && AutoRunSettings.Default.AutoRunOfflineMode == (int)AutoRunOfflineMode.ExitToExit) || (!AutoRunSettings.Default.IsLeftToRight && AutoRunSettings.Default.IsOfflineMode && AutoRunSettings.Default.AutoRunOfflineMode == (int)AutoRunOfflineMode.EntranceToEntrance))
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI ==== > RemoveBoardState (m.InputStatusInline & InputStatusInline.BoardOut) = " + (m.InputStatusInline & InputStatusInline.BoardOut));
                        if ((m.InputStatusInline & InputStatusInline.BoardOut) == 0)
                        {
                            Holly.Log.HlLogger.Write("HOLLY AOI ==== > Go to PlaceBoardState");
                            return PlaceBoardState.Current;
                        }
                    }
                    else
                    {
                        if ((m.InputStatusInline & InputStatusInline.BoardIn) == 0)
                        {
                            Holly.Log.HlLogger.Write("HOLLY AOI ==== > (m.InputStatusInline & InputStatusInline.BoardIn)");
                            return PlaceBoardState.Current;
                        }
                    }
                }
                else
                {
                    if (!inputs.BoardSensor)
                    {
                        return PlaceBoardState.Current;
                    }
                }

                return state;
            }

            public State Visit(PlaceBoardState state, ImageAcquisitionMachine context)
            {
                Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Visit(PlaceBoardState)");

                var m = context.GetMachine2();
                if (!m.Update())
                    return state;
                var inputs = m.CurrentInputs;

                var newState = ProcessButtons(state, inputs, context);
                if (newState != null)
                    return newState;

                if (MachineParams.Current.IsInlineMode)
                {
                    if (!m.UpdateInline())
                        return state;

                    if ((MachineParams.Current.InlineMachine.RightToLeftWithoutChange && !AutoRunSettings.Default.IsOfflineMode && AutoRunSettings.Default.AutoRunOfflineMode != (int)AutoRunOfflineMode.ExitToExit) || (!MachineParams.Current.InlineMachine.RightToLeftWithoutChange && AutoRunSettings.Default.IsOfflineMode && AutoRunSettings.Default.AutoRunOfflineMode == (int)AutoRunOfflineMode.ExitToExit) || (!AutoRunSettings.Default.IsLeftToRight && AutoRunSettings.Default.IsOfflineMode && AutoRunSettings.Default.AutoRunOfflineMode == (int)AutoRunOfflineMode.EntranceToEntrance))
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI ==== > PlaceBoardState (m.InputStatusInline & InputStatusInline.BoardOut) = " + (m.InputStatusInline & InputStatusInline.BoardOut));
                        if ((m.InputStatusInline & InputStatusInline.BoardOut) != 0)
                        {
                            Holly.Log.HlLogger.Write("HOLLY AOI ==== > Go to ReadyState");
                            return ReadyState.Current;
                        }
                    }
                    else
                    {
                        if ((m.InputStatusInline & InputStatusInline.BoardIn) != 0)
                            return ReadyState.Current;
                    }
                }
                else
                {
                    if (inputs.SafeSensor && inputs.BoardSensor)
                    {
                        return ReadyState.Current;
                    }
                }

                return state;
            }

            // 20191105 飞安瑞 MES 追加 Start
            private void FeiAnRuiCheckBarcode(Machine m)
            {
                HeartBeatUtils heartBeat = new HeartBeatUtils(2);
                while (GlobalDataManager.Current.OnlineInspectBarcode == -1)
                {
                    Holly.Log.HlLogger.Write("HOLLY AOI ============> FeiAnRuinShopfloor CompleteProcessStatus Heart 2s ...... ");

                    if (GlobalDataManager.Current.OnlineInspectBarcode == 2)
                    {
                        UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                            new Action(
                                delegate ()
                                {
                                    IBatchOperationInline opFeiAnRuin = m.CreateBatchOperationInline();
                                    IOperationResult opFeiAnRuinResult = null;

                                    opFeiAnRuin.ClearLampBlink();
                                    opFeiAnRuin.SetRedAndBuzzer();
                                    opFeiAnRuinResult = opFeiAnRuin.Execute(MachineParams.Current.OperationStepTimeout);
                                    m.UpdateInline();
                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > FeiAnRuinShopfloor SetRedAndBuzzer");
                                    //20230717 log输出【ygs】 Start 
                                    ExportLogOuputManager.Current.OuputLog(11, "opFeiAnRuin Error");
                                    //20230717 log输出【ygs】 End
                                    IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                    messageManager.ShowError("opFeiAnRuin Error");
                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > FeiAnRuinShopfloor ShowErrorMessage");

                                    IBatchOperationInline op10 = m.CreateBatchOperationInline();
                                    IOperationResult opResult10 = null;

                                    op10.ClearCommand();
                                    op10.ClearLampBuzzer();
                                    op10.SetBuzzer(false);
                                    opResult10 = op10.Execute(MachineParams.Current.OperationStepTimeout);
                                    m.UpdateInline();
                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > FeiAnRuinShopfloor Reset");

                                }));
                        break;
                    }
                    if (GlobalDataManager.Current.OnlineInspectBarcode == 1)    //OK
                    {
                        break;
                    }

                    Thread.Sleep(100);
                }
                Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine GlobalDataManager.Current.OnlineInspectBarcode  = " + GlobalDataManager.Current.OnlineInspectBarcode.ToString());

            }
            // 20191105 飞安瑞 MES 追加 End

            // 20200519 讯芯2次修改 追加 Start
            private void XunxinCheckBarcode(Machine m)
            {
                Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.XunxinCheckBarcode Start");

                // 20200601 讯芯结果输出判定 追加 Start
                HeartBeatUtils heartBeatWaitResult = new HeartBeatUtils(2);
                while (!ExportXunxinNGInfoManager.Current.isHaveResult)
                {
                    if (heartBeatWaitResult.IsOutput())
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.XunxinCheckBarcode Wait Inspection Result 2s ...... ");
                    }
                    Thread.Sleep(100);
                }
                // 20200601 讯芯结果输出判定 追加 End

                Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.XunxinCheckBarcode mainBarcodeStatus = " + ExportXunxinNGInfoManager.Current.mainBarcodeStatus);

                HeartBeatUtils heartBeat = new HeartBeatUtils(2);
                while (ExportXunxinNGInfoManager.Current.mainBarcodeStatus == ExportXunxinNGInfoManager.BarcodeInit ||
                    ExportXunxinNGInfoManager.Current.mainBarcodeStatus == ExportXunxinNGInfoManager.BarcodeNotExist ||
                    ExportXunxinNGInfoManager.Current.mainBarcodeStatus == ExportXunxinNGInfoManager.BarcodeFileNotExist)
                {
                    if (heartBeat.IsOutput())
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.XunxinCheckBarcode CompleteProcessStatus Heart 2s ...... ");
                    }

                    if (ExportXunxinNGInfoManager.Current.mainBarcodeStatus == ExportXunxinNGInfoManager.BarcodeNotExist ||
                        ExportXunxinNGInfoManager.Current.mainBarcodeStatus == ExportXunxinNGInfoManager.BarcodeFileNotExist)
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.XunxinCheckBarcode BarcodeNotExist");

                        string errorMessage = "";
                        if (ExportXunxinNGInfoManager.Current.mainBarcodeStatus == ExportXunxinNGInfoManager.BarcodeNotExist)
                        {
                            errorMessage = "Not Read Barcode";
                        }
                        else
                        {
                            errorMessage = "Not Read Barcode File";
                        }

                        UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                            new Action(
                                delegate ()
                                {
                                    IBatchOperationInline opFeiAnRuin = m.CreateBatchOperationInline();
                                    IOperationResult opFeiAnRuinResult = null;

                                    opFeiAnRuin.ClearLampBlink();
                                    opFeiAnRuin.SetRedAndBuzzer();
                                    opFeiAnRuinResult = opFeiAnRuin.Execute(MachineParams.Current.OperationStepTimeout);
                                    m.UpdateInline();
                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.XunxinCheckBarcode SetRedAndBuzzer");

                                    IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                    //messageManager.ShowError("Not Read Barcode");
                                    messageManager.ShowError(errorMessage);
                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.XunxinCheckBarcode ShowErrorMessage");

                                    IBatchOperationInline op10 = m.CreateBatchOperationInline();
                                    IOperationResult opResult10 = null;

                                    op10.ClearCommand();
                                    op10.ClearLampBuzzer();
                                    op10.SetBuzzer(false);
                                    opResult10 = op10.Execute(MachineParams.Current.OperationStepTimeout);
                                    m.UpdateInline();
                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.XunxinCheckBarcode Reset");

                                }));
                        break;
                    }
                    if (ExportXunxinNGInfoManager.Current.mainBarcodeStatus == ExportXunxinNGInfoManager.BarcodeExist)    //OK
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.XunxinCheckBarcode BarcodeExist");
                        break;
                    }

                    Thread.Sleep(100);
                }

                Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.XunxinCheckBarcode End");
            }
            // 20200519 讯芯2次修改 追加 End

            // 20201030 德斯倍Map功能 追加 Start
            private void DesibeiCheckBarcode(Machine m)
            {
                Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.DesibeiCheckBarcode Start");

                HeartBeatUtils heartBeatWaitResult = new HeartBeatUtils(2);
                // 等待图像处理完成
                while (!ExportDesibeiShopfloorManager.Current.isHaveResult)
                {
                    if (heartBeatWaitResult.IsOutput())
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.DesibeiCheckBarcode Wait Inspection Result 2s ...... ");
                    }
                    Thread.Sleep(100);
                }

                Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.DesibeiCheckBarcode mainBarcodeStatus = " + ExportDesibeiShopfloorManager.Current.mainBarcodeStatus);

                // 处理结果 成功、条码不存在、回传文件出错
                HeartBeatUtils heartBeat = new HeartBeatUtils(2);
                while (ExportDesibeiShopfloorManager.Current.mainBarcodeStatus == ExportDesibeiShopfloorManager.BarcodeExist ||
                    ExportDesibeiShopfloorManager.Current.mainBarcodeStatus == ExportDesibeiShopfloorManager.BarcodeNotExist ||
                    ExportDesibeiShopfloorManager.Current.mainBarcodeStatus == ExportDesibeiShopfloorManager.MapFileError)
                {
                    if (heartBeat.IsOutput())
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.DesibeiCheckBarcode CompleteProcessStatus Heart 2s ...... ");
                    }

                    if (ExportDesibeiShopfloorManager.Current.mainBarcodeStatus == ExportDesibeiShopfloorManager.BarcodeNotExist ||
                        ExportDesibeiShopfloorManager.Current.mainBarcodeStatus == ExportDesibeiShopfloorManager.MapFileError)
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.DesibeiCheckBarcode BarcodeNotExist");

                        UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                            new Action(
                                delegate ()
                                {
                                    IBatchOperationInline opDesibei = m.CreateBatchOperationInline();
                                    IOperationResult opDesibeiResult = null;
                                    opDesibei.ClearLampBlink();
                                    opDesibei.SetRedAndBuzzer();
                                    opDesibeiResult = opDesibei.Execute(MachineParams.Current.OperationStepTimeout);
                                    m.UpdateInline();
                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.DesibeiCheckBarcode SetRedAndBuzzer");

                                    IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                    messageManager.ShowError(ExportDesibeiShopfloorManager.Current.ExportFileErr);
                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.DesibeiCheckBarcode ShowErrorMessage");

                                    IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                    IOperationResult opResult2 = null;
                                    op2.SetGreenLampOn();
                                    opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                    opResult2.Wait();

                                    IBatchOperationInline op3 = m.CreateBatchOperationInline();
                                    IOperationResult opResult3 = null;
                                    op3.SetBuzzer(false);
                                    opResult3 = op3.Execute(MachineParams.Current.OperationStepTimeout);
                                    opResult3.Wait();

                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.DesibeiCheckBarcode Reset");

                                }));
                        break;
                    }
                    if (ExportDesibeiShopfloorManager.Current.mainBarcodeStatus == ExportDesibeiShopfloorManager.BarcodeExist)    //OK
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.DesibeiCheckBarcode BarcodeExist");
                        break;
                    }

                    Thread.Sleep(100);
                }

                Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.DesibeiCheckBarcode End");
            }
            // 20201030 德斯倍Map功能 追加 End

            // 20201112 移远(佳士达)MES 追加 Start
            private void QisdaCheckBarcode(Machine m)
            {
                Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.QisdaCheckBarcode Start");

                HeartBeatUtils heartBeatWaitResult = new HeartBeatUtils(2);
                // 等待检测状态更新完成
                while (!ExportQisdaShopfloorManager.Current.isHaveResult)
                {
                    if (heartBeatWaitResult.IsOutput())
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.QisdaCheckBarcode Wait Inspection Result 2s ...... ");
                    }
                    Thread.Sleep(100);
                }

                Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.QisdaCheckBarcode mainBarcodeStatus = " + ExportQisdaShopfloorManager.Current.mainBarcodeStatus);

                // 处理结果 成功、条码不存在、出错
                HeartBeatUtils heartBeat = new HeartBeatUtils(2);
                while (ExportQisdaShopfloorManager.Current.mainBarcodeStatus == ExportQisdaShopfloorManager.BarcodeExist ||
                    ExportQisdaShopfloorManager.Current.mainBarcodeStatus == ExportQisdaShopfloorManager.BarcodeNotExist ||
                    ExportQisdaShopfloorManager.Current.mainBarcodeStatus == ExportQisdaShopfloorManager.hasError)
                {
                    if (heartBeat.IsOutput())
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.QisdaCheckBarcode CompleteProcessStatus Heart 2s ...... ");
                    }

                    if (ExportQisdaShopfloorManager.Current.mainBarcodeStatus == ExportQisdaShopfloorManager.BarcodeNotExist ||
                        ExportQisdaShopfloorManager.Current.mainBarcodeStatus == ExportQisdaShopfloorManager.hasError)
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.QisdaCheckBarcode BarcodeNotExist");

                        UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                            new Action(
                                delegate ()
                                {
                                    IBatchOperationInline opQisda = m.CreateBatchOperationInline();
                                    IOperationResult opQisdaResult = null;
                                    opQisda.ClearLampBlink();
                                    opQisda.SetRedAndBuzzer();
                                    opQisdaResult = opQisda.Execute(MachineParams.Current.OperationStepTimeout);
                                    m.UpdateInline();
                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.QisdaCheckBarcode SetRedAndBuzzer");

                                    IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                    messageManager.ShowError(ExportQisdaShopfloorManager.Current.ExportFileErr);
                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.QisdaCheckBarcode ShowErrorMessage");

                                    IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                    IOperationResult opResult2 = null;
                                    op2.SetGreenLampOn();
                                    opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                    opResult2.Wait();

                                    IBatchOperationInline op3 = m.CreateBatchOperationInline();
                                    IOperationResult opResult3 = null;
                                    op3.SetBuzzer(false);
                                    opResult3 = op3.Execute(MachineParams.Current.OperationStepTimeout);
                                    opResult3.Wait();

                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.QisdaCheckBarcode Reset");

                                }));
                        break;
                    }
                    if (ExportQisdaShopfloorManager.Current.mainBarcodeStatus == ExportQisdaShopfloorManager.BarcodeExist)    //OK
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.QisdaCheckBarcode BarcodeExist");
                        break;
                    }

                    Thread.Sleep(100);
                }

                Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.QisdaCheckBarcode End");
            }
            // 20201112 移远(佳士达)MES 追加 End

            // 20210312 信维MES 追加 Start
            private void XinWeiCheckBarcode(Machine m)
            {
                Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.XinWeiCheckBarcode Start");

                HeartBeatUtils heartBeatWaitResult = new HeartBeatUtils(2);
                // 等待检测状态更新完成
                while (!ExportXinWeiShopfloorManager.Current.isHaveResult)
                {
                    if (heartBeatWaitResult.IsOutput())
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.XinWeiCheckBarcode Wait Inspection Result 2s ...... ");
                    }
                    Thread.Sleep(100);
                }

                Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.XinWeiCheckBarcode mainBarcodeStatus = " + ExportXinWeiShopfloorManager.Current.mainBarcodeStatus);

                // 处理结果 成功、条码不存在、出错
                HeartBeatUtils heartBeat = new HeartBeatUtils(2);
                while (ExportXinWeiShopfloorManager.Current.mainBarcodeStatus == ExportXinWeiShopfloorManager.BarcodeExist ||
                    ExportXinWeiShopfloorManager.Current.mainBarcodeStatus == ExportXinWeiShopfloorManager.BarcodeNotExist ||
                    ExportXinWeiShopfloorManager.Current.mainBarcodeStatus == ExportXinWeiShopfloorManager.hasError)
                {
                    if (heartBeat.IsOutput())
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.XinWeiCheckBarcode CompleteProcessStatus Heart 2s ...... ");
                    }

                    if (ExportXinWeiShopfloorManager.Current.mainBarcodeStatus == ExportXinWeiShopfloorManager.BarcodeNotExist ||
                        ExportXinWeiShopfloorManager.Current.mainBarcodeStatus == ExportXinWeiShopfloorManager.hasError)
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.XinWeiCheckBarcode BarcodeNotExist");

                        UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                            new Action(
                                delegate ()
                                {
                                    IBatchOperationInline opQisda = m.CreateBatchOperationInline();
                                    IOperationResult opQisdaResult = null;
                                    opQisda.ClearLampBlink();
                                    opQisda.SetRedAndBuzzer();
                                    opQisdaResult = opQisda.Execute(MachineParams.Current.OperationStepTimeout);
                                    m.UpdateInline();
                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.XinWeiCheckBarcode SetRedAndBuzzer");

                                    IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                                    messageManager.ShowError(ExportXinWeiShopfloorManager.Current.ExportFileErr);
                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.XinWeiCheckBarcode ShowErrorMessage");

                                    IBatchOperationInline op2 = m.CreateBatchOperationInline();
                                    IOperationResult opResult2 = null;
                                    op2.SetGreenLampOn();
                                    opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                                    opResult2.Wait();

                                    IBatchOperationInline op3 = m.CreateBatchOperationInline();
                                    IOperationResult opResult3 = null;
                                    op3.SetBuzzer(false);
                                    opResult3 = op3.Execute(MachineParams.Current.OperationStepTimeout);
                                    opResult3.Wait();

                                    Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.XinWeiCheckBarcode Reset");

                                }));
                        break;
                    }
                    if (ExportXinWeiShopfloorManager.Current.mainBarcodeStatus == ExportXinWeiShopfloorManager.BarcodeExist)    //OK
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.XinWeiCheckBarcode BarcodeExist");
                        break;
                    }

                    Thread.Sleep(100);
                }

                Holly.Log.HlLogger.Write("HOLLY AOI ===== > ImageAcquisitionMachine.XinWeiCheckBarcode End");
            }
            // 20210312 信维MES 追加 End
        }

        sealed class StateEnterVisitor : IStateVisitor<ImageAcquisitionMachine, State>
        {
            public static readonly StateEnterVisitor Current = new StateEnterVisitor();

            public State Visit(InitialState state, ImageAcquisitionMachine context)
            {
                return state;
            }

            public State Visit(ExitState state, ImageAcquisitionMachine context)
            {
                return state;
            }

            public State Visit(DesyncState state, ImageAcquisitionMachine context)
            {
                if (UserSettings.AutoRunSettings.Default.IsBuzzerAlarmEnabled)
                {
                    var m = context.GetMachine2();
                    if (MachineParams.Current.IsInlineMode)
                    {
                        //IBatchOperationInline op = m.CreateBatchOperationInline();
                        //IOperationResult opResult = null;
                        //op.ClearLampBlink();
                        //op.SetRedAndBuzzer();
                        //opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
                        //opResult.Wait();

                        //UIThreadDispatcher.Instance.Invoke(System.Windows.Threading.DispatcherPriority.Normal,
                        //     new Action(
                        //         delegate()
                        //         {
                        //             IMessageManager messageManager = App.Current.GetService<IMessageManager>();
                        //             messageManager.ShowError(Lang.UI.UI_Status_Error);
                        //         }));

                        //IBatchOperationInline op2 = m.CreateBatchOperationInline();
                        //IOperationResult opResult2 = null;

                        //op2.SetBuzzer(false);
                        //opResult2 = op2.Execute(MachineParams.Current.OperationStepTimeout);
                        //opResult2.Wait();
                    }
                    else
                    {
                        m.Beep(1000);
                    }
                }

                return state;
            }

            public State Visit(ResetState state, ImageAcquisitionMachine context)
            {
                return state;
            }

            public State Visit(ReadyState state, ImageAcquisitionMachine context)
            {
                return state;
            }

            public State Visit(GoState state, ImageAcquisitionMachine context)
            {
                if (UserSettings.AutoRunSettings.Default.IsBuzzerAlarmEnabled)
                {
                    if (!MachineParams.Current.IsInlineMode)
                    {
                        context.GetMachine2().Beep(100);
                    }
                }

                return state;
            }

            public State Visit(RemoveBoardState state, ImageAcquisitionMachine context)
            {
                if (UserSettings.AutoRunSettings.Default.IsBuzzerAlarmEnabled)
                {
                    if (!MachineParams.Current.IsInlineMode)
                    {
                        context.GetMachine2().Beep(100);
                    }
                }

                return state;
            }


            public State Visit(PlaceBoardState state, ImageAcquisitionMachine context)
            {
                return state;
            }
        }

        sealed class StateExitVisitor : IStateVisitor<ImageAcquisitionMachine, State>
        {
            public static readonly StateExitVisitor Current = new StateExitVisitor();

            public State Visit(InitialState state, ImageAcquisitionMachine context)
            {
                return state;
            }

            public State Visit(ExitState state, ImageAcquisitionMachine context)
            {
                return state;
            }

            public State Visit(DesyncState state, ImageAcquisitionMachine context)
            {
                return state;
            }

            public State Visit(ResetState state, ImageAcquisitionMachine context)
            {
                return state;
            }

            public State Visit(ReadyState state, ImageAcquisitionMachine context)
            {
                return state;
            }

            public State Visit(GoState state, ImageAcquisitionMachine context)
            {
                return state;
            }

            public State Visit(RemoveBoardState state, ImageAcquisitionMachine context)
            {
                return state;
            }


            public State Visit(PlaceBoardState state, ImageAcquisitionMachine context)
            {
                return state;
            }
        }

        sealed class StatusVisitor : IStateVisitor<string, string>
        {
            public static readonly StatusVisitor Current = new StatusVisitor();
            public string Visit(InitialState state, string context)
            {
                return string.Empty;
            }

            public string Visit(ExitState state, string context)
            {
                //! fix me
                return string.Empty;
            }

            public string Visit(DesyncState state, string context)
            {
                if (MachineParams.Current.IsInlineMode)
                {
                    var m = App.Current.GetService<Machine>();
                    m.UpdateInline();
                    if (m.CurrentInputs.EmergencyButton)
                    {
                        //ExportEquipmentRunStatusManager.Current.Export("Alarm", Lang.UI.UI_Error_Emergency);
                        return Lang.UI.UI_Error_Emergency;
                    }
                    if (m.CurrentInputs.SafeSensor)
                    {
                        //ExportEquipmentRunStatusManager.Current.Export("Alarm", Lang.UI.UI_Status_DoorOpened);
                        return Lang.UI.UI_Status_DoorOpened;
                    }
                    if ((m.CommandStatusInline & CommandStatusInline.TimeOut) != 0)
                    {
                        //ExportEquipmentRunStatusManager.Current.Export("Alarm", Lang.UI.UI_Label_Timeout);
                        return Lang.UI.UI_Label_Timeout;
                    }
                    if ((m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
                    {
                        //ExportEquipmentRunStatusManager.Current.Export("Alarm", Lang.UI.UI_Label_TwoPCBInside);
                        return Lang.UI.UI_Label_TwoPCBInside;
                    }
                    if ((m.InputStatusInline & InputStatusInline.AirPressureSwitch) == 0)
                    {
                        //return Lang.UI.UI_Status_AirPressureWarning;
                    }
                    //ExportEquipmentRunStatusManager.Current.Export("Alarm", Lang.UI.UI_Status_Error);
                    return Lang.UI.UI_Status_Error;
                }
                else
                {
                    //ExportEquipmentRunStatusManager.Current.Export("Alarm", Lang.UI.UI_Status_Error);
                    return Lang.UI.UI_Status_Error;
                }
            }

            public string Visit(ResetState state, string context)
            {
                return Lang.UI.UI_Status_Reset;
            }

            public string Visit(ReadyState state, string context)
            {
                return Lang.UI.UI_Status_Ready;
            }

            public string Visit(GoState state, string context)
            {
                return Lang.UI.UI_Status_Go;
            }

            public string Visit(RemoveBoardState state, string context)
            {
                return Lang.UI.UI_Status_WaitPCBOut;
            }

            public string Visit(PlaceBoardState state, string context)
            {
                return Lang.UI.UI_Status_WaitPCBIn;
            }
        }

        public class SnapshotPath
        {
            public SnapshotPath(ushort snapshotType, int x, int y)
            {
                this.SnapshotType = snapshotType;
                this.X = x;
                this.Y = y;
            }
            public ushort SnapshotType;
            public int X;
            public int Y;

            public int2 Position
            {
                get
                {
                    return new int2(this.X, this.Y);
                }
            }
        }

        static SnapshotPath[] CalculateSnapshotPath(BlockPath blockPath, Length2 boardOrigin, Length2 boardSize, string snapshotRow)
        {
            var mParams = MachineParams.Current;
            int2 blockSize = mParams.BlockSize.ToPlugs();

            int2 origin = mParams.OriginPosition.ToPlugs();
            var boardOriginPoint = Length2.Min(boardOrigin, mParams.MaxBoardSize).ToPlugs();

            if (MachineParams.Current.IsInlineMode && !MachineParams.Current.InlineMachine.LeftToRight)
            {
                origin += boardOriginPoint * new int2(-1, -1);
            }
            else
            {
                origin += boardOriginPoint * new int2(1, -1);
            }

            var path = new SnapshotPath[blockPath.Blocks];

            //double2 hMovementScale = mParams.HorizontalMovementScale;
            //double2 vMovementScale = mParams.VerticalMovementScale;

            int index = 0;
            BlockPath.BlockPoint? prevBlock = null;

            //20241118 停拍使用标定文件计算相机走位 【史彦洋】 修改 Start
            //foreach (BlockPath.BlockPoint pt in blockPath.BlockPoints)
            //{
            //    int x = pt.Column;
            //    int y = pt.Row;

            //    //跳行拍
            //    if (snapshotRow != string.Empty)
            //    {
            //        if (!snapshotRow.Contains((y + 1).ToString()))
            //        {
            //            continue;
            //        }
            //    }

            //    int xplugs = x * blockSize.X;
            //    int yplugs = y * blockSize.Y;

            //    //偏移量
            //    KeyValuePair<int, decimal>[] lxoffsets = null;
            //    if (mParams.LXMappings != null)
            //    {
            //        decimal minLength = Math.Abs(boardSize.X.Value - mParams.LXMappings[0].Key);
            //        lxoffsets = mParams.LXMappings[0].Value;
            //        foreach (KeyValuePair<int, KeyValuePair<int, decimal>[]> pair in mParams.LXMappings)
            //        {
            //            if (Math.Abs(boardSize.X.Value - pair.Key) < minLength)
            //            {
            //                minLength = Math.Abs(boardSize.X.Value - pair.Key);
            //                lxoffsets = pair.Value;
            //            }
            //        }
            //    }
            //    else if (mParams.LXOffsets != null)
            //    {
            //        lxoffsets = mParams.LXOffsets;
            //    }

            //    if (lxoffsets != null)
            //    {
            //        foreach (KeyValuePair<int, decimal> pair in lxoffsets)
            //        {
            //            if (y + 1 == pair.Key)
            //            {
            //                Length offset = new Length(pair.Value, LengthUnit.Millimeter);
            //                int offsetX = offset.ToPlugs();
            //                xplugs += offsetX;
            //            }
            //        }
            //    }

            //    if (mParams.LYOffsets != null)
            //    {
            //        foreach (KeyValuePair<int, decimal> pair in mParams.LYOffsets)
            //        {
            //            if (y + 1 == pair.Key)
            //            {
            //                Length offset = new Length(pair.Value, LengthUnit.Millimeter);
            //                int offsetY = offset.ToPlugs();
            //                yplugs += offsetY;
            //            }
            //        }
            //    }

            //    //每个视野的偏移量
            //    KeyValuePair<int2, decimal2>[] offlineoffsets = null;
            //    if (mParams.OfflineMappings != null)
            //    {
            //        decimal minLength = Math.Abs(boardSize.X.Value - mParams.OfflineMappings[0].Key);
            //        offlineoffsets = mParams.OfflineMappings[0].Value;
            //        foreach (KeyValuePair<int, KeyValuePair<int2, decimal2>[]> pair in mParams.OfflineMappings)
            //        {
            //            if (Math.Abs(boardSize.X.Value - pair.Key) < minLength)
            //            {
            //                minLength = Math.Abs(boardSize.X.Value - pair.Key);
            //                offlineoffsets = pair.Value;
            //            }
            //        }
            //    }
            //    else if (mParams.OfflineOffsets != null)
            //    {
            //        offlineoffsets = mParams.OfflineOffsets;
            //    }


            //    if (offlineoffsets != null)
            //    {
            //        foreach (KeyValuePair<int2, decimal2> pair in offlineoffsets)
            //        {
            //            if (y + 1 == pair.Key.X && x + 1 == pair.Key.Y)
            //            {
            //                decimal2 offset = pair.Value;
            //                Length offsetX = new Length(pair.Value.X, LengthUnit.Millimeter);
            //                xplugs += offsetX.ToPlugs();
            //                Length offsetY = new Length(pair.Value.Y, LengthUnit.Millimeter);
            //                yplugs += offsetY.ToPlugs();
            //            }
            //        }
            //    }

            //    if (prevBlock.HasValue)
            //    {
            //        if (prevBlock.Value.Column > pt.Column)
            //        {
            //            xplugs += mParams.BlockShift.X.ToPlugs();
            //        }
            //        else if ((prevBlock.Value.Column == pt.Column) && (pt.Column == 0))
            //        {
            //            xplugs += mParams.BlockShift.X.ToPlugs();
            //        }
            //    }

            //    int2 plugs = new int2(0, 0);
            //    int row = 1;
            //    if (MachineParams.Current.SerialPort.IsHuichuan && y != 0)
            //    {
            //        row = -1;
            //    }
            //    if (MachineParams.Current.IsInlineMode && !MachineParams.Current.InlineMachine.LeftToRight)
            //    {
            //        plugs = new int2(-xplugs, -yplugs * row) + origin;
            //    }
            //    else
            //    {
            //        plugs = new int2(xplugs, -yplugs * row) + origin;
            //    }

            //    plugs = mParams.CalibratePlugs(plugs);

            //    path[index++] = new SnapshotPath(blockPath.SnapshotType, plugs.X, plugs.Y);

            //    prevBlock = pt;
            //}

            //原版
            string holly_root = System.Environment.GetEnvironmentVariable("hlaoi_root");
            string xmlFilePath = Path.Combine(holly_root, "RoughCalib.xml");
            bool fileExists = File.Exists(xmlFilePath);
            if (!Customization.Current.IsUseCalib || (Customization.Current.IsUseCalib && !fileExists))
            {
                foreach (BlockPath.BlockPoint pt in blockPath.BlockPoints)
                {
                    int x = pt.Column;
                    int y = pt.Row;

                    //跳行拍
                    if (snapshotRow != string.Empty)
                    {
                        if (!snapshotRow.Contains((y + 1).ToString()))
                        {
                            continue;
                        }
                    }

                    int xplugs = x * blockSize.X;
                    int yplugs = y * blockSize.Y;

                    //偏移量
                    KeyValuePair<int, decimal>[] lxoffsets = null;
                    if (mParams.LXMappings != null)
                    {
                        decimal minLength = Math.Abs(boardSize.X.Value - mParams.LXMappings[0].Key);
                        lxoffsets = mParams.LXMappings[0].Value;
                        foreach (KeyValuePair<int, KeyValuePair<int, decimal>[]> pair in mParams.LXMappings)
                        {
                            if (Math.Abs(boardSize.X.Value - pair.Key) < minLength)
                            {
                                minLength = Math.Abs(boardSize.X.Value - pair.Key);
                                lxoffsets = pair.Value;
                            }
                        }
                    }
                    else if (mParams.LXOffsets != null)
                    {
                        lxoffsets = mParams.LXOffsets;
                    }

                    if (lxoffsets != null)
                    {
                        foreach (KeyValuePair<int, decimal> pair in lxoffsets)
                        {
                            if (y + 1 == pair.Key)
                            {
                                Length offset = new Length(pair.Value, LengthUnit.Millimeter);
                                int offsetX = offset.ToPlugs();
                                xplugs += offsetX;
                            }
                        }
                    }

                    if (mParams.LYOffsets != null)
                    {
                        foreach (KeyValuePair<int, decimal> pair in mParams.LYOffsets)
                        {
                            if (y + 1 == pair.Key)
                            {
                                Length offset = new Length(pair.Value, LengthUnit.Millimeter);
                                int offsetY = offset.ToPlugs();
                                yplugs += offsetY;
                            }
                        }
                    }

                    //每个视野的偏移量
                    KeyValuePair<int2, decimal2>[] offlineoffsets = null;
                    if (mParams.OfflineMappings != null)
                    {
                        decimal minLength = Math.Abs(boardSize.X.Value - mParams.OfflineMappings[0].Key);
                        offlineoffsets = mParams.OfflineMappings[0].Value;
                        foreach (KeyValuePair<int, KeyValuePair<int2, decimal2>[]> pair in mParams.OfflineMappings)
                        {
                            if (Math.Abs(boardSize.X.Value - pair.Key) < minLength)
                            {
                                minLength = Math.Abs(boardSize.X.Value - pair.Key);
                                offlineoffsets = pair.Value;
                            }
                        }
                    }
                    else if (mParams.OfflineOffsets != null)
                    {
                        offlineoffsets = mParams.OfflineOffsets;
                    }


                    if (offlineoffsets != null)
                    {
                        foreach (KeyValuePair<int2, decimal2> pair in offlineoffsets)
                        {
                            if (y + 1 == pair.Key.X && x + 1 == pair.Key.Y)
                            {
                                decimal2 offset = pair.Value;
                                Length offsetX = new Length(pair.Value.X, LengthUnit.Millimeter);
                                xplugs += offsetX.ToPlugs();
                                Length offsetY = new Length(pair.Value.Y, LengthUnit.Millimeter);
                                yplugs += offsetY.ToPlugs();
                            }
                        }
                    }

                    if (prevBlock.HasValue)
                    {
                        if (prevBlock.Value.Column > pt.Column)
                        {
                            xplugs += mParams.BlockShift.X.ToPlugs();
                        }
                        else if ((prevBlock.Value.Column == pt.Column) && (pt.Column == 0))
                        {
                            xplugs += mParams.BlockShift.X.ToPlugs();
                        }
                    }

                    int2 plugs = new int2(0, 0);
                    int row = 1;
                    if (MachineParams.Current.SerialPort.IsHuichuan && y != 0)
                    {
                        row = -1;
                    }
                    if (MachineParams.Current.IsInlineMode && !MachineParams.Current.InlineMachine.LeftToRight)
                    {
                        plugs = new int2(-xplugs, -yplugs * row) + origin;
                    }
                    else
                    {
                        plugs = new int2(xplugs, -yplugs * row) + origin;
                    }

                    plugs = mParams.CalibratePlugs(plugs);

                    path[index++] = new SnapshotPath(blockPath.SnapshotType, plugs.X, plugs.Y);

                    prevBlock = pt;
                }
            }
            //使用标定文件
            else
            {
                CoarseCalibResult biaodinresult = new CoarseCalibResult();

                biaodinresult.LoadFromXml(holly_root + "\\RoughCalib.xml");

                Trace.WriteLine("使用标定文件进行拍照");

                foreach (BlockPath.BlockPoint pt in blockPath.BlockPoints)
                {
                    int x = pt.Column;
                    int y = pt.Row;

                    //跳行拍
                    if (snapshotRow != string.Empty)
                    {
                        if (!snapshotRow.Contains((y + 1).ToString()))
                        {
                            continue;
                        }
                    }

                    double xplugs = x * blockSize.X;
                    double yplugs = y * blockSize.Y;

                    //偏移量
                    KeyValuePair<int, decimal>[] lxoffsets = null;
                    if (mParams.LXMappings != null)
                    {
                        decimal minLength = Math.Abs(boardSize.X.Value - mParams.LXMappings[0].Key);
                        lxoffsets = mParams.LXMappings[0].Value;
                        foreach (KeyValuePair<int, KeyValuePair<int, decimal>[]> pair in mParams.LXMappings)
                        {
                            if (Math.Abs(boardSize.X.Value - pair.Key) < minLength)
                            {
                                minLength = Math.Abs(boardSize.X.Value - pair.Key);
                                lxoffsets = pair.Value;
                            }
                        }
                    }
                    else if (mParams.LXOffsets != null)
                    {
                        lxoffsets = mParams.LXOffsets;
                    }

                    if (lxoffsets != null)
                    {
                        foreach (KeyValuePair<int, decimal> pair in lxoffsets)
                        {
                            if (y + 1 == pair.Key)
                            {
                                Length offset = new Length(pair.Value, LengthUnit.Millimeter);
                                int offsetX = offset.ToPlugs();
                                xplugs += offsetX;
                            }
                        }
                    }

                    if (mParams.LYOffsets != null)
                    {
                        foreach (KeyValuePair<int, decimal> pair in mParams.LYOffsets)
                        {
                            if (y + 1 == pair.Key)
                            {
                                Length offset = new Length(pair.Value, LengthUnit.Millimeter);
                                int offsetY = offset.ToPlugs();
                                yplugs += offsetY;
                            }
                        }
                    }

                    //每个视野的偏移量
                    KeyValuePair<int2, decimal2>[] offlineoffsets = null;
                    if (mParams.OfflineMappings != null)
                    {
                        decimal minLength = Math.Abs(boardSize.X.Value - mParams.OfflineMappings[0].Key);
                        offlineoffsets = mParams.OfflineMappings[0].Value;
                        foreach (KeyValuePair<int, KeyValuePair<int2, decimal2>[]> pair in mParams.OfflineMappings)
                        {
                            if (Math.Abs(boardSize.X.Value - pair.Key) < minLength)
                            {
                                minLength = Math.Abs(boardSize.X.Value - pair.Key);
                                offlineoffsets = pair.Value;
                            }
                        }
                    }
                    else if (mParams.OfflineOffsets != null)
                    {
                        offlineoffsets = mParams.OfflineOffsets;
                    }


                    if (offlineoffsets != null)
                    {
                        foreach (KeyValuePair<int2, decimal2> pair in offlineoffsets)
                        {
                            if (y + 1 == pair.Key.X && x + 1 == pair.Key.Y)
                            {
                                decimal2 offset = pair.Value;
                                Length offsetX = new Length(pair.Value.X, LengthUnit.Millimeter);
                                xplugs += offsetX.ToPlugs();
                                Length offsetY = new Length(pair.Value.Y, LengthUnit.Millimeter);
                                yplugs += offsetY.ToPlugs();
                            }
                        }
                    }

                    if (prevBlock.HasValue)
                    {
                        if (prevBlock.Value.Column > pt.Column)
                        {
                            xplugs += mParams.BlockShift.X.ToPlugs();
                        }
                        else if ((prevBlock.Value.Column == pt.Column) && (pt.Column == 0))
                        {
                            xplugs += mParams.BlockShift.X.ToPlugs();
                        }
                    }

                    int2 plugs = new int2(0, 0);
                    int row = 1;
                    if (MachineParams.Current.SerialPort.IsHuichuan && y != 0)
                    {
                        row = -1;
                    }
                    //if (MachineParams.Current.IsInlineMode && !MachineParams.Current.InlineMachine.LeftToRight)
                    //{
                    //    plugs = new double2(-xplugs, -yplugs * row) + origin;
                    //}
                    //else
                    //{
                    //    plugs = new double2(xplugs, -yplugs * row) + origin;
                    //}

                    try
                    {
                        Trace.WriteLine("原先的x * blockSize.X 是:" + (x * blockSize.X) + "原先的y * blockSize.Y 是 " + (y * blockSize.Y));
                        var result = biaodinresult.GetCoarseCalibResult(x * blockSize.X, y * blockSize.Y);
                        plugs.X = (int)result[0];
                        plugs.Y = (int)result[1];
                        Trace.WriteLine("现在的plug.X 是:" + plugs.X + "原先的plug.Y 是 " + plugs.Y);
                    }
                    catch
                    {

                    }

                    plugs = mParams.CalibratePlugs(plugs);

                    path[index++] = new SnapshotPath(blockPath.SnapshotType, plugs.X, plugs.Y);

                    prevBlock = pt;
                }
            }
            //20241118 停拍使用标定文件计算相机走位 【史彦洋】 追加 End

            return path;
        }

        State _state = InitialState.Current;
        Length2 _boardSize;
        //Length _boardThickness;
        Length2 _boardOrigin;
        BlockPath _blockPath;
        BlockPath _blockPath0;
        SnapshotPath[] _snapshotPath;
        string[] _snapshotRows;
        string _snapshotRow;
        bool _isSingleShuttle;

        InputStatus _softInputStatus = 0;
        InputStatus _lockInputStatus = 0;
        bool _isBoardIn;
        bool _isReCapture;
        bool _isRequestOne;
        bool _isReBoardIn;
        bool _isHold;
        bool _isAlarm;
        // 20230223 NG清板【王小雪】 追加 Start
        //bool _isNeedResetForce = true;

        public bool _isNeedResetForce = true;
        // 20230223 NG清板【王小雪】 追加 End

        [Obsolete]
        Machine GetMachine2()
        {
            return App.Current.GetService<Machine>();
        }

        ICamera GetDigitizer()
        {
            return App.Current.GetService<ICamera>();
        }

        IProgressListener<int, string> GetProgressListener()
        {
            return App.Current.GetService<IProgressListener<int, string>>();
        }

        bool HasFreeBuffer()
        {
            return MeshBufferManager.Current.HasFreeBuffer;
        }

        InputStatus QueryInputStatus()
        {
            var m = GetMachine2();
            m.Update();

            InputStatus inputStatus = m.InputStatus;
            inputStatus |= _softInputStatus;
            inputStatus |= _lockInputStatus;

            ClearSoftInput();

            return inputStatus;
        }

        void ClearSoftInput()
        {
            _softInputStatus = 0;
        }

        //void CheckInlineMachineStatus()
        //{
        //    if (MachineParams.Current.IsInlineMode)
        //    {
        //        var m = App.Current.GetService<Machine>();
        //        m.UpdateInline();
        //        if (m.CurrentInputs.EmergencyButton)
        //        {
        //            ExportEquipmentRunStatusManager.Current.Export("Alarm", Lang.UI.UI_Error_Emergency);
        //            //var progressListener = GetProgressListener();
        //            //progressListener.ReportProgress(0, 1, Lang.UI.UI_Error_Emergency);
        //            //progressListener.Complete();
        //        }
        //        if (m.CurrentInputs.SafeSensor)
        //        {
        //            ExportEquipmentRunStatusManager.Current.Export("Alarm", Lang.UI.UI_Status_DoorOpened);
        //            //var progressListener = GetProgressListener();
        //            //progressListener.ReportProgress(0, 1, Lang.UI.UI_Status_DoorOpened);
        //            //progressListener.Complete();
        //        }
        //        if ((m.CommandStatusInline & CommandStatusInline.TimeOut) != 0)
        //        {
        //            ExportEquipmentRunStatusManager.Current.Export("Alarm", Lang.UI.UI_Label_Timeout);
        //            //var progressListener = GetProgressListener();
        //            //progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_Timeout);
        //            //progressListener.Complete();
        //        }
        //        if ((m.CommandStatusInline & CommandStatusInline.TwoBoardInside) != 0)
        //        {
        //            ExportEquipmentRunStatusManager.Current.Export("Alarm", Lang.UI.UI_Label_TwoPCBInside);
        //            //var progressListener = GetProgressListener();
        //            //progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_TwoPCBInside);
        //            //progressListener.Complete();
        //        }
        //        //if ((m.InputStatusInline & InputStatusInline.AirPressureSwitch) == 0)
        //        //{
        //        //    //return Lang.UI.UI_Status_AirPressureWarning;
        //        //    ExportEquipmentRunStatusManager.Current.Export("Alarm", Lang.UI.UI_Status_AirPressureWarning);
        //        //    progressListener.ReportProgress(0, 1, Lang.UI.UI_Status_AirPressureWarning);
        //        //    progressListener.Complete();
        //        //}
        //    }

        //}

        //void SetState(StateBase state)
        //{
        //    Debug.Assert(state != null);
        //    _state = state;
        //}

        //void NextState()
        //{
        //    _taskMgr.CreateTask(0, () => _state.Process(this));
        //}

        void SetNextState(State state)
        {
            if (_state == state)
                return;
            _state.AcceptVisitor(StateExitVisitor.Current, this);
            _state = state;
            _state.AcceptVisitor(StateEnterVisitor.Current, this);
            this.RaiseEvent(PropertyChanged, "Status");
            //_taskMgr.CreateTask(0, () =>
            //    {
            //        _state = state;
            //        state.Process(this);
            //    });
        }

        //public void Run(Length2 boardSize, Length boardThickness)
        //{
        //    ushort snapshotType = 3;
        //    _blockPath = MachineOperations.CalculateBlockPath(boardSize, snapshotType);

        //    Stop();

        //    _isRunning = true;
        //    SetNextState(InitialState.Instance);
        //}

        public string Status
        {
            get
            {
                return _state.AcceptVisitor(StatusVisitor.Current, null);
            }
        }

        public Task AutoRun(Length2 boardSize, Length2 boardOrigin, Length boardThickness, ushort snapshotType, string snapshotRow, bool isSingleShuttle, bool isRequestOne = false)
        {
            Holly.Log.HlLogger.Write("HOLLY AOI ==> ImageAcquisitionMachine AutoRun");
            var progressListener = App.Current.GetService<IProgressListener<int, string>>();

            if (Customization.Current.SwitchProgram.IsEnabled)
            {
                if (MachineParams.Current.InlineMachine.LeftToRight)
                {
                    ExportSwitchProgramManager.Current.CurrentOrigin = boardOrigin.ToPlugs();
                    Holly.Log.HlLogger.Write("HOLLY AOI ====> AutoRunManager Auto boardOrigin:" + boardOrigin);
                }
                else
                {
                    ExportSwitchProgramManager.Current.CurrentOrigin = (boardOrigin + MachineParams.Current.ReleaseBoardPosition).ToPlugs();
                }
                ExportSwitchProgramManager.Current.ResetProgramParams(boardSize, boardOrigin, boardThickness, snapshotType, snapshotRow, isSingleShuttle);

            }
            // 20240709 环旭相机切程序_飞拍 【范克文】 追加 Start
            if (Customization.Current.CameraChangeProgramShopfloor.IsEnabled && Customization.Current.CameraChangeProgramShopfloor.IsTaiDaPLC)
            {
                //初始化控制重拍变量
                CameraChangeProgramManager.Current.IsReCaptureInspection = false;
                CameraChangeProgramManager.Current.IsReCaptureGuide = false;

                CameraChangeProgramManager.Current.IsPrepareMeshBuffer = false;
                if (!CameraChangeProgramManager.Current.IsPrepareMeshBuffer)
                {
                    Length2 maxSize = Length2.Zero;
                    //遍历程式最大板长板宽，存入GlobalDataManager.Current.
                    List<string> ProgramPathList = new List<string>();
                    if (File.Exists(Customization.Current.CameraChangeProgramShopfloor.ProgramFilePath))
                    {
                        string ProgramPath = Customization.Current.CameraChangeProgramShopfloor.ProgramFilePath;
                        List<string> programDirectories = FileUtils.GetFileContent(ProgramPath, Encoding.UTF8);
                        foreach (string programPath in programDirectories)
                        {
                            if (string.IsNullOrWhiteSpace(programPath))
                            {
                                continue;
                            }
                            string[] programCodeAndPath = programPath.Split('=');
                            if (programCodeAndPath.Count() > 1 && File.Exists(programCodeAndPath[1].Trim()) && programCodeAndPath[1].Trim().EndsWith(".hlaoi"))
                            {
                                ProgramPathList.Add(programCodeAndPath[1].Trim());
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.AutoRun programCodeAndPath = " + programCodeAndPath[1].Trim());
                            }
                        }
                    }

                    Project.ProjectManager pmForGetMaxSize = App.Current.GetService<Project.ProjectManager>();
                    for (int i = 0; i < ProgramPathList.Count; i++)
                    {
                        FileInfo fileInfo = new FileInfo(ProgramPathList[i]);
                        Data.InspectionProgram currentProgram = pmForGetMaxSize.AddProgram(fileInfo, false);
                        maxSize.X = currentProgram.BoardWidth > maxSize.X ? currentProgram.BoardWidth : maxSize.X;
                        maxSize.Y = currentProgram.BoardHeight > maxSize.Y ? currentProgram.BoardHeight : maxSize.Y;
                        // 得到下个程序的在_programs列表的索引（如果不存在为-1）
                        int index = App.Current.GetService<Project.ProjectManager>().GetProgramIndex(ProgramPathList[i]);
                        Holly.Log.HlLogger.Write("HOLLY AOI ==> ImageAcquisitionMachine.AutoRun index = " + index);
                        if (index >= 0)
                        {
                            // 如果当前程序在
                            pmForGetMaxSize.RemoveOpenedProgram(index);//清除当前程式
                        }
                    }
                    InspectionProgram guideprogram = pmForGetMaxSize.CurrentProgram;
                    Length2 GuidePGSize = Length2.Zero;//保存引导程式的size用于计算路径并保存到全局变量，这是为了在进板时可以直接调用引导程式路径拍照而不必等待切换回引导程式
                    GuidePGSize.X = guideprogram.BoardWidth;
                    GuidePGSize.Y = guideprogram.BoardHeight;
                    CameraChangeProgramManager.Current.GuideProgramBoardSize = GuidePGSize;
                    CameraChangeProgramManager.Current.GuideProgramSnapshotRow = guideprogram.SnapshotRow;
                    CameraChangeProgramManager.Current.MaxBoardSize = maxSize;
                }
            }

            _isRequestOne = isRequestOne;//环旭切程序功能启用后，PrepareBoardInformation时手动采集图像不会申请内存，需要将该标志位提前置位
            // 20240709 环旭相机切程序_飞拍 【范克文】 追加 End

            PrepareBoardInformation(boardSize, boardOrigin, boardThickness, snapshotType, snapshotRow, isSingleShuttle);

            // 20240709 环旭相机切程序_飞拍 【范克文】 删除 Start
            //_isRequestOne = isRequestOne;
            // 20240709 环旭相机切程序_飞拍 【范克文】 删除 End

            _stop = false;

            var stateTransitionVisitor = isRequestOne ? StateTransitionVisitor.RequestOne : StateTransitionVisitor.RequestMany;

            //if (MachineParams.Current.IsInlineMode && !isRequestOne)
            //    InlineReleaseBoardPositionManager.Current.StartRelease();

            return _taskMgr.CreateTask(0, queryCancel =>
            {
                SetNextState(InitialState.Current);

                while (!queryCancel() && !(_state is ExitState))
                {
                    Holly.Log.HlLogger.Write("HOLLY AOI ==> ImageAcquisitionMachine _state = " + _state.ToString());
                    try
                    {
                        while (!queryCancel() && !(_state is ExitState))
                        {
                            var nextState = _state.AcceptVisitor(stateTransitionVisitor, this);
                            Holly.Log.HlLogger.Write("HOLLY AOI ==> ImageAcquisitionMachine nextState = " + nextState.ToString());
                            SetNextState(nextState);
                        }
                    }
                    catch (AggregateException ae)
                    {
                        ae.Handle(ex => ex is System.Threading.Tasks.TaskCanceledException);
                    }
                    catch (Exception ex)
                    {
                        //var log = new LogEntry();
                        //log.Severity = TraceEventType.Warning;
                        //log.Categories.Add(LogCategories.Capture);
                        //log.Message = ex.Message;
                        //Logger.Write(log);
                        // 20190917 primax MES 追加 Start
                        Holly.Log.HlLogger.Write("HOLLY AOI ==== > Task AutoRun Error：" + ex);
                        // 20190917 primax MES 追加 End

                        //20230324 plc报错输出E34 【曹志鹏】 修改 Start
                        //// 20230209 E05区分追加实时异常报警提示 追加 Start   
                        //GlobalDataManager.Current.EquipmentErrorCode = "E54";
                        //if (ex != null)
                        //{
                        //    GlobalDataManager.Current.EquipmentErrorContent = ex.ToString();
                        //}
                        //Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.AutoRun EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                        //// 20230209 E05区分追加实时异常报警提示 追加 End 
                        if (ex.GetType().FullName.Equals("Holly.Protocols.CommunicationException"))
                        {
                            // 20240622 设备状态修正 【王晨】 追加 Start
                            if (!GlobalDataManager.Current.IsAutoRun)
                            {
                                // 20240622 设备状态修正 【王晨】 追加 End
                                GlobalDataManager.Current.EquipmentErrorCode = "E34";
                                GlobalDataManager.Current.EquipmentErrorContent = "Machine Error";
                                Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.AutoRun EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                                //ExportEquipmentRunStatusManager.Current.Export("Alarm", GlobalDataManager.Current.EquipmentErrorContent, GlobalDataManager.Current.EquipmentErrorCode);
                                // 20240622 设备状态修正 【王晨】 追加 Start
                            }
                            // 20240622 设备状态修正 【王晨】 追加 End
                        }
                        else
                        {
                            // 20230209 E05区分追加实时异常报警提示 追加 Start   
                            GlobalDataManager.Current.EquipmentErrorCode = "E54";
                            if (ex != null)
                            {
                                GlobalDataManager.Current.EquipmentErrorContent = ex.ToString();
                            }
                            Holly.Log.HlLogger.Write("HOLLY AOI =====>ImageAcquisitionMachine.AutoRun EquipmentErrorCode = " + GlobalDataManager.Current.EquipmentErrorCode);
                            // 20230209 E05区分追加实时异常报警提示 追加 End 
                        }
                        //20230324 plc报错输出E34 【曹志鹏】 修改 End

                        Debug.WriteLine(ex.Message);
                        SetNextState(DesyncState.Current);
                    }
                    finally
                    {
                        Unprepare();
                    }
                }

                SetNextState(ExitState.Current);
                //if (MachineParams.Current.IsInlineMode && !isRequestOne)
                //    InlineReleaseBoardPositionManager.Current.StopRelease();
            });

        }

        bool _stop = false;
        public bool StopFlag
        {
            get
            {
                return _stop;
            }
            set
            {
                _stop = value;
            }
        }

        public void Stop()
        {
            //SetNextState(ExitState.Current);
            UnlockSoftInput();
            ClearSoftInput();
            Holly.Log.HlLogger.Write("HOLLY AOI ====> _stop = true");
            _stop = true;
            _taskMgr.CancelAll();

            IProgressListener<int, string> progressListener = App.Current.GetService<IProgressListener<int, string>>();
            progressListener.ReportProgress(0, 1, string.Empty);

            while (_taskMgr.TaskCount != 0 || _taskMgr.CurrentTask != null)
            {
                System.Threading.Thread.Sleep(100);
            }
        }

        public void SoftInput(InputStatus inputStatus)
        {
            _softInputStatus = inputStatus;
        }

        public void LockSoftInput(InputStatus inputStatus)
        {
            _lockInputStatus = inputStatus;
        }

        public void UnlockSoftInput()
        {
            _lockInputStatus = 0;
        }

        public bool IsRunning
        {
            get
            {
                return _taskMgr.IsPumping;
            }
        }

        //        public static bool AsyncGrabBoardImages(Length2 boardSize, Length boardThickness, IProgressListener<int, string> progressListener)
        //        {
        //            switch (MachineParams.Current.ScanType)
        //            {
        //                case 1:
        //                    return AsyncGrabBoardImages1(boardSize, boardThickness, progressListener);
        //                case 2:
        //                    return AsyncGrabBoardImages2(boardSize, boardThickness, progressListener);
        //                default:
        //                    return AsyncGrabBoardImages0(boardSize, boardThickness, progressListener);
        //            }
        //        }

        //        static bool AsyncGrabBoardImages0(Length2 boardSize, Length boardThickness, IProgressListener<int, string> progressListener)
        //        {
        //            if (progressListener == null)
        //            {
        //                progressListener = App.Current.GetService<IProgressListener<int, string>>();
        //            }

        //            Machine m = App.Current.GetService<Machine>();

        //            ushort snapshotType = 3;
        //            BlockPath blockPath = MachineOperations.CalculateBlockPath(boardSize, snapshotType);
        //            if (blockPath.Blocks == 0)
        //                return false;

        //            IBatchOperation prepareOp = m.CreateBatchOperation();

        //            if (m.IsLost)
        //            {
        //                prepareOp.ReturnZeroPoint();
        //            }

        //            prepareOp.PreparePath(blockPath);

        //            IOperationResult opResult = prepareOp.Execute();

        //            int queryNum = blockPath.SnapshotType == 3 ? blockPath.Blocks * 2 : blockPath.Blocks;

        //            //ImageSourceManager imageSourceManager = ImageSourceManager.Instance;

        //            //progressListener.ReportProgress(0, 1, "Preparing image buffer.");
        //            var meshBufferManager = MeshBufferManager.Current;
        //            meshBufferManager.PrepareBuffer(blockPath.Rows, blockPath.Columns);
        //            //App.Current.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority.Send, new Action(() =>
        //            //{
        //            //    imageSourceManager.PrepareBuffer(
        //            //        blockPath.Rows,
        //            //        blockPath.Columns);
        //            //    imageSourceManager.InvalidImage();
        //            //}));

        //            //progressListener.ReportProgress(0, 1, "Image buffer is ready.");

        //            ICamera digitizer = App.Current.GetService<ICamera>();

        //            if (!digitizer.IsOpened)
        //            {
        //                progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_InitializingDigitizer);
        //                digitizer.Open();
        //            }
        //            progressListener.Complete();

        //            digitizer.BufferCount = MachineParams.Current.BlockBufferSize;
        //            //digitizer.Grab(queryNum);
        //            digitizer.StartGrab(queryNum + 1); //多拍判断前提
        //            //progressListener.ReportProgress(0, 1, "Sending block path.");
        //            //platformManager.SendBlockPath();
        //            DigitizerCalibrationManager dcm = App.Current.GetService<DigitizerCalibrationManager>();
        //            dcm.BoardThickness = boardThickness;

        //            int imageWidth = digitizer.Width;
        //            int imageHeight = digitizer.Height;
        //            byte[] frameData = null;

        //            bool isCancelled = true;
        //            bool isTimeOut = false;
        //            try
        //            {
        //                frameData = MemoryPool.Alloc(imageWidth * imageHeight, false);
        //                opResult.Wait();
        //                if (opResult.HasError)
        //                    return false;

        //                // go
        //                IBatchOperation goOp = m.CreateBatchOperation();
        //                goOp.EnsureGrippedBoard(m.GetCurrentPlugPosition());
        //#if DEBUG       // count snapshot pulses
        //                goOp.ResetStatus();
        //#endif
        //                goOp.Go();
        //                opResult = goOp.Execute();


        //                int grabNum = 0;
        //                //int timeoutTimes = 0;
        //                //int maxTimeoutTimes = 5;

        //                Stopwatch stopwatch = new Stopwatch();
        //                stopwatch.Start();

        //                TimeSpan timeout = new TimeSpan(0, 0, 10);

        //                Stopwatch timeoutStopwatch = Stopwatch.StartNew();

        //                while (grabNum < queryNum)
        //                {
        //                    if (opResult.HasError)
        //                    {
        //                        break;
        //                    }

        //                    if (!digitizer.IsOpened)
        //                    {
        //                        break;
        //                    }

        //                    if (timeoutStopwatch.Elapsed >= timeout)
        //                    {
        //                        timeoutStopwatch.Stop();
        //                        isTimeOut = true;
        //                        break;
        //                    }

        //                    string status =
        //                        string.Format(Lang.UI.UI_Label_WaitingImage, grabNum, queryNum) +
        //                        " " +
        //                        string.Format(Lang.UI.UI_Label_ElapsedTime, stopwatch.ElapsedMilliseconds / 1000);

        //                    progressListener.ReportProgress(grabNum, queryNum, status);
        //                    int frameId = digitizer.QueryFrame(frameData, 1000 - DateTime.Now.Millisecond);

        //                    if (frameId == grabNum)
        //                    {
        //                        frameData.Pin((p, len) =>
        //                        {
        //                            var imageData = ImageData.Attach(imageWidth, imageHeight, p, len, imageWidth, PixelFormat.BayerGRBG);
        //                            {
        //                                Logger.Write(
        //                                    string.Format("Consume Image Data {0}.", grabNum),
        //                                    new string[] { LogCategories.Digitizer, LogCategories.Capture });

        //                                try
        //                                {
        //                                    //status = string.Format("Writing image block {0} (Total:{1}).", grabNum, queryNum);

        //                                    progressListener.ReportProgress(grabNum, queryNum, status);

        //                                    if (blockPath.SnapshotType == 3)
        //                                    {
        //                                        BlockPath.BlockPoint point = blockPath.BlockPoints[grabNum / 2];

        //                                        LightingMode lightingMode = (grabNum & 1) == 0 ? LightingMode.Top : LightingMode.Side;
        //                                        meshBufferManager.WriteImageData(point.Row, point.Column, lightingMode, imageData);
        //                                    }
        //                                    else
        //                                    {
        //                                        BlockPath.BlockPoint point = blockPath.BlockPoints[grabNum];

        //                                        LightingMode lightingMode = blockPath.SnapshotType == 1 ? LightingMode.Top : LightingMode.Side;
        //                                        meshBufferManager.WriteImageData(point.Row, point.Column, lightingMode, imageData);
        //                                    }
        //                                }
        //                                finally
        //                                {
        //                                    ++grabNum;
        //                                    progressListener.ReportProgress(grabNum, queryNum, "I:" + grabNum.ToString());
        //                                }
        //                            }
        //                        });
        //                        //if ((grabNum & 1) == 0)
        //                        m.CountDownSnapshot();

        //                        // reset timeout
        //                        timeoutStopwatch.Reset();
        //                        timeoutStopwatch.Start();
        //                    }
        //                    else if (frameId >= 0)  // 丢帧
        //                    {
        //                        break;
        //                    }
        //                    //else
        //                    //{
        //                    //    if (opResult.IsCompleted)
        //                    //    {
        //                    //        if (++timeoutTimes > maxTimeoutTimes)
        //                    //        {
        //                    //            break;
        //                    //        }
        //                    //    }
        //                    //}
        //                }

        //                stopwatch.Stop();

        //                InspectionCycleTimeManager.Current.CaptureImageCost = stopwatch.Elapsed;

        //                isCancelled = grabNum < queryNum;

        //                //digitizer.Grab(1);

        //                if (!isCancelled && digitizer.QueryFrame(frameData, 1000) >= 0)
        //                {
        //                    isCancelled = true;
        //                    Debug.WriteLine("Time: " + DateTime.Now.ToLocalTime().ToString(), "Noise");

        //                    var log = new LogEntry();
        //                    log.Severity = TraceEventType.Warning;
        //                    log.Categories.Add(LogCategories.Digitizer);
        //                    log.Categories.Add(LogCategories.Capture);
        //                    log.Message = "Unwanted image data frame is detected.";
        //                    Logger.Write(log);
        //                }
        //#if DEBUG
        //                if (!isCancelled)
        //                {
        //                    m.Update();
        //                    int snapshotPulseCount = m.SnapshotPulseCount;
        //                    Debug.Assert(snapshotPulseCount == queryNum);
        //                }
        //#endif
        //            }
        //            finally
        //            {
        //                if (frameData != null)
        //                {
        //                    MemoryPool.Recycle(frameData);
        //                }

        //                if (isCancelled)
        //                {
        //                    progressListener.Cancel();

        //                    var log = new LogEntry();
        //                    log.Categories.Add(LogCategories.Capture);
        //                    log.Severity = TraceEventType.Warning;
        //                    log.Message = "Capture is cancelled.";
        //                    Logger.Write(log);

        //                    if (!opResult.IsCompleted)
        //                    {
        //                        opResult.Cancel();
        //                        m.Pause();
        //                    }
        //                }
        //                else
        //                {
        //                    progressListener.Complete();
        //                }

        //                if (isTimeOut)
        //                {
        //                    digitizer.Close();
        //                }
        //                else if (digitizer.IsOpened)
        //                {
        //                    digitizer.StopGrab();
        //                }

        //                //opResult.Wait(new TimeSpan(0, 0, 1));


        //            }

        //            if (isCancelled)
        //            {
        //                MeshBufferManager.Current.ClearBuffer();
        //            }

        //            return !isCancelled;
        //        }

        //        static bool AsyncGrabBoardImages1(Length2 boardSize, Length boardThickness, IProgressListener<int, string> progressListener)
        //        {
        //            if (progressListener == null)
        //            {
        //                progressListener = App.Current.GetService<IProgressListener<int, string>>();
        //            }

        //            Machine m = App.Current.GetService<Machine>();

        //            var mParmas = MachineParams.Current;

        //            int rows = (int)Math.Ceiling(boardSize.Y / mParmas.BlockSize.Y);
        //            int columns = (int)Math.Ceiling(boardSize.X / mParmas.BlockSize.X);

        //            var meshBufferManager = MeshBufferManager.Current;
        //            meshBufferManager.PrepareBuffer(rows, columns);


        //            IBatchOperation prepareOp = m.CreateBatchOperation();

        //            if (m.IsLost)
        //            {
        //                prepareOp.ReturnZeroPoint();
        //            }
        //            prepareOp.SwichOnfly(false);

        //            IOperationResult opResult = prepareOp.Execute();

        //            ImageSourceManager imageSourceManager = ImageSourceManager.Instance;

        //            ICamera digitizer = App.Current.GetService<ICamera>();

        //            if (!digitizer.IsOpened)
        //            {
        //                progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_InitializingDigitizer);
        //                digitizer.Open();
        //            }
        //            progressListener.Complete();

        //            digitizer.BufferCount = columns;

        //            DigitizerCalibrationManager dcm = App.Current.GetService<DigitizerCalibrationManager>();
        //            dcm.BoardThickness = boardThickness;

        //            int imageWidth = digitizer.Width;
        //            int imageHeight = digitizer.Height;
        //            byte[] frameData = null;

        //            bool isCancelled = false;
        //            bool isTimeOut = false;
        //            try
        //            {
        //                frameData = MemoryPool.Alloc(imageWidth * imageHeight, false);
        //                opResult.Wait();
        //                if (opResult.HasError)
        //                    return false;

        //                // go
        //                IBatchOperation goOp = m.CreateBatchOperation();
        //                goOp.SwichOnfly(false);
        //                goOp.EnsureGrippedBoard(m.GetCurrentPlugPosition());
        //#if DEBUG       // count snapshot pulses
        //                goOp.ResetStatus();
        //#endif
        //                //goOp.Go();
        //                opResult = goOp.Execute();


        //                //int timeoutTimes = 0;
        //                //int maxTimeoutTimes = 5;

        //                Stopwatch stopwatch = new Stopwatch();
        //                stopwatch.Start();

        //                TimeSpan timeout = new TimeSpan(0, 0, 10);

        //                Stopwatch timeoutStopwatch = Stopwatch.StartNew();

        //                var blockPlugs = mParmas.BlockSize.ToPlugs();

        //                var onflyShift = (int)Math.Round(mParmas.OnflyShiftScale * mParmas.SnapshotSpeed.X);

        //                var totalQueryNum = columns * rows * 2;

        //                for (int row = 0; row < rows; ++row)
        //                {
        //                    int cyclePlugs = blockPlugs.X / 2;
        //                    int triggerPlugs = cyclePlugs / 2;
        //                    int triggerWidth = cyclePlugs - triggerPlugs;

        //                    int startPosY = (mParmas.OriginPosition.Y - mParmas.BlockSize.Y * row).ToPlugs();
        //                    int startPosX = mParmas.OriginPosition.X.ToPlugs();

        //                    var startPos = new int2(startPosX - triggerPlugs * 2, startPosY);
        //                    var endPos = new int2(onflyShift + startPosX + (columns - 1) * blockPlugs.X + triggerPlugs * 2, startPosY);

        //                    startPos = mParmas.CalibratePlugs(startPos);
        //                    endPos = mParmas.CalibratePlugs(endPos);

        //                    var totalGrabNum = row * columns * 2;

        //                    foreach (var isRightToLeft in new bool[] { true, false })
        //                    {
        //                        if (!isRightToLeft)
        //                        {
        //                            totalGrabNum += columns;
        //                        }

        //                        int queryNum = columns;

        //                        digitizer.StartGrab(queryNum);
        //                        var op = m.CreateBatchOperation();


        //                        if (isRightToLeft)
        //                        {
        //                            op.SetOnflyParameters(cyclePlugs, triggerPlugs, triggerWidth, LightFlags.Top);
        //                            op.Locate(startPos, mParmas.SnapshotSpeed);
        //                            op.SwichOnfly(true);
        //                            op.Locate(endPos, mParmas.SnapshotSpeed);
        //                            op.SwichOnfly(false);
        //                        }
        //                        else
        //                        {
        //                            op.SetOnflyParameters(cyclePlugs, triggerPlugs, triggerWidth, LightFlags.Side);
        //                            op.SwichOnfly(true);
        //                            op.Locate(startPos, mParmas.SnapshotSpeed);
        //                            op.SwichOnfly(false);
        //                        }

        //                        opResult = op.Execute();

        //                        int grabNum = 0;
        //                        while (grabNum < queryNum)
        //                        {
        //                            if (opResult.HasError)
        //                            {
        //                                break;
        //                            }

        //                            if (!digitizer.IsOpened)
        //                            {
        //                                break;
        //                            }

        //                            if (timeoutStopwatch.Elapsed >= timeout)
        //                            {
        //                                timeoutStopwatch.Stop();
        //                                isTimeOut = true;
        //                                break;
        //                            }

        //                            string status =
        //                                string.Format(Lang.UI.UI_Label_WaitingImage, totalGrabNum + grabNum, totalQueryNum) +
        //                                " " +
        //                                string.Format(Lang.UI.UI_Label_ElapsedTime, stopwatch.ElapsedMilliseconds / 1000);

        //                            progressListener.ReportProgress(totalGrabNum + grabNum, totalQueryNum, status);
        //                            int frameId = digitizer.QueryFrame(frameData, 1000 - DateTime.Now.Millisecond);

        //                            if (frameId == grabNum)
        //                            {
        //                                frameData.Pin((p, len) =>
        //                                {
        //                                    var imageData = ImageData.Attach(imageWidth, imageHeight, p, len, imageWidth, PixelFormat.BayerGRBG);
        //                                    {
        //                                        Logger.Write(
        //                                            string.Format("Consume Image Data {0}.", grabNum),
        //                                            new string[] { LogCategories.Digitizer, LogCategories.Capture });

        //                                        try
        //                                        {
        //                                            //status = string.Format("Writing image block {0} (Total:{1}).", grabNum, queryNum);

        //                                            progressListener.ReportProgress(totalGrabNum + grabNum, totalQueryNum, status);


        //                                            LightingMode lightingMode = isRightToLeft ? LightingMode.Top : LightingMode.Side;

        //                                            if (isRightToLeft)
        //                                            {
        //                                                meshBufferManager.WriteImageData(row, grabNum, lightingMode, imageData);
        //                                            }
        //                                            else
        //                                            {
        //                                                meshBufferManager.WriteImageData(row, columns - 1 - grabNum, lightingMode, imageData);
        //                                            }
        //                                        }
        //                                        finally
        //                                        {
        //                                            ++grabNum;
        //                                            //progressListener.ReportProgress(totalGrabNum + grabNum, totalQueryNum, "I:" + grabNum.ToString());
        //                                        }
        //                                    }
        //                                });
        //                                timeoutStopwatch.Reset();
        //                                timeoutStopwatch.Start();
        //                            }
        //                            else if (frameId >= 0)  // 丢帧
        //                            {
        //                                break;
        //                            }

        //                        }
        //                        opResult.Wait();
        //                        digitizer.StopGrab();
        //                    }
        //                }
        //                stopwatch.Stop();

        //                InspectionCycleTimeManager.Current.CaptureImageCost = stopwatch.Elapsed;

        //#if DEBUG
        //                if (!isCancelled)
        //                {
        //                    m.Update();
        //                    int snapshotPulseCount = m.SnapshotPulseCount;
        //                }
        //#endif
        //            }
        //            finally
        //            {
        //                if (frameData != null)
        //                {
        //                    MemoryPool.Recycle(frameData);
        //                }

        //                if (isCancelled)
        //                {
        //                    progressListener.Cancel();

        //                    var log = new LogEntry();
        //                    log.Categories.Add(LogCategories.Capture);
        //                    log.Severity = TraceEventType.Warning;
        //                    log.Message = "Capture is cancelled.";
        //                    Logger.Write(log);

        //                    if (!opResult.IsCompleted)
        //                    {
        //                        opResult.Cancel();
        //                        m.Pause();
        //                    }
        //                }
        //                else
        //                {
        //                    progressListener.Complete();
        //                }

        //                if (isTimeOut)
        //                {
        //                    digitizer.Close();
        //                }
        //                else if (digitizer.IsOpened)
        //                {
        //                    digitizer.StopGrab();
        //                }

        //                //opResult.Wait(new TimeSpan(0, 0, 1));


        //            }

        //            if (isCancelled)
        //            {
        //                MeshBufferManager.Current.ClearBuffer();
        //            }

        //            return !isCancelled;
        //        }

        //        static bool AsyncGrabBoardImages2(Length2 boardSize, Length boardThickness, IProgressListener<int, string> progressListener)
        //        {
        //            if (progressListener == null)
        //            {
        //                progressListener = App.Current.GetService<IProgressListener<int, string>>();
        //            }

        //            Machine m = App.Current.GetService<Machine>();

        //            var mParmas = MachineParams.Current;

        //            int rows = (int)Math.Ceiling(boardSize.Y / mParmas.BlockSize.Y);
        //            int columns = (int)Math.Ceiling(boardSize.X / mParmas.BlockSize.X);

        //            var meshBufferManager = MeshBufferManager.Current;
        //            meshBufferManager.PrepareBuffer(rows, columns);


        //            IBatchOperation prepareOp = m.CreateBatchOperation();

        //            if (m.IsLost)
        //            {
        //                prepareOp.ReturnZeroPoint();
        //            }
        //            prepareOp.SwichOnfly(false);

        //            IOperationResult opResult = prepareOp.Execute();

        //            ImageSourceManager imageSourceManager = ImageSourceManager.Instance;

        //            ICamera digitizer = App.Current.GetService<ICamera>();

        //            if (!digitizer.IsOpened)
        //            {
        //                progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_InitializingDigitizer);
        //                digitizer.Open();
        //            }
        //            progressListener.Complete();

        //            digitizer.BufferCount = columns * 2;

        //            DigitizerCalibrationManager dcm = App.Current.GetService<DigitizerCalibrationManager>();
        //            dcm.BoardThickness = boardThickness;

        //            int imageWidth = digitizer.Width;
        //            int imageHeight = digitizer.Height;
        //            byte[] frameData = null;

        //            bool isCancelled = false;
        //            bool isTimeOut = false;
        //            try
        //            {
        //                frameData = MemoryPool.Alloc(imageWidth * imageHeight, false);
        //                opResult.Wait();
        //                if (opResult.HasError)
        //                    return false;

        //                // go
        //                IBatchOperation goOp = m.CreateBatchOperation();
        //                goOp.SwichOnfly(false);
        //                goOp.EnsureGrippedBoard(m.GetCurrentPlugPosition());
        //#if DEBUG       // count snapshot pulses
        //                goOp.ResetStatus();
        //#endif
        //                //goOp.Go();
        //                opResult = goOp.Execute();


        //                //int timeoutTimes = 0;
        //                //int maxTimeoutTimes = 5;

        //                Stopwatch stopwatch = new Stopwatch();
        //                stopwatch.Start();

        //                TimeSpan timeout = new TimeSpan(0, 0, 10);

        //                Stopwatch timeoutStopwatch = Stopwatch.StartNew();

        //                var blockPlugs = mParmas.BlockSize.ToPlugs();

        //                var onflyShift = (int)Math.Round(mParmas.OnflyShiftScale * mParmas.SnapshotSpeed.X);

        //                var totalQueryNum = columns * rows * 2;

        //                var triggerScale = 2;
        //                for (int row = 0; row < rows; ++row)
        //                {
        //                    int cyclePlugs = blockPlugs.X / triggerScale / 2;
        //                    int triggerPlugs = cyclePlugs / 2;
        //                    int triggerWidth = cyclePlugs - triggerPlugs;

        //                    int startPosY = (mParmas.OriginPosition.Y - mParmas.BlockSize.Y * row).ToPlugs();
        //                    int startPosX = mParmas.OriginPosition.X.ToPlugs();

        //                    var startPos = new int2(startPosX - triggerPlugs * 2, startPosY);
        //                    var endPos = new int2(onflyShift + startPosX + columns * blockPlugs.X + (triggerPlugs * 2), startPosY);

        //                    startPos = mParmas.CalibratePlugs(startPos);
        //                    endPos = mParmas.CalibratePlugs(endPos);

        //                    var totalGrabNum = row * columns * 2;

        //                    var isRightToLeft = (row & 1) == 0;
        //                    //foreach (var isRightToLeft in new bool[] { true, false })
        //                    {
        //                        int queryNum = columns * 2;

        //                        digitizer.StartGrab(isRightToLeft ? queryNum : queryNum + 1);
        //                        var op = m.CreateBatchOperation();


        //                        if (isRightToLeft)
        //                        {
        //                            op.SetOnflyParameters(cyclePlugs, triggerPlugs, triggerWidth, LightFlags.Top | LightFlags.Side);
        //                            op.Locate(startPos, mParmas.SnapshotSpeed);
        //                            op.SwichOnfly(true);
        //                            op.Locate(endPos, mParmas.SnapshotSpeed);
        //                            op.SwichOnfly(false);
        //                        }
        //                        else
        //                        {
        //                            op.SetOnflyParameters(cyclePlugs, triggerPlugs, triggerWidth, LightFlags.Top | LightFlags.Side);
        //                            op.Locate(endPos, mParmas.SnapshotSpeed);
        //                            op.SwichOnfly(true);
        //                            op.Locate(startPos, mParmas.SnapshotSpeed);
        //                            op.SwichOnfly(false);
        //                        }

        //                        opResult = op.Execute();

        //                        int grabNum = 0;
        //                        while (grabNum < queryNum)
        //                        {
        //                            if (opResult.HasError)
        //                            {
        //                                break;
        //                            }

        //                            if (!digitizer.IsOpened)
        //                            {
        //                                break;
        //                            }

        //                            if (timeoutStopwatch.Elapsed >= timeout)
        //                            {
        //                                timeoutStopwatch.Stop();
        //                                isTimeOut = true;
        //                                break;
        //                            }

        //                            string status =
        //                                string.Format(Lang.UI.UI_Label_WaitingImage, totalGrabNum + grabNum, totalQueryNum) +
        //                                " " +
        //                                string.Format(Lang.UI.UI_Label_ElapsedTime, stopwatch.ElapsedMilliseconds / 1000);

        //                            progressListener.ReportProgress(totalGrabNum + grabNum, totalQueryNum, status);
        //                            int frameId = digitizer.QueryFrame(frameData, 1000 - DateTime.Now.Millisecond);

        //                            if (!isRightToLeft)
        //                            {
        //                                if (frameId == 0)
        //                                    continue;

        //                                frameId -= 1;
        //                            }

        //                            if (frameId == grabNum)
        //                            {

        //                                frameData.Pin((p, len) =>
        //                                {
        //                                    var imageData = ImageData.Attach(imageWidth, imageHeight, p, len, imageWidth, PixelFormat.BayerGRBG);
        //                                    {
        //                                        Logger.Write(
        //                                            string.Format("Consume Image Data {0}.", grabNum),
        //                                            new string[] { LogCategories.Digitizer, LogCategories.Capture });

        //                                        try
        //                                        {
        //                                            //status = string.Format("Writing image block {0} (Total:{1}).", grabNum, queryNum);

        //                                            progressListener.ReportProgress(totalGrabNum + grabNum, totalQueryNum, status);



        //                                            if (isRightToLeft)
        //                                            {
        //                                                LightingMode lightingMode = (grabNum & 1) == 0 ? LightingMode.Top : LightingMode.Side;
        //                                                meshBufferManager.WriteImageData(row, grabNum / 2, lightingMode, imageData);
        //                                            }
        //                                            else
        //                                            {
        //                                                LightingMode lightingMode = (grabNum & 1) == 0 ? LightingMode.Side : LightingMode.Top;
        //                                                meshBufferManager.WriteImageData(row, columns - 1 - grabNum / 2, lightingMode, imageData);
        //                                            }
        //                                        }
        //                                        finally
        //                                        {
        //                                            ++grabNum;
        //                                            //progressListener.ReportProgress(totalGrabNum + grabNum, totalQueryNum, "I:" + grabNum.ToString());
        //                                        }
        //                                    }
        //                                });
        //                                timeoutStopwatch.Reset();
        //                                timeoutStopwatch.Start();
        //                            }
        //                            else if (frameId >= 0)  // 丢帧
        //                            {
        //                                break;
        //                            }

        //                        }
        //                        opResult.Wait();
        //                        digitizer.StopGrab();
        //                    }
        //                }
        //                stopwatch.Stop();

        //                InspectionCycleTimeManager.Current.CaptureImageCost = stopwatch.Elapsed;

        //#if DEBUG
        //                if (!isCancelled)
        //                {
        //                    m.Update();
        //                    int snapshotPulseCount = m.SnapshotPulseCount;
        //                }
        //#endif
        //            }
        //            finally
        //            {
        //                if (frameData != null)
        //                {
        //                    MemoryPool.Recycle(frameData);
        //                }

        //                if (isCancelled)
        //                {
        //                    progressListener.Cancel();

        //                    var log = new LogEntry();
        //                    log.Categories.Add(LogCategories.Capture);
        //                    log.Severity = TraceEventType.Warning;
        //                    log.Message = "Capture is cancelled.";
        //                    Logger.Write(log);

        //                    if (!opResult.IsCompleted)
        //                    {
        //                        opResult.Cancel();
        //                        m.Pause();
        //                    }
        //                }
        //                else
        //                {
        //                    progressListener.Complete();
        //                }

        //                if (isTimeOut)
        //                {
        //                    digitizer.Close();
        //                }
        //                else if (digitizer.IsOpened)
        //                {
        //                    digitizer.StopGrab();
        //                }

        //                //opResult.Wait(new TimeSpan(0, 0, 1));


        //            }

        //            if (isCancelled)
        //            {
        //                MeshBufferManager.Current.ClearBuffer();
        //            }

        //            return !isCancelled;
        //        }

        //public Future<bool> RequestOne(Length2 boardSize, Length boardThickness)
        //{
        //    if (!IsRunning)
        //    {
        //        Run(boardSize, boardThickness);
        //    }

        //    if (_state is DesyncState)
        //    {
        //        SoftInput(InputStatus.Start);
        //    }

        //    var task = Future.Create(() => AsyncGrabBoardImages(boardSize, boardThickness, null));
        //    _requestQueue.Enqueue(task);


        //    return task;
        //}
        IOperationResult GrabByScanType(IProgressListener<int, string> progressListener)
        {
            GlobalDataManager.Current.IsGrabing = true;
            if (progressListener == null)
            {
                progressListener = App.Current.GetService<IProgressListener<int, string>>();
            }

            // 20231219 Rotation2在双轨双面上失效 【徐明武】 追加 Start
            GlobalDataManager.Current.CurrGrabRailID = 1;
            // 20231219 Rotation2在双轨双面上失效 【徐明武】 追加 End

            // 20240709 环旭相机切程序_飞拍 【范克文】 追加 Start
            if ((Customization.Current.CameraChangeProgramShopfloor.IsEnabled && !this._isRequestOne && Customization.Current.CameraChangeProgramShopfloor.IsTaiDaPLC) ||
                (this._isRequestOne && CameraChangeProgramManager.Current.IsIsRequestOneGetBarcodeImage && Customization.Current.CameraChangeProgramShopfloor.IsTaiDaPLC))
            {
                Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.GrabByScanType CurentProgramIndex = " + CameraChangeProgramManager.Current.CurentProgramIndex);
                if (CameraChangeProgramManager.Current.CurentProgramIndex == 0 && !this._isRequestOne)
                {
                    _blockPath = CameraChangeProgramManager.Current.GuideProgramPath;
                    _snapshotRow = CameraChangeProgramManager.Current.GuideProgramSnapshotRow;
                    _snapshotRows = CameraChangeProgramManager.Current.GuideProgramSnapshotRow.Split(',');
                    _boardSize = CameraChangeProgramManager.Current.GuideProgramBoardSize;
                }
                else if (CameraChangeProgramManager.Current.CurentProgramIndex == 1 && !this._isRequestOne)
                {
                    _blockPath = CameraChangeProgramManager.Current.MaxProgramPath;
                    _snapshotRow = "";
                    _snapshotRows = "".Split(',');
                    _boardSize = CameraChangeProgramManager.Current.MaxBoardSize;
                }
                return Grab_1_(progressListener);
            }
            // 20240709 环旭相机切程序_飞拍 【范克文】 追加 End

            // 20240507 环旭相机切程序 【刘红绅】 追加 Start
            if (Customization.Current.CameraChangeProgramShopfloor.IsEnabled && CameraChangeProgramManager.Current.CurentProgramIndex == 0 && !CameraChangeProgramManager.Current.IsRequestOne)
            {
                return Grab_1_SideCameraJumpModel(progressListener);
            }
            if (CameraChangeProgramManager.Current.IsRequestOne && CameraChangeProgramManager.Current.IsIsRequestOneGetBarcodeImage)
            {
                return Grab_1_SideCameraJumpModel(progressListener);
            }
            // 20240507 环旭相机切程序 【刘红绅】 追加 End
            switch (MachineParams.Current.ScanType)
            {
                case 0:
                    return Grab_0(progressListener);
                case 1:
                    return Grab_1_(progressListener);
                case 2:
                    return Grab_2(progressListener);
                // 20210301 成都富士康跳拍版本合并 追加 Start
                case 10:
                    return Grab_10(progressListener);
                // 20210301 成都富士康跳拍版本合并 追加 End
                default:
                    throw new InvalidOperationException("Unknown scan type.");
            }

        }

        //        IOperationResult Grab_0_(IProgressListener<int, string> progressListener)
        //        {
        //            Machine_bak m = App.Current.GetService<Machine_bak>();

        //            int queryNum = _blockPath.SnapshotType == 3 ? _blockPath.Blocks * 2 : _blockPath.Blocks;

        //            var meshBufferManager = MeshBufferManager.Current;

        //            ICamera digitizer = App.Current.GetService<ICamera>();
        //            digitizer.StartGrab(queryNum + 1); //多拍判断前提

        //            int imageWidth = digitizer.Width;
        //            int imageHeight = digitizer.Height;
        //            byte[] frameData = null;

        //            bool isCancelled = true;
        //            bool isTimeOut = false;
        //            IOperationResult opResult = null;

        //            try
        //            {
        //                frameData = MemoryPool.Alloc(imageWidth * imageHeight, false);

        //                // go
        //                IBatchOperation_bak goOp = m.CreateBatchOperation();
        //                goOp.EnsureGrippedBoard(m.GetCurrentPlugPosition());
        //                goOp.SmartLocate(MachineParams.Current.ReleaseBoardPosition, MachineParams.Current.OriginPosition);
        //                opResult = goOp.Execute();
        //                opResult.Wait();

        //                goOp = m.CreateBatchOperation();
        //#if DEBUG       // count snapshot pulses
        //                goOp.ResetStatus();
        //#endif
        //                goOp.Go();
        //                goOp.SmartLocate(MachineParams.Current.OriginPosition, MachineParams.Current.ReleaseBoardPosition);
        //                opResult = goOp.Execute();

        //                int grabNum = 0;

        //                Stopwatch stopwatch = new Stopwatch();
        //                stopwatch.Start();

        //                TimeSpan timeout = new TimeSpan(0, 0, 10);

        //                Stopwatch timeoutStopwatch = Stopwatch.StartNew();

        //                while (grabNum < queryNum)
        //                {
        //                    if (opResult.HasError)
        //                    {
        //                        throw opResult.Exception;
        //                    }

        //                    if (!digitizer.IsOpened)
        //                    {
        //                        break;
        //                    }

        //                    if (timeoutStopwatch.Elapsed >= timeout)
        //                    {
        //                        timeoutStopwatch.Stop();
        //                        isTimeOut = true;
        //                        break;
        //                    }

        //                    string status =
        //                        string.Format(Lang.UI.UI_Label_WaitingImage, grabNum, queryNum) +
        //                        " " +
        //                        string.Format(Lang.UI.UI_Label_ElapsedTime, stopwatch.ElapsedMilliseconds / 1000);

        //                    progressListener.ReportProgress(grabNum, queryNum, status);
        //                    int frameId = digitizer.QueryFrame(frameData, 1000 - DateTime.Now.Millisecond);

        //                    if (frameId >= 0)
        //                    {
        //                        m.CountDownSnapshot();

        //                        frameData.Pin((p, len) =>
        //                        {
        //                            var imageData = ImageData.Attach(imageWidth, imageHeight, p, len, imageWidth, PixelFormat.BayerGRBG);
        //                            {
        //                                Logger.Write(
        //                                    string.Format("Consume Image Data {0}.", grabNum),
        //                                    new string[] { LogCategories.Digitizer, LogCategories.Capture });

        //                                try
        //                                {
        //                                    progressListener.ReportProgress(grabNum, queryNum, status);

        //                                    if (_blockPath.SnapshotType == 3)
        //                                    {
        //                                        BlockPath.BlockPoint point = _blockPath.BlockPoints[grabNum / 2];

        //                                        LightingMode lightingMode = (grabNum & 1) == 0 ? LightingMode.Top : LightingMode.Side;
        //                                        meshBufferManager.WriteImageData(point.Row, point.Column, lightingMode, imageData);
        //                                    }
        //                                    else
        //                                    {
        //                                        BlockPath.BlockPoint point = _blockPath.BlockPoints[grabNum];

        //                                        //LightingMode lightingMode = _blockPath.SnapshotType == 1 ? LightingMode.Top : LightingMode.Side;
        //                                        //meshBufferManager.WriteImageData(point.Row, point.Column, lightingMode, imageData);

        //                                        if (_blockPath.SnapshotType == 1)
        //                                        {
        //                                            meshBufferManager.WriteImageData(point.Row, point.Column, LightingMode.Top, imageData);
        //                                            meshBufferManager.WriteImageData(point.Row, point.Column, LightingMode.Side, imageData);
        //                                        }
        //                                        else
        //                                        {
        //                                            meshBufferManager.WriteImageData(point.Row, point.Column, LightingMode.Top, imageData);
        //                                            meshBufferManager.WriteImageData(point.Row, point.Column, LightingMode.Side, imageData);
        //                                        }
        //                                    }
        //                                }
        //                                finally
        //                                {
        //                                    ++grabNum;
        //                                    progressListener.ReportProgress(grabNum, queryNum, "I:" + grabNum.ToString());
        //                                }
        //                            }
        //                        });

        //                        // reset timeout
        //                        timeoutStopwatch.Reset();
        //                        timeoutStopwatch.Start();
        //                    }
        //                    //else if (frameId >= 0)  // 丢帧
        //                    //{
        //                    //    break;
        //                    //}
        //                }

        //                stopwatch.Stop();

        //                InspectionCycleTimeManager.Current.CaptureImageCost = stopwatch.Elapsed;

        //                isCancelled = grabNum < queryNum;

        //                //if (!isCancelled)
        //                //{
        //                //    opResult = m.SmartReleaseBoard();
        //                //}

        //                if (!isCancelled && digitizer.QueryFrame(frameData, 1000) >= 0)
        //                {
        //                    isCancelled = true;
        //                    Debug.WriteLine("Time: " + DateTime.Now.ToLocalTime().ToString(), "Noise");

        //                    var log = new LogEntry();
        //                    log.Severity = TraceEventType.Warning;
        //                    log.Categories.Add(LogCategories.Digitizer);
        //                    log.Categories.Add(LogCategories.Capture);
        //                    log.Message = "Unwanted image data frame is detected.";
        //                    Logger.Write(log);
        //                }

        //                return opResult;
        //            }
        //            finally
        //            {
        //                if (frameData != null)
        //                {
        //                    MemoryPool.Recycle(frameData);
        //                }

        //                if (isCancelled)
        //                {
        //                    progressListener.Cancel();

        //                    var log = new LogEntry();
        //                    log.Categories.Add(LogCategories.Capture);
        //                    log.Severity = TraceEventType.Warning;
        //                    log.Message = "Capture is cancelled.";
        //                    Logger.Write(log);

        //                    if (!opResult.IsCompleted)
        //                    {
        //                        opResult.Cancel();
        //                        m.Pause();
        //                    }
        //                }
        //                else
        //                {
        //                    progressListener.Complete();
        //                }

        //                if (isTimeOut)
        //                {
        //                    digitizer.Close();
        //                }
        //                else if (digitizer.IsOpened)
        //                {
        //                    digitizer.StopGrab();
        //                }

        //                if (isCancelled)
        //                {
        //                    MeshBufferManager.Current.ClearBuffer();
        //                }
        //                else
        //                {
        //                    MeshBufferManager.Current.Commit();
        //                }
        //            }

        //        }

        // 20230223 NG清板【王小雪】 追加 Start
        //Length2 GetOriginPosition()
        public Length2 GetOriginPosition()
        // 20230223 NG清板【王小雪】 追加 End
        {
            if (MachineParams.Current.IsInlineMode && !MachineParams.Current.InlineMachine.LeftToRight)
            {
                if (MachineParams.Current.SerialPort.IsHuichuan)
                {
                    return MachineParams.Current.OriginPosition + new Length2(-_boardOrigin.X, _boardOrigin.Y);
                }
                else
                {
                    return MachineParams.Current.OriginPosition + new Length2(-_boardOrigin.X, -_boardOrigin.Y);
                }
            }
            else
            {
                if (MachineParams.Current.SerialPort.IsHuichuan)
                {
                    return MachineParams.Current.OriginPosition + new Length2(_boardOrigin.X, _boardOrigin.Y);
                }
                else
                {
                    return MachineParams.Current.OriginPosition + new Length2(_boardOrigin.X, -_boardOrigin.Y);
                }
            }
        }

        IOperationResult Grab_0(IProgressListener<int, string> progressListener)
        {
            using (MeshBufferManager.Current.Use())
            {
                var m = App.Current.GetService<Machine>();

                int queryNum = _blockPath.SnapshotType == 3 ? _blockPath.Blocks * 2 : _blockPath.Blocks;

                //跳行拍
                if (_snapshotRow != string.Empty)
                {
                    queryNum = _snapshotPath.Length * 2;
                }

                var meshBufferManager = MeshBufferManager.Current;

                Holly.Log.HlLogger.Write("HOLLY AOI =====> Grab 0 queryNum = " + queryNum);

                ICamera digitizer = App.Current.GetService<ICamera>();
                digitizer.StartGrab(queryNum);

                Holly.Log.HlLogger.Write("HOLLY AOI =====> digitizer.StartGrab ");

                int imageWidth = digitizer.Width;
                int imageHeight = digitizer.Height;
                byte[] frameData = null;

                bool isCancelled = true;
                bool isTimeOut = false;
                IOperationResult opResult = null;

                try
                {
                    frameData = MemoryPool.Alloc(imageWidth * imageHeight, false);

                    m.Update();
                    // go
                    var goOp = m.CreateBatchOperation();
                    var path = _snapshotPath;

                    goOp.LocateLoader(new int2(m.X, m.Y), path[0].Position, true);

                    Holly.Log.HlLogger.Write("HOLLY AOI =====> goOp.LocateLoader = " + path[0].Position);

                    var steps = new Queue<int>(path.Length * 2 + 1);
                    bool isFirstPosition = true;

                    // 20220303 跳拍 追加 Start
                    int ignore = 0;
                    // 20220303 跳拍 追加 End
                    foreach (var p in path)
                    {
                        // 20220303 跳拍 追加 Start
                        // 20240107 2D跳拍手动可以采图自动不行【刘红绅】删除 Start
                        //if (((Customization.Current.IsJumpShotCaptureImage && _isRequestOne) || !_isRequestOne) && !ExportJumpShotEntireBoardInspectionManager.Current.AllFovNumbers.Exists(t => t == ignore))
                        //{
                        //    ignore++;
                        //    continue;
                        //}
                        // 20240107 2D跳拍手动可以采图自动不行【刘红绅】删除 End
                        ignore++;
                        // 20220303 跳拍 追加 End


                        goOp.LocateCamera(p.Position);

                        Holly.Log.HlLogger.Write("HOLLY AOI =====> goOp.LocateCamera(p.Position) = " + p.Position);

                        steps.Enqueue(goOp.OperationCount);
                        goOp.SnapshotTop();

                        Holly.Log.HlLogger.Write("HOLLY AOI =====> goOp.SnapshotTop() ");
                        //if (isFirstPosition)
                        //{
                        //    steps.Enqueue(goOp.OperationCount);
                        //    goOp.SnapshotTop();
                        //    isFirstPosition = false;
                        //}
                        steps.Enqueue(goOp.OperationCount);
                        goOp.SnapshotSide();
                        Holly.Log.HlLogger.Write("HOLLY AOI =====> goOp.SnapshotSide() ");
                    }

                    //goOp.LocateLoader(path[path.Length - 1].Position, MachineParams.Current.ReleaseBoardPosition.ToPlugs(), false);
                    if (MachineParams.Current.IsInlineMode && !_isRequestOne && (!AutoRunSettings.Default.IsOfflineMode || AutoRunSettings.Default.AutoRunOfflineMode != 2))
                    {
                        var origin = this.GetOriginPosition().ToPlugs();
                        GlobalDataManager.Current.LastPosition = path[path.Length - 1].Position;
                        GlobalDataManager.Current.ReleaseBoardPosition = origin;//releaseBoardPosition;
                    }
                    else
                    {
                        if (MachineParams.Current.IsInlineMode)
                        {
                            var origin = this.GetOriginPosition().ToPlugs();
                            goOp.LocateLoader(path[path.Length - 1].Position, origin, false);
                            Holly.Log.HlLogger.Write("HOLLY AOI =====> last goOp.LocateLoader = " + origin);
                        }
                        else
                        {
                            goOp.LocateLoader(path[path.Length - 1].Position, MachineParams.Current.ReleaseBoardPosition.ToPlugs(), false);
                            Holly.Log.HlLogger.Write("HOLLY AOI =====> last goOp.LocateLoader = " + MachineParams.Current.ReleaseBoardPosition.ToPlugs());
                        }
                    }

                    Action popMaxStep = () =>
                    {
                        if (steps.Count > 0)
                            goOp.MaxStep = steps.Dequeue();
                        else
                            goOp.MaxStep = goOp.OperationCount;
                    };

                    popMaxStep();

                    // 20220303 跳拍 追加 Start
                    //for (int i = 0; i < digitizer.BufferCount; ++i)
                    //{
                    //    popMaxStep();
                    //}
                    // 如果是单次采集并且跳拍采集图像，或者不是单次采集
                    // 20240107 2D跳拍手动可以采图自动不行【刘红绅】删除 Start
                    //if ((Customization.Current.IsJumpShotCaptureImage && _isRequestOne) || !_isRequestOne)
                    //{
                    //    Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_0 ExportJumpShotEntireBoardInspectionManager.Current.AllFovNumbers.Count():" + ExportJumpShotEntireBoardInspectionManager.Current.AllFovNumbers.Count());
                    //    for (int i = 0; i < ExportJumpShotEntireBoardInspectionManager.Current.AllFovNumbers.Count(); ++i)
                    //    {
                    //        popMaxStep();
                    //    }
                    //}
                    //else
                    // 20240107 2D跳拍手动可以采图自动不行【刘红绅】删除 End
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_0 digitizer.BufferCount:" + digitizer.BufferCount);
                        for (int i = 0; i < digitizer.BufferCount; ++i)
                        {
                            popMaxStep();
                        }
                    }
                    int rows = 0;
                    int columns = 0;
                    Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_0 rows:" + rows.ToString() + "  columns:" + columns.ToString());
                    // 20220303 跳拍 追加 End

                    opResult = goOp.Execute(MachineParams.Current.OperationStepTimeout);

                    int grabNum = 0;

                    Stopwatch stopwatch = new Stopwatch();
                    stopwatch.Start();

                    TimeSpan timeout = new TimeSpan(0, 0, 10);

                    Stopwatch timeoutStopwatch = Stopwatch.StartNew();

                    while (grabNum < queryNum)
                    {
                        if (opResult.HasError)
                        {
                            throw opResult.Exception;
                        }

                        if (!digitizer.IsOpened)
                        {
                            break;
                        }

                        if (timeoutStopwatch.Elapsed >= timeout)
                        {
                            timeoutStopwatch.Stop();
                            isTimeOut = true;
                            break;
                        }

                        //var displayGrabNum = grabNum;
                        //if (grabNum < 0)
                        //    displayGrabNum = 0;

                        string status =
                            string.Format(Lang.UI.UI_Label_WaitingImage, grabNum, queryNum) +
                            " " +
                            string.Format(Lang.UI.UI_Label_ElapsedTime, stopwatch.ElapsedMilliseconds / 1000);

                        progressListener.ReportProgress(grabNum, queryNum, status);
                        //int frameId = digitizer.QueryFrame(frameData, 1000 - DateTime.Now.Millisecond);

                        int frameId = 0;

                    // 如果是单次采集并且跳拍采集图像，或者不是单次采集
                    //if (grabNum / 2 == 3 || grabNum / 2 == 6 || grabNum / 2== 10)
                    if (((Customization.Current.IsJumpShotCaptureImage && _isRequestOne) || !_isRequestOne) && !ExportJumpShotEntireBoardInspectionManager.Current.AllFovNumbers.Exists(t => t == grabNum / 2))
                    {
                        int row = grabNum / 2 / columns;
                        Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_0 row:" + row);

                            bool rightToLeft = (row & 1) == 0;
                            using (var image = ImageData.Create(1, 1, PixelFormat.L8))
                            {
                                image.AccessMemory<byte>(mem => mem.Fill(pos => (byte)0));
                                LightingMode lightingMode;

                                if (rightToLeft)
                                {
                                    lightingMode = (grabNum & 1) == 0 ? LightingMode.Top : LightingMode.Side;
                                }
                                else
                                {
                                    lightingMode = (grabNum & 1) != 0 ? LightingMode.Top : LightingMode.Side;
                                }

                                try
                                {
                                    //progressListener.ReportProgress(grabNum + row * queryNum, queryNum, status);

                                    //int column = rightToLeft ? (grabNum - row * columns) / 2 : columns - ((grabNum - row * columns * 2 + 1) / 2) - 1;
                                    int column = rightToLeft ? (grabNum - row * columns * 2) / 2 : columns - (grabNum - row * columns * 2) / 2 - 1;
                                    Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_0 column:" + column);
                                    meshBufferManager.WriteImageData(row, column, lightingMode, image);

                                ++grabNum;
                            }
                            catch (Exception ex)
                            {
                                Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_0 Exception:" + ex);
                                isCancelled = true;
                            }
                        }

                            //++row;
                            continue;
                        }
                        else
                        {

                            bool frameCaped = digitizer.QueryNextFrame(ref frameData, ref frameId);

                            if (frameCaped)//frameId >= 0)
                            {
                                //System.IO.File.WriteAllBytes(@"e:\test", frameData);

                                //m.CountDownSnapshot();
                                frameData.Pin((p, len) =>
                                {
                                    PixelFormat pixelFormat = PixelFormat.BayerGRBG;
                                    if (digitizer is Holly.Cameras.Jai.BB500GE || digitizer is Holly.Cameras.Jai.BB141GE || digitizer is Holly.Cameras.Jai.BB340GE || digitizer is Holly.Cameras.Jai.SBI500GE || digitizer is Holly.Cameras.Jai.AB800GE)
                                        pixelFormat = PixelFormat.BayerRGGB;
                                    else if (digitizer is Holly.Cameras.Jai.SP5000GE2 || digitizer is Holly.Cameras.Jai.GO5000U3 || digitizer is Holly.Cameras.Jai.GO5000GE || digitizer is Holly.Cameras.Jai.BLS5000U3)
                                    {
                                        pixelFormat = PixelFormat.BayerGRBG;
                                    }
                                    else if (digitizer is Holly.Cameras.Jai.GO5100GE)
                                    {
                                        pixelFormat = PixelFormat.BayerRGGB;
                                    }
                                    else if (digitizer is Holly.Cameras.MVView.A55001GE)
                                    {
                                        pixelFormat = PixelFormat.BayerGBRG;
                                    }
                                    else if (digitizer is Holly.Cameras.MVView.A7500CU)
                                    {
                                        pixelFormat = PixelFormat.BayerRGGB;
                                    }
                                    // 20201124 2400w相机 追加 Start
                                    else if (digitizer is Holly.Cameras.MVView.A5B57CU200E)
                                    {
                                        pixelFormat = PixelFormat.BayerGBRG;
                                    }
                                    // 20201124 2400w相机 追加 End
                                    // 20201229 A7A20CU201 追加 Start
                                    else if (digitizer is Holly.Cameras.MVView.A7A20CU201)
                                    {
                                        pixelFormat = PixelFormat.BayerRGGB;
                                    }
                                    // 20201229 A7A20CU201 追加 End
                                    //20221010 CXPKMP00158 追加 Start
                                    else if (digitizer is Holly.Cameras.Jai.CXPKMP00158)
                                    {
                                        pixelFormat = PixelFormat.BayerRGGB;
                                    }
                                    else if (digitizer is Holly.Cameras.MVView.SVSCamera342CGE)
                                    {
                                        pixelFormat = PixelFormat.R8G8B8A8;
                                    }
                                    //20221010 CXPKMP00158 追加 End

                                    //20230109 Basler 追加 Start
                                    else if (digitizer is Holly.Cameras.Basler.A2A4504_18USPRO)
                                    {
                                        pixelFormat = PixelFormat.BayerRGGB;
                                    }
                                    //20230109 Basler 追加 End
                                    // 20240513 新增2500W相机AX5B57CT200 【刘红绅】 追加 Start
                                    else if (digitizer is Holly.Cameras.MVView.AX5B57CT200)
                                    {
                                        pixelFormat = PixelFormat.BayerGBRG;
                                    }
                                    // 20240513 新增2500W相机AX5B57CT200 【刘红绅】 追加 End
                                    // 20240718 太原出差修改 【王晨】 追加 Start
                                    else if (digitizer is Holly.Cameras.MVView.AX5B57CT200_2)
                                    {
                                        pixelFormat = PixelFormat.BayerGBRG;
                                    }
                                    // 20240718 太原出差修改 【王晨】 追加 End

                                    var imageData = ImageData.Attach(imageWidth, imageHeight, p, len, imageWidth, pixelFormat);// PixelFormat.BayerGRBG);
                                    {
                                        Logger.Write(
                                            string.Format("Consume Image Data {0}.", grabNum),
                                            new string[] { LogCategories.Digitizer, LogCategories.Capture });

                                        try
                                        {
                                            progressListener.ReportProgress(grabNum, queryNum, status);

                                            if (_blockPath.SnapshotType == 3)
                                            {
                                                BlockPath.BlockPoint point = _blockPath.BlockPoints[grabNum / 2];

                                                LightingMode lightingMode = (grabNum & 1) == 0 ? LightingMode.Top : LightingMode.Side;
                                                //if (grabNum>=0)
                                                meshBufferManager.WriteImageData(point.Row, point.Column, lightingMode, imageData);
                                            }
                                            else
                                            {
                                                BlockPath.BlockPoint point = _blockPath.BlockPoints[grabNum];

                                                //LightingMode lightingMode = _blockPath.SnapshotType == 1 ? LightingMode.Top : LightingMode.Side;
                                                //meshBufferManager.WriteImageData(point.Row, point.Column, lightingMode, imageData);

                                                if (_blockPath.SnapshotType == 1)
                                                {
                                                    meshBufferManager.WriteImageData(point.Row, point.Column, LightingMode.Top, imageData);
                                                    meshBufferManager.WriteImageData(point.Row, point.Column, LightingMode.Side, imageData);
                                                }
                                                else
                                                {
                                                    meshBufferManager.WriteImageData(point.Row, point.Column, LightingMode.Top, imageData);
                                                    meshBufferManager.WriteImageData(point.Row, point.Column, LightingMode.Side, imageData);
                                                }
                                            }
                                        }
                                        finally
                                        {
                                            ++grabNum;
                                            progressListener.ReportProgress(grabNum, queryNum, "I:" + grabNum.ToString());
                                        }
                                    }


                                    //System.Threading.Thread.Sleep(1000);
                                });

                                // reset timeout
                                timeoutStopwatch.Reset();
                                timeoutStopwatch.Start();

                                popMaxStep();
                            }
                            //else if (frameId >= 0)  // 丢帧
                            //{
                            //    break;
                            //}
                        }
                    }

                    stopwatch.Stop();

                    InspectionCycleTimeManager.Current.CaptureImageCost = stopwatch.Elapsed;

                    isCancelled = grabNum < queryNum;

                    //if (!isCancelled)
                    //{
                    //    opResult = m.SmartReleaseBoard();
                    //}

                    //if (!isCancelled && digitizer.QueryFrame(frameData, 1000) >= 0)
                    //{
                    //    isCancelled = true;
                    //    Debug.WriteLine("Time: " + DateTime.Now.ToLocalTime().ToString(), "Noise");

                    //    var log = new LogEntry();
                    //    log.Severity = TraceEventType.Warning;
                    //    log.Categories.Add(LogCategories.Digitizer);
                    //    log.Categories.Add(LogCategories.Capture);
                    //    log.Message = "Unwanted image data frame is detected.";
                    //    Logger.Write(log);
                    //}

                    return opResult;
                }
                finally
                {
                    if (frameData != null)
                    {
                        MemoryPool.Recycle(frameData);
                    }

                    if (isCancelled)
                    {
                        progressListener.Cancel();

                        var log = new LogEntry();
                        log.Categories.Add(LogCategories.Capture);
                        log.Severity = TraceEventType.Warning;
                        log.Message = "Capture is cancelled.";
                        Logger.Write(log);

                        if (!opResult.IsCompleted)
                        {
                            opResult.Cancel();
                            //m.Pause();
                        }
                    }
                    else
                    {
                        progressListener.Complete();
                    }

                    if (isTimeOut)
                    {
                        digitizer.Close();
                    }
                    else if (digitizer.IsOpened)
                    {
                        digitizer.StopGrab(false);
                    }

                    if (isCancelled)
                    {
                        MeshBufferManager.Current.ClearBuffer();
                    }
                    else
                    {
                        MeshBufferManager.Current.Commit();
                    }
                }
            }
        }

        //// on fly
        //IOperationResult Grab_1_(IProgressListener<int, string> progressListener)
        //{
        //    Machine_bak m = App.Current.GetService<Machine_bak>();

        //    int queryNum = _blockPath.Columns;

        //    var meshBufferManager = MeshBufferManager.Current;

        //    ICamera digitizer = App.Current.GetService<ICamera>();

        //    int imageWidth = digitizer.Width;
        //    int imageHeight = digitizer.Height;
        //    byte[] frameData = null;

        //    bool isCancelled = true;
        //    bool isTimeOut = false;
        //    IOperationResult opResult = null;


        //    try
        //    {
        //        frameData = MemoryPool.Alloc(imageWidth * imageHeight, false);

        //        // go
        //        IBatchOperation_bak goOp = m.CreateBatchOperation();

        //        goOp.InitializeMachine();
        //        int triggerDelay = 50;
        //        int onflyCycle = MachineParams.Current.BlockSize.X.ToPlugs() / 2;
        //        int[] triggers = new int[] { onflyCycle / 2 - triggerDelay, onflyCycle * 2 };
        //        goOp.SetOnflyCycle(onflyCycle);
        //        goOp.SetOnflyTriggers(triggers);
        //        goOp.SwichOnfly(false);

        //        goOp.EnsureGrippedBoard(m.GetCurrentPlugPosition());
        //        goOp.SmartLocate(MachineParams.Current.ReleaseBoardPosition, MachineParams.Current.OriginPosition);
        //        opResult = goOp.Execute();
        //        opResult.Wait();

        //        digitizer.BufferCount = _blockPath.Columns;
        //        digitizer.StartGrab(0);

        //        TimeSpan timeout = new TimeSpan(0, 0, 10);

        //        Stopwatch stopwatch = new Stopwatch();
        //        stopwatch.Start();

        //        for (int row = 0, scans = 0; row < _blockPath.Rows; )
        //        {
        //            int grabNum = 0;
        //            bool rightToLeft = (scans & 1) == 0;
        //            var pos0 = MachineParams.Current.OriginPosition + new Length2(Length.Zero, MachineParams.Current.BlockSize.Y * (decimal)(-row));
        //            var pos1 = MachineParams.Current.OriginPosition + new Length2(MachineParams.Current.BlockSize.X * (decimal)_blockPath.Columns, MachineParams.Current.BlockSize.Y * (decimal)(-row));

        //            LightingMode lightingMode;

        //            if (_blockPath.SnapshotType == 3)
        //            {
        //                lightingMode = rightToLeft ? LightingMode.Top : LightingMode.Side;
        //            }
        //            else
        //            {
        //                if (_blockPath.SnapshotType == 1)
        //                {
        //                    lightingMode = LightingMode.Top;
        //                }
        //                else
        //                {
        //                    lightingMode = LightingMode.Side;
        //                }
        //            }

        //            goOp = m.CreateBatchOperation();

        //            if (lightingMode == LightingMode.Top)
        //            {
        //                goOp.SetOnflyLight(LightFlags.Top, triggers[0], triggers[0] + 250);
        //                goOp.SetOnflyLight(LightFlags.Side, triggers[1], triggers[1] + 250);
        //            }
        //            else
        //            {
        //                goOp.SetOnflyLight(LightFlags.Side, triggers[0], triggers[0] + 250);
        //                goOp.SetOnflyLight(LightFlags.Top, triggers[1], triggers[1] + 250);
        //            }

        //            if (rightToLeft)
        //            {
        //                goOp.SmartLocate(Length2.Zero, pos0);
        //                goOp.SwichOnfly(true);
        //                goOp.SmartLocate(pos0, pos1);
        //                goOp.SwichOnfly(false);
        //            }
        //            else
        //            {
        //                goOp.SmartLocate(Length2.Zero, pos1);
        //                goOp.SwichOnfly(true);
        //                goOp.SmartLocate(pos1, pos0);
        //                goOp.SwichOnfly(false);
        //            }

        //            opResult = goOp.Execute();

        //            Stopwatch timeoutStopwatch = Stopwatch.StartNew();

        //            while (grabNum < queryNum)
        //            {
        //                if (opResult.HasError)
        //                {
        //                    throw opResult.Exception;
        //                }

        //                if (!digitizer.IsOpened)
        //                {
        //                    break;
        //                }

        //                if (timeoutStopwatch.Elapsed >= timeout)
        //                {
        //                    timeoutStopwatch.Stop();
        //                    isTimeOut = true;
        //                    break;
        //                }

        //                string status =
        //                    string.Format(Lang.UI.UI_Label_WaitingImage, grabNum + scans * queryNum, queryNum) +
        //                    " " +
        //                    string.Format(Lang.UI.UI_Label_ElapsedTime, stopwatch.ElapsedMilliseconds / 1000);

        //                progressListener.ReportProgress(grabNum, queryNum, status);
        //                int frameId = digitizer.QueryFrame(frameData, 1000 - DateTime.Now.Millisecond);

        //                if (frameId >= 0)
        //                {
        //                    frameData.Pin((p, len) =>
        //                    {
        //                        var imageData = ImageData.Attach(imageWidth, imageHeight, p, len, imageWidth, PixelFormat.BayerRGGB);
        //                        {
        //                            Logger.Write(
        //                                string.Format("Consume Image Data {0}.", grabNum),
        //                                new string[] { LogCategories.Digitizer, LogCategories.Capture });

        //                            try
        //                            {
        //                                progressListener.ReportProgress(grabNum, queryNum, status);

        //                                var column = rightToLeft ? grabNum : _blockPath.Columns - grabNum - 1;
        //                                meshBufferManager.WriteImageData(row, column, lightingMode, imageData);
        //                            }
        //                            finally
        //                            {
        //                                ++grabNum;
        //                                //    progressListener.ReportProgress(grabNum, queryNum, "I:" + grabNum.ToString());
        //                            }
        //                        }
        //                    });

        //                    // reset timeout
        //                    timeoutStopwatch.Reset();
        //                    timeoutStopwatch.Start();
        //                }
        //                //else if (frameId >= 0)  // 丢帧
        //                //{
        //                //    break;
        //                //}
        //            }


        //            //digitizer.GrabHalt();

        //            ++scans;
        //            if (!(_blockPath.SnapshotType == 3 && rightToLeft))
        //            {
        //                ++row;
        //            }


        //            isCancelled = grabNum < queryNum;
        //        }
        //        stopwatch.Stop();
        //        InspectionCycleTimeManager.Current.CaptureImageCost = stopwatch.Elapsed;

        //        return opResult;
        //    }
        //    finally
        //    {
        //        if (frameData != null)
        //        {
        //            MemoryPool.Recycle(frameData);
        //        }

        //        if (isCancelled)
        //        {
        //            progressListener.Cancel();

        //            var log = new LogEntry();
        //            log.Categories.Add(LogCategories.Capture);
        //            log.Severity = TraceEventType.Warning;
        //            log.Message = "Capture is cancelled.";
        //            Logger.Write(log);

        //            if (!opResult.IsCompleted)
        //            {
        //                opResult.Cancel();
        //                m.Pause();
        //            }
        //        }
        //        else
        //        {
        //            progressListener.Complete();
        //        }

        //        if (isTimeOut)
        //        {
        //            digitizer.Close();
        //        }
        //        else if (digitizer.IsOpened)
        //        {
        //            digitizer.StopGrab();
        //        }

        //        if (isCancelled)
        //        {
        //            MeshBufferManager.Current.ClearBuffer();
        //        }
        //    }

        //}

        // 交替拍照
        IOperationResult Grab_1(IProgressListener<int, string> progressListener)
        {
            using (MeshBufferManager.Current.Use())
            {
                {
                    var m = App.Current.GetService<Machine>();
                    m.Update();

                    int queryNum = _blockPath.Columns * 2;

                    var meshBufferManager = MeshBufferManager.Current;

                    ICamera digitizer = App.Current.GetService<ICamera>();

                    int imageWidth = digitizer.Width;
                    int imageHeight = digitizer.Height;
                    byte[] frameData = null;

                    bool isCancelled = true;
                    //bool isTimeOut = false;
                    //ITaskResult opResult = null;


                    try
                    {
                        frameData = MemoryPool.Alloc(imageWidth * imageHeight, false);

                        var mParams = MachineParams.Current;
                        // go
                        var goOp = m.CreateBatchOperation();
                        var steps = new Queue<int>(_blockPath.Rows);
                        //goOp.InitializeMachine();
                        //int triggerDelay = 0;
                        var shuttleModeParmas = mParams.ShuttleMode;
                        int onflyCycle = (int)Math.Round(shuttleModeParmas.FeedbackPlugsPerMM * mParams.BlockSize.X.Value * 0.5m);
                        //int[] triggers = new int[] { onflyCycle / 4 - shuttleModeParmas.TriggerDelay, onflyCycle * 3 / 4 - shuttleModeParmas.TriggerDelay };
                        //int lightPlugs = new Length(0.1m, LengthUnit.Millimeter).ToPlugs()/2;
                        var snapshotSpeed = mParams.SnapshotSpeed;

                        var origin = this.GetOriginPosition().ToPlugs();
                        //var releaseBoardPosition = new int2(mParams.CalibratePlugs(origin).X, mParams.ReleaseBoardPosition.Y.ToPlugs());
                        var releaseBoardPosition = new int2(mParams.ReleaseBoardPosition.X.ToPlugs(), mParams.ReleaseBoardPosition.Y.ToPlugs());
                        goOp.Initialize(shuttleModeParmas.TriggerPolarity ? PolarityFlags.None : PolarityFlags.SnapshotTrigger);
                        goOp.LocateLoader(new int2(m.X, m.Y), mParams.CalibratePlugs(origin), true);
                        //goOp.SwichOnfly(false);
                        //goOp.SetOnflyCycle(onflyCycle);
                        //goOp.SetOnflyTriggers(triggers);
                        //goOp.SetOnflyLight(LightFlags.Top, triggers[0] - shuttleModeParmas.LightDelay, triggers[0] - shuttleModeParmas.LightDelay + shuttleModeParmas.LightDuration);
                        //goOp.SetOnflyLight(LightFlags.Side, triggers[1] - shuttleModeParmas.LightDelay, triggers[1] - shuttleModeParmas.LightDelay + shuttleModeParmas.LightDuration);

                        //goOp.EnsureGrippedBoard(m.GetCurrentPlugPosition());
                        //goOp.SmartLocate(MachineParams.Current.ReleaseBoardPosition, MachineParams.Current.OriginPosition);
                        //opResult = goOp.Execute();
                        //opResult.Wait();
                        var positions = new int2[_blockPath.Rows, 2];
                        var triggerStart = onflyCycle / 2 + shuttleModeParmas.TriggerDelay;
                        var lightOnStart = onflyCycle / 2 + shuttleModeParmas.LightDelay;
                        var lightOnWidth = shuttleModeParmas.LightDuration;
                        var triggerWidth = shuttleModeParmas.TriggerDuration == 0 ? lightOnWidth : shuttleModeParmas.TriggerDuration;
                        for (int row = 0; row < _blockPath.Rows; ++row)
                        {
                            var row1 = -row;
                            if (MachineParams.Current.SerialPort.IsHuichuan)
                            {
                                row1 = row;
                            }
                            var pos0 = origin + new Length2(Length.Zero, mParams.BlockSize.Y * (decimal)(row1)).ToPlugs();
                            pos0 = mParams.CalibratePlugs(pos0);
                            int2 pos1;
                            if (mParams.IsInlineMode && !mParams.InlineMachine.LeftToRight)
                            {
                                pos1 = origin + new Length2(mParams.BlockSize.X * (decimal)_blockPath.Columns * -1, mParams.BlockSize.Y * (decimal)(row1)).ToPlugs();
                            }
                            else
                            {
                                pos1 = origin + new Length2(mParams.BlockSize.X * (decimal)_blockPath.Columns, mParams.BlockSize.Y * (decimal)(row1)).ToPlugs();
                            }
                            pos1 = mParams.CalibratePlugs(pos1);

                            //飞梭取象，加偏移量
                            KeyValuePair<int, decimal>[] lxoffsets = null;
                            if (mParams.LXMappings != null)
                            {
                                decimal minLength = Math.Abs(_boardSize.X.Value - mParams.LXMappings[0].Key);
                                lxoffsets = mParams.LXMappings[0].Value;
                                foreach (KeyValuePair<int, KeyValuePair<int, decimal>[]> pair in mParams.LXMappings)
                                {
                                    if (Math.Abs(_boardSize.X.Value - pair.Key) < minLength)
                                    {
                                        minLength = Math.Abs(_boardSize.X.Value - pair.Key);
                                        lxoffsets = pair.Value;
                                    }
                                }
                            }
                            else if (mParams.LXOffsets != null)
                            {
                                lxoffsets = mParams.LXOffsets;
                            }

                            if (lxoffsets != null)
                            {
                                foreach (KeyValuePair<int, decimal> pair in lxoffsets)
                                {
                                    if (row + 1 == pair.Key)
                                    {
                                        Length offset = new Length(pair.Value, LengthUnit.Millimeter);
                                        int offsetX = offset.ToPlugs();
                                        pos0.X += offsetX;
                                        pos1.X += offsetX;
                                    }
                                }
                            }

                            if (mParams.LYOffsets != null)
                            {
                                foreach (KeyValuePair<int, decimal> pair in mParams.LYOffsets)
                                {
                                    if (row + 1 == pair.Key)
                                    {
                                        Length offset = new Length(pair.Value, LengthUnit.Millimeter);
                                        int offsetY = offset.ToPlugs();
                                        pos0.Y += offsetY;
                                        pos1.Y += offsetY;
                                    }
                                }
                            }
                            //end

                            if ((row & 1) == 0)
                            {
                                positions[row, 0] = pos0;
                                positions[row, 1] = pos1;

                                goOp.LocateCamera(pos0);
                                if (MachineParams.Current.SerialPort.IsHuichuan)
                                {
                                    goOp.Onfly(OnflyFlags.None, onflyCycle, triggerStart, triggerWidth, lightOnStart, lightOnWidth, queryNum);
                                }
                                else
                                {
                                    goOp.Onfly(OnflyFlags.None, onflyCycle, triggerStart, triggerWidth, lightOnStart, lightOnWidth);
                                }
                                steps.Enqueue(goOp.OperationCount);
                                goOp.LocateCamera(pos1, true);
                            }
                            else
                            {
                                positions[row, 0] = pos1;
                                positions[row, 1] = pos0;

                                goOp.LocateCamera(pos1);
                                if (MachineParams.Current.SerialPort.IsHuichuan)
                                {
                                    goOp.Onfly(OnflyFlags.CountDown | OnflyFlags.SideFirst, onflyCycle, triggerStart, triggerWidth, lightOnStart, lightOnWidth, queryNum);
                                }
                                else
                                {
                                    goOp.Onfly(OnflyFlags.CountDown | OnflyFlags.SideFirst, onflyCycle, triggerStart, triggerWidth, lightOnStart, lightOnWidth);
                                }
                                steps.Enqueue(goOp.OperationCount);
                                goOp.LocateCamera(pos0, true);
                            }
                        }

                        if (MachineParams.Current.IsInlineMode && !_isRequestOne && (!AutoRunSettings.Default.IsOfflineMode || AutoRunSettings.Default.AutoRunOfflineMode != 2))
                        {
                            GlobalDataManager.Current.LastPosition = positions[_blockPath.Rows - 1, 1];
                            if (Customization.Current.BackToReleaseBoardPosition)
                            {
                                GlobalDataManager.Current.ReleaseBoardPosition = releaseBoardPosition;
                            }
                            else
                            {
                                GlobalDataManager.Current.ReleaseBoardPosition = origin;//releaseBoardPosition;
                            }
                            //goOp.LocateLoader(positions[_blockPath.Rows - 1, 1], origin, false);
                        }
                        else
                        {
                            if (MachineParams.Current.IsInlineMode)
                            {
                                goOp.LocateLoader(positions[_blockPath.Rows - 1, 1], origin, false);
                            }
                            else
                            {
                                goOp.LocateLoader(positions[_blockPath.Rows - 1, 1], releaseBoardPosition, false);
                            }
                        }

                        digitizer.BufferCount = queryNum;
                        digitizer.StartGrab(0);

                        TimeSpan timeout = new TimeSpan(0, 0, 10);

                        Stopwatch stopwatch = new Stopwatch();
                        stopwatch.Start();



                        Action popMaxStep = () =>
                        {
                            if (steps.Count > 0)
                                goOp.MaxStep = steps.Dequeue();
                            else
                                goOp.MaxStep = goOp.OperationCount;
                        };

                        popMaxStep();
                        popMaxStep();
                        var opResult = goOp.Execute(mParams.OperationStepTimeout);

                        for (int row = 0; row < _blockPath.Rows;)
                        {
                            int grabNum = 0;
                            bool rightToLeft = (row & 1) == 0;
                            //if (mParams.IsInlineMode && !mParams.InlineMachine.LeftToRight)
                            //{
                            //    rightToLeft = !((row & 1) == 0);
                            //}
                            //else
                            //{
                            //    rightToLeft = (row & 1) == 0;
                            //}

                            //goOp = m.CreateBatchOperation();

                            //if (rightToLeft)
                            //{
                            //    goOp.SwichOnflyDirection(true);
                            //    //goOp.SetOnflyCycle(-onflyCycle);
                            //    //goOp.SetOnflyTriggers(Array.ConvertAll(triggers, v => -v));
                            //    //goOp.SetOnflyLight(LightFlags.Top, -(triggers[0] - shuttleModeParmas.LightDelay), -(triggers[0] - shuttleModeParmas.LightDelay + shuttleModeParmas.LightDuration));
                            //    //goOp.SetOnflyLight(LightFlags.Side, -(triggers[1] - shuttleModeParmas.LightDelay), -(triggers[1] - shuttleModeParmas.LightDelay + shuttleModeParmas.LightDuration));
                            //    //goOp.SetOnflyLight(LightFlags.Top, (triggers[0] - shuttleModeParmas.LightDelay), (triggers[0] - shuttleModeParmas.LightDelay + shuttleModeParmas.LightDuration));
                            //    //goOp.SetOnflyLight(LightFlags.Side, (triggers[1] - shuttleModeParmas.LightDelay), (triggers[1] - shuttleModeParmas.LightDelay + shuttleModeParmas.LightDuration));
                            //}
                            //else
                            //{
                            //    goOp.SwichOnflyDirection(false);
                            //    //goOp.SetOnflyCycle(onflyCycle);
                            //    //goOp.SetOnflyTriggers(triggers);
                            //    //goOp.SetOnflyLight(LightFlags.Side, triggers[0] - shuttleModeParmas.LightDelay, triggers[0] - shuttleModeParmas.LightDelay + shuttleModeParmas.LightDuration);
                            //    //goOp.SetOnflyLight(LightFlags.Top, triggers[1] - shuttleModeParmas.LightDelay, triggers[1] - shuttleModeParmas.LightDelay + shuttleModeParmas.LightDuration);
                            //}

                            //goOp.SwichOnfly(true);
                            //goOp.SmartLocate(positions[row, 0], positions[row, 1], snapshotSpeed);
                            //goOp.SwichOnfly(false);

                            //if (row < _blockPath.Rows - 1)
                            //{
                            //    goOp.SmartLocate(positions[row, 1], positions[row + 1, 0], snapshotSpeed);
                            //}

                            //opResult = goOp.Execute();

                            Stopwatch timeoutStopwatch = Stopwatch.StartNew();

                            while (grabNum < queryNum)
                            {
                                if (opResult.HasError)
                                {
                                    break;
                                }

                                if (!digitizer.IsOpened)
                                {
                                    break;
                                }

                                if (timeoutStopwatch.Elapsed >= timeout)
                                {
                                    timeoutStopwatch.Stop();
                                    //isTimeOut = true;
                                    break;
                                }

                                string status =
                                    string.Format(Lang.UI.UI_Label_WaitingImage, string.Format("{0}-{1}", row + 1, grabNum), string.Format("{0}-{1}", _blockPath.Rows, queryNum)) +
                                    " " +
                                    string.Format(Lang.UI.UI_Label_ElapsedTime, Math.Round((double)stopwatch.ElapsedMilliseconds / 1000, 2));

                                progressListener.ReportProgress(grabNum + row * queryNum, queryNum * _blockPath.Rows, status);

                                int frameId = digitizer.QueryFrame(frameData, 1000 - DateTime.Now.Millisecond);

                                if (frameId >= 0)
                                {
                                    LightingMode lightingMode;

                                    if (rightToLeft)
                                    {
                                        lightingMode = (grabNum & 1) == 0 ? LightingMode.Top : LightingMode.Side;
                                    }
                                    else
                                    {
                                        lightingMode = (grabNum & 1) != 0 ? LightingMode.Top : LightingMode.Side;
                                    }

                                    //System.IO.File.WriteAllBytes(@"e:\test", frameData);
                                    if (MachineParams.Current.IsTest)
                                    {
                                        string dir = "E:\\RawImage";
                                        if (!Directory.Exists(dir))
                                        {
                                            Directory.CreateDirectory(dir);
                                        }
                                        string filePath = row.ToString() + "_" + grabNum.ToString() + "_" + lightingMode.ToString();
                                        filePath = Path.Combine(dir, filePath);
                                        System.IO.File.WriteAllBytes(filePath, frameData);
                                    }


                                    //if (mParams.IsInlineMode && !mParams.InlineMachine.LeftToRight)
                                    //{
                                    //    if (!rightToLeft)
                                    //    {
                                    //        lightingMode = (grabNum & 1) == 0 ? LightingMode.Top : LightingMode.Side;
                                    //    }
                                    //    else
                                    //    {
                                    //        lightingMode = (grabNum & 1) != 0 ? LightingMode.Top : LightingMode.Side;
                                    //    }
                                    //}
                                    //else
                                    //{
                                    //    if (rightToLeft)
                                    //    {
                                    //        lightingMode = (grabNum & 1) == 0 ? LightingMode.Top : LightingMode.Side;
                                    //    }
                                    //    else
                                    //    {
                                    //        lightingMode = (grabNum & 1) != 0 ? LightingMode.Top : LightingMode.Side;
                                    //    }
                                    //}

                                    frameData.Pin((p, len) =>
                                    {
                                        PixelFormat pixelFormat = PixelFormat.BayerRGGB;
                                        if (digitizer is Holly.Cameras.Jai.AB201GE)
                                            pixelFormat = PixelFormat.BayerGRBG;

                                        var imageData = ImageData.Attach(imageWidth, imageHeight, p, len, imageWidth, pixelFormat);//BayerGRBG);//
                                        {
                                            Logger.Write(
                                                string.Format("Consume Image Data {0}.", grabNum),
                                                new string[] { LogCategories.Digitizer, LogCategories.Capture });


                                            try
                                            {
                                                //progressListener.ReportProgress(grabNum + row * queryNum, queryNum, status);

                                                int column = rightToLeft ? grabNum / 2 : _blockPath.Columns - grabNum / 2 - 1;
                                                //if (mParams.IsInlineMode && !mParams.InlineMachine.LeftToRight)
                                                //{
                                                //    column = rightToLeft ? _blockPath.Columns - grabNum / 2 - 1 : grabNum / 2;
                                                //}
                                                //else
                                                //{
                                                //    column = rightToLeft ? grabNum / 2 : _blockPath.Columns - grabNum / 2 - 1;
                                                //}
                                                meshBufferManager.WriteImageData(row, column, lightingMode, imageData);
                                            }
                                            finally
                                            {
                                                ++grabNum;
                                                //    progressListener.ReportProgress(grabNum, queryNum, "I:" + grabNum.ToString());
                                            }
                                        }
                                    });

                                    // reset timeout
                                    timeoutStopwatch.Reset();
                                    timeoutStopwatch.Start();
                                }
                                //else if (frameId >= 0)  // 丢帧
                                //{
                                //    break;
                                //}
                            }

                            //digitizer.GrabHalt();
                            ++row;


                            isCancelled = grabNum < queryNum;
                            if (isCancelled)
                                break;

                            popMaxStep();
                        }
                        stopwatch.Stop();
                        InspectionCycleTimeManager.Current.CaptureImageCost = stopwatch.Elapsed;

                        //opResult = m.SmartReleaseBoard();
                        if (isCancelled)
                        {
                            return null;
                        }
                        else
                        {
                            return opResult;
                        }
                    }
                    finally
                    {
                        if (frameData != null)
                        {
                            MemoryPool.Recycle(frameData);
                        }

                        if (isCancelled)
                        {
                            progressListener.Cancel();

                            var log = new LogEntry();
                            log.Categories.Add(LogCategories.Capture);
                            log.Severity = TraceEventType.Warning;
                            log.Message = "Capture is cancelled.";
                            Logger.Write(log);

                            //if (!opResult.IsCompleted)
                            //{
                            //    opResult.Cancel();
                            //    m.Pause();
                            //}
                        }
                        else
                        {
                            progressListener.Complete();
                        }

                        if (isCancelled)
                        {
                            digitizer.Close();
                        }
                        else if (digitizer.IsOpened)
                        {
                            digitizer.StopGrab(false);
                        }

                        if (isCancelled)
                        {
                            MeshBufferManager.Current.ClearBuffer();
                        }
                        else
                        {
                            MeshBufferManager.Current.Commit();
                        }
                    }

                }
            }
        }

        //20230717 立景多程式不等待结果拍照 [徐明武] 追加 Start
        //注:此处修改目的是，在多程式拍照过程中，让拍照和数据处理并行，提升效率。
        void WaitInspectionFinishedForFrontProgramming()
        {
            Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.WaitInspectionFinishedForFrontProgramming Start Customization.Current.LiJingShopfloor.IsNotWaitInspectionResult:" + Customization.Current.LiJingShopfloor.IsNotWaitInspectionResult);
            if (Customization.Current.LiJingShopfloor.IsNotWaitInspectionResult && AutoRunSettings2.Default.IsDoubleSideAOI)
            {
                Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.WaitInspectionFinishedForFrontProgramming ExportAutoSwitchProgramsShopfloorManager.Current.CurrentInspectionNumber:" + ExportAutoSwitchProgramsShopfloorManager.Current.CurrentInspectionNumber);
                //注：在多程序下才执行等待前一张图像检测结果
                if (ExportAutoSwitchProgramsShopfloorManager.Current.CurrentInspectionNumber > 0 && ExportAutoSwitchProgramsShopfloorManager.Current.CurrentInspectionPrograms.Count > 1)
                {
                    bool isInspectionFinished = ExportAutoSwitchProgramsShopfloorManager.Current.IsInspectionFinished[ExportAutoSwitchProgramsShopfloorManager.Current.CurrentInspectionNumber - 1];
                    while (!isInspectionFinished)
                    {
                        System.Threading.Thread.Sleep(50);
                        isInspectionFinished = ExportAutoSwitchProgramsShopfloorManager.Current.IsInspectionFinished[ExportAutoSwitchProgramsShopfloorManager.Current.CurrentInspectionNumber - 1];

                        //注意：中途退出自动运行 则不等待
                        if (!GlobalDataManager.Current.IsAutoRun)
                            break;
                    }

                }

            }
            Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.WaitInspectionFinishedForFrontProgramming End");
        }
        //20230717 立景多程式不等待结果拍照 [徐明武] 追加 End

        // 交替拍照
        IOperationResult Grab_1_(IProgressListener<int, string> progressListener)
        {
            using (MeshBufferManager.Current.Use())
            {
                GlobalDataManager.Current.IsCameraCancelled = false;

                var m = App.Current.GetService<Machine>();

                //20211028 分段检测补偿偏移量 追加 Start
                int waitTimeIndex = 0;
                // 20230206 通用版本切换程序增加拍照等待超时时间 【曹志鹏】 删除 Start
                //int waiteSum = 15000;
                // 20230206 通用版本切换程序增加拍照等待超时时间 【曹志鹏】 删除 End
                int offsetRowStartPost = 0;
                if (Customization.Current.SwitchProgram.IsEnabled)
                {
                    while (true)
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI ====> SwitchProgram ImageAcquisitionMachine Grab_1_ isReCompileInspectionProgram:" +
                            ExportSwitchProgramManager.Current.isReCompileInspectionProgram.ToString());

                        if (ExportSwitchProgramManager.Current.isReCompileInspectionProgram)
                        {
                            ExportSwitchProgramManager.Current.isReCompileInspectionProgram = false;
                            break;
                        }

                        Holly.Log.HlLogger.Write("HOLLY AOI ====> SwitchProgram ImageAcquisitionMachine Grab_1_ isWaitting...");
                        Thread.Sleep(100);

                        // 20230206 通用版本切换程序增加拍照等待超时时间 【曹志鹏】 修改 Start
                        //if(waiteSum < waitTimeIndex)
                        if (waitTimeIndex > Customization.Current.SwitchProgram.WaitSum)
                        // 20230206 通用版本切换程序增加拍照等待超时时间 【曹志鹏】 修改 End
                        {
                            Holly.Log.HlLogger.Write("HOLLY AOI ====> SwitchProgram ImageAcquisitionMachine Grab_1_  Error: isReCompileInspectionProgram is False, Outtime");
                            return null;
                        }
                        waitTimeIndex += 100;

                    }
                    //重新初始化
                    Holly.Log.HlLogger.Write("HOLLY AOI ====> test ImageAcquisitonMachine ExportSwitchProgramManager.Current.BoardSize :" + ExportSwitchProgramManager.Current.BoardSize);
                    Holly.Log.HlLogger.Write("HOLLY AOI ====> test ImageAcquisitonMachine ExportSwitchProgramManager.Current.BoardThickness :" + ExportSwitchProgramManager.Current.BoardThickness);
                    Holly.Log.HlLogger.Write("HOLLY AOI ====> test ImageAcquisitonMachine ExportSwitchProgramManager.Current.BoardOrigin :" + ExportSwitchProgramManager.Current.BoardOrigin);
                    Holly.Log.HlLogger.Write("HOLLY AOI ====> test ImageAcquisitonMachine ExportSwitchProgramManager.Current.SnapshotType :" + ExportSwitchProgramManager.Current.SnapshotType);
                    Holly.Log.HlLogger.Write("HOLLY AOI ====> test ImageAcquisitonMachine ExportSwitchProgramManager.Current.SnapshotRow :" + ExportSwitchProgramManager.Current.SnapshotRow);
                    Holly.Log.HlLogger.Write("HOLLY AOI ====> test ImageAcquisitonMachine ExportSwitchProgramManager.Current.IsSingleShuttle :" + ExportSwitchProgramManager.Current.IsSingleShuttle);

                    PrepareBoardInformationSwitchProgram(ExportSwitchProgramManager.Current.BoardSize,
                        ExportSwitchProgramManager.Current.BoardOrigin,
                        ExportSwitchProgramManager.Current.BoardThickness,
                        ExportSwitchProgramManager.Current.SnapshotType,
                        ExportSwitchProgramManager.Current.SnapshotRow,
                        ExportSwitchProgramManager.Current.IsSingleShuttle);

                }
                //20211028 分段检测补偿偏移量 追加 End

                ushort isSingle = _isSingleShuttle ? (ushort)1 : (ushort)0;
                m.SetSingleShuttle(isSingle);

                //Holly.Log.HlLogger.Write("HOLLY AOI ================================================");

                //Holly.Log.HlLogger.Write("HOLLY AOI =====> isSingle = " + _isSingleShuttle.ToString());

                if (_isSingleShuttle)
                {
                    return Grab_1_Single(progressListener);
                }

                m.Update();

                int queryNum = _blockPath.Columns * 2;

                // 20221030 景旺重拍处理 追加 Start
                MeshBufferManager.Current.ClearBuffer();
                // 20221030 景旺重拍处理 追加 End

                var meshBufferManager = MeshBufferManager.Current;

                ICamera digitizer = App.Current.GetService<ICamera>();

                // 20230902 自动运行每次进板开关相机 【刘亚杰】 追加 Start
                if (Customization.Current.IsOpenCameraEveryBoardIn)
                {
                    if (!digitizer.IsOpened)
                    {
                        progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_InitializingDigitizer);
                        //progressListener.ReportProgress(0, 1, "MV_TEST:STEP 1 BEGIN");
                        Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_ Digitizer Open");
                        int lRect = digitizer.OpenEx(true);
                        //progressListener.ReportProgress(0, 1, "MV_TEST:STEP 1 [ERR CODE]:" + lRect);
                        Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_ Digitizer Open over");
                        //progressListener.ReportProgress(0, 1, "MV_TEST:STEP 1 OVER");
                        progressListener.Complete();
                    }
                    digitizer.BufferCount = MachineParams.Current.BlockBufferSize * 2;
                }
                // 20230902 自动运行每次进板开关相机 【刘亚杰】 修改 End

                int imageWidth = digitizer.Width;
                int imageHeight = digitizer.Height;


                byte[] frameData = null;

                bool isCancelled = true;
                bool isTimeOut = false;
                //ITaskResult opResult = null;


                try
                {
                    ////20230424 单轨拍照首先用黑图刷新缓存 【曹志鹏】 追加 Start
                    ////可能整板图显示多余图像的异常原因在缓存刷新到directx的显存模块中，需要继续调查
                    //Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_ writeblack Start");
                    //byte[] blackData = MemoryPool.Alloc(imageWidth * imageHeight, false);
                    //PixelFormat pixelFormatBlack = PixelFormat.BayerRGGB;
                    //if (digitizer is Holly.Cameras.Jai.AB201GE || digitizer is Holly.Cameras.Jai.SP5000GE2 || digitizer is Holly.Cameras.Jai.GO5000GE || digitizer is Holly.Cameras.Jai.GO5000U3)
                    //{
                    //    pixelFormatBlack = PixelFormat.BayerGRBG;
                    //}
                    //else if (digitizer is Holly.Cameras.Jai.BLS5000U3)
                    //{
                    //    pixelFormatBlack = PixelFormat.BayerBGGR;
                    //}
                    //else if (digitizer is Holly.Cameras.Jai.GO5100GE)
                    //{
                    //    pixelFormatBlack = PixelFormat.BayerRGGB;
                    //}
                    //// 20211213 jai_1200w相机 追加 Start
                    //else if (digitizer is Holly.Cameras.Jai.GOX12401U3)
                    //{
                    //    pixelFormatBlack = PixelFormat.BayerRGGB;
                    //}
                    //// 20211213 jai_1200w相机 追加 End
                    //else if (digitizer is Holly.Cameras.MVView.A55001GE)
                    //{
                    //    pixelFormatBlack = PixelFormat.BayerGBRG;
                    //}
                    //else if (digitizer is Holly.Cameras.MVView.A7500CU)
                    //{
                    //    pixelFormatBlack = PixelFormat.BayerRGGB;
                    //}
                    //// 20201124 2400w相机 追加 Start
                    //else if (digitizer is Holly.Cameras.MVView.A5B57CU200E)
                    //{
                    //    pixelFormatBlack = PixelFormat.BayerGBRG;
                    //}
                    //// 20201124 2400w相机 追加 End
                    //// 20201229 A7A20CU201 追加 Start
                    //else if (digitizer is Holly.Cameras.MVView.A7A20CU201)
                    //{
                    //    pixelFormatBlack = PixelFormat.BayerRGGB;
                    //}
                    //// 20201229 A7A20CU201 追加 End

                    ////else if (digitizer is Holly.Cameras.Jai.GO5000U3)
                    ////{
                    ////    pixelFormat = PixelFormat.BayerGBRG;
                    ////}
                    ////20221010 CXPKMP00158 追加 Start
                    //else if (digitizer is Holly.Cameras.Jai.CXPKMP00158)
                    //{
                    //    pixelFormatBlack = PixelFormat.BayerRGGB;
                    //}
                    //else if (digitizer is Holly.Cameras.MVView.SVSCamera342CGE)
                    //{
                    //    pixelFormatBlack = PixelFormat.R8G8B8A8;
                    //}
                    //for (int rowBlack = 0; rowBlack < _blockPath.Rows; rowBlack++)
                    //{
                    //    for (int colBlack = 0; colBlack < _blockPath.Columns; colBlack++)
                    //    {
                    //        blackData.Pin((p, len) =>
                    //        {
                    //            var imageData = ImageData.Attach(imageWidth, imageHeight, p, len, imageWidth, pixelFormatBlack);
                    //            {
                    //                try
                    //                {
                    //                    meshBufferManager.WriteImageData(rowBlack, colBlack, LightingMode.Top, imageData);
                    //                    meshBufferManager.WriteImageData(rowBlack, colBlack, LightingMode.Side, imageData);
                    //                }
                    //                finally
                    //                { }
                    //            }
                    //        });
                    //    }
                    //}
                    //Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_ writeblack End");
                    ////20230424 单轨拍照首先用黑图刷新缓存 【曹志鹏】 追加 End
                    frameData = MemoryPool.Alloc(imageWidth * imageHeight, false);

                    var mParams = MachineParams.Current;
                    // go
                    var goOp = m.CreateBatchOperation();
                    var steps = new Queue<int>(_blockPath.Rows);
                    //goOp.InitializeMachine();
                    //int triggerDelay = 0;
                    var shuttleModeParmas = mParams.ShuttleMode;
                    int onflyCycle = (int)Math.Round(shuttleModeParmas.FeedbackPlugsPerMM * mParams.BlockSize.X.Value * 0.5m);
                    //int[] triggers = new int[] { onflyCycle / 4 - shuttleModeParmas.TriggerDelay, onflyCycle * 3 / 4 - shuttleModeParmas.TriggerDelay };
                    //int lightPlugs = new Length(0.1m, LengthUnit.Millimeter).ToPlugs()/2;
                    var snapshotSpeed = mParams.SnapshotSpeed;

                    var origin = this.GetOriginPosition().ToPlugs();

                    // 20201104 通用版本切换程序 追加 Start 
                    if (Customization.Current.SwitchProgram.IsEnabled)
                    {
                        //20211028 分段检测补偿偏移量 追加 Start
                        //补偿起始点行行标
                        offsetRowStartPost = (int)((ExportSwitchProgramManager.Current.CurrentOrigin.Y + ConvertionManager.ToPlugs(mParams.BlockSize.Y) - 1) / ConvertionManager.ToPlugs(mParams.BlockSize.Y));
                        Holly.Log.HlLogger.Write("HOLLY AOI ======> test SwitchProgram ExportSwitchProgramManager.Current.currentOrigin:" + ExportSwitchProgramManager.Current.CurrentOrigin);
                        Holly.Log.HlLogger.Write("HOLLY AOI ======> test SwitchProgram  mParams.BlockSize:" + mParams.BlockSize);
                        Holly.Log.HlLogger.Write("HOLLY AOI ======> test SwitchProgram offsetRowStartPost:" + offsetRowStartPost);
                        Holly.Log.HlLogger.Write("HOLLY AOI ======> test SwitchProgram ConvertionManager.ToPlugs(mParams.BlockSize.Y):" + ConvertionManager.ToPlugs(mParams.BlockSize.Y));

                        //20211121 注：不跟进板子的起始点位置计算补偿值
                        //offsetRowStartPost = 0;

                        //20211028 分段检测补偿偏移量 追加 End


                        Holly.Log.HlLogger.Write("HOLLY AOI ====> SwitchProgram ImageAcquisitionMachine Grab_1_ origin,x,y:" +
                            origin.X.ToString() + " ," +
                            origin.Y.ToString());

                        //20211028 分段检测补偿偏移量 删除 Start
                        //while (true)
                        //{
                        //    Holly.Log.HlLogger.Write("HOLLY AOI ====> SwitchProgram ImageAcquisitionMachine Grab_1_ isReCompileInspectionProgram:" +
                        //        ExportSwitchProgramManager.Current.isReCompileInspectionProgram.ToString());

                        //    if (ExportSwitchProgramManager.Current.isReCompileInspectionProgram)
                        //        break;
                        //    Holly.Log.HlLogger.Write("HOLLY AOI ====> SwitchProgram ImageAcquisitionMachine Grab_1_ isWaitting...");
                        //    Thread.Sleep(300);
                        //}
                        //20211028 分段检测补偿偏移量 删除 End
                        // 清空相机缓存
                        if (!MeshBufferManager.Current.HasFreeBuffer)
                        {
                            MeshBufferManager.Current.ClearBuffer();
                        }

                        //ExportBOEBigLEDInspectionManager.Current.isReCompileInspectionProgram = false;
                        if (ExportSwitchProgramManager.Current.CurrentOrigin != new Holly.int2(0, 0))
                        {
                            Holly.Log.HlLogger.Write("HOLLY AOI ====> SwitchProgram ImageAcquisitionMachine Grab_1_ currentOrigin,x,y:" +
                                ExportSwitchProgramManager.Current.CurrentOrigin.X.ToString() + " ," +
                                ExportSwitchProgramManager.Current.CurrentOrigin.Y.ToString());

                            int2 releasePosition = MachineParams.Current.ReleaseBoardPosition.ToPlugs();
                            Holly.Log.HlLogger.Write("HOLLY AOI ====> SwitchProgram ImageAcquisitionMachine Grab_1_ currentOrigin,releasePosition:" + releasePosition);
                            //int2 releaseBoardPosition = Customization.Current.ReleaseBoardPosition.ToPlugs();
                            origin = ExportSwitchProgramManager.Current.CurrentOrigin + releasePosition;

                        }
                        Holly.Log.HlLogger.Write("HOLLY AOI ====> SwitchProgram ImageAcquisitionMachine Grab_1_ origin 111,x,y:" +
                            origin.X.ToString() + " ," +
                            origin.Y.ToString());

                        if (this._isRequestOne)
                        {
                            origin = this.GetOriginPosition().ToPlugs();
                            Holly.Log.HlLogger.Write("HOLLY AOI ====> SwitchProgram ImageAcquisitionMachine Grab_1_  IsRequestOne");
                        }

                    }
                    // 20201104 通用版本切换程序 追加 End

                    var releaseBoardPosition = new int2(mParams.ReleaseBoardPosition.X.ToPlugs(), mParams.ReleaseBoardPosition.Y.ToPlugs());
                    goOp.Initialize(shuttleModeParmas.TriggerPolarity ? PolarityFlags.None : PolarityFlags.SnapshotTrigger);
                    goOp.LocateLoader(new int2(m.X, m.Y), mParams.CalibratePlugs(origin), true);
                    //goOp.SwichOnfly(false);
                    //goOp.SetOnflyCycle(onflyCycle);
                    //goOp.SetOnflyTriggers(triggers);
                    //goOp.SetOnflyLight(LightFlags.Top, triggers[0] - shuttleModeParmas.LightDelay, triggers[0] - shuttleModeParmas.LightDelay + shuttleModeParmas.LightDuration);
                    //goOp.SetOnflyLight(LightFlags.Side, triggers[1] - shuttleModeParmas.LightDelay, triggers[1] - shuttleModeParmas.LightDelay + shuttleModeParmas.LightDuration);

                    //goOp.EnsureGrippedBoard(m.GetCurrentPlugPosition());
                    //goOp.SmartLocate(MachineParams.Current.ReleaseBoardPosition, MachineParams.Current.OriginPosition);
                    //opResult = goOp.Execute();
                    //opResult.Wait();
                    var positions = new int2[_blockPath.Rows, 2];
                    var triggerStart = onflyCycle / 2 + shuttleModeParmas.TriggerDelay;
                    var lightOnStart = onflyCycle / 2 + shuttleModeParmas.LightDelay;
                    var lightOnWidth = shuttleModeParmas.LightDuration;
                    var triggerWidth = shuttleModeParmas.TriggerDuration == 0 ? lightOnWidth : shuttleModeParmas.TriggerDuration;

                    //Holly.Log.HlLogger.Write("HOLLY AOI ============> onflyCycle =  " + onflyCycle.ToString());
                    //Holly.Log.HlLogger.Write("HOLLY AOI ============> triggerStart =  " + triggerStart.ToString());
                    //Holly.Log.HlLogger.Write("HOLLY AOI ============> triggerWidth =  " + triggerWidth.ToString());
                    //Holly.Log.HlLogger.Write("HOLLY AOI ============> lightOnStart =  " + lightOnStart.ToString());
                    //Holly.Log.HlLogger.Write("HOLLY AOI ============> lightOnWidth =  " + lightOnWidth.ToString());

                    int2 lastPosition = new int2(0, 0);
                    int realRow = 0;
                    for (int row = 0; row < _blockPath.Rows; ++row)
                    {
                        //跳行拍
                        if (_snapshotRow != string.Empty)
                        {
                            if (!_snapshotRows.Contains((row + 1).ToString()))
                            {
                                continue;
                            }
                        }

                        var row1 = -row;
                        if (MachineParams.Current.SerialPort.IsHuichuan)
                        {
                            row1 = row;
                        }

                        var pos0 = origin + new Length2(Length.Zero, mParams.BlockSize.Y * (decimal)(row1)).ToPlugs();
                        pos0 = mParams.CalibratePlugs(pos0);
                        int2 pos1;
                        if (mParams.IsInlineMode && !mParams.InlineMachine.LeftToRight)
                        {
                            pos1 = origin + new Length2(mParams.BlockSize.X * (decimal)_blockPath.Columns * -1, mParams.BlockSize.Y * (decimal)(row1)).ToPlugs();
                            pos1 = pos1 - new Length2(MachineParams.Current.SnapshotDelay, new Length(0, LengthUnit.Millimeter)).ToPlugs();
                        }
                        else
                        {
                            pos1 = origin + new Length2(mParams.BlockSize.X * (decimal)_blockPath.Columns, mParams.BlockSize.Y * (decimal)(row1)).ToPlugs();
                            pos1 = pos1 + new Length2(MachineParams.Current.SnapshotDelay, new Length(0, LengthUnit.Millimeter)).ToPlugs();
                        }
                        pos1 = mParams.CalibratePlugs(pos1);

                        //if (_snapshotRow == string.Empty)
                        //{
                        //飞梭取象，加偏移量
                        KeyValuePair<int, decimal>[] lxoffsets = null;
                        if (mParams.LXMappings != null)
                        {
                            decimal minLength = Math.Abs(_boardSize.X.Value - mParams.LXMappings[0].Key);
                            lxoffsets = mParams.LXMappings[0].Value;
                            foreach (KeyValuePair<int, KeyValuePair<int, decimal>[]> pair in mParams.LXMappings)
                            {
                                if (Math.Abs(_boardSize.X.Value - pair.Key) < minLength)
                                {
                                    minLength = Math.Abs(_boardSize.X.Value - pair.Key);
                                    lxoffsets = pair.Value;
                                }
                            }
                        }
                        else if (mParams.LXOffsets != null)
                        {
                            lxoffsets = mParams.LXOffsets;
                        }

                        if (lxoffsets != null)
                        {
                            foreach (KeyValuePair<int, decimal> pair in lxoffsets)
                            {
                                if (row + 1 == pair.Key)
                                {
                                    Length offset = new Length(pair.Value, LengthUnit.Millimeter);
                                    int offsetX = offset.ToPlugs();
                                    pos0.X += offsetX;
                                    pos1.X += offsetX;
                                }
                            }
                        }

                        // 20221201 增加ly_mapping、ly_mapping2文件 修改 Start
                        //if (mParams.LYOffsets != null)
                        //{
                        //    foreach (KeyValuePair<int, decimal> pair in mParams.LYOffsets)
                        //    {
                        //        if (row + 1 == pair.Key)
                        //        {
                        //            Length offset = new Length(pair.Value, LengthUnit.Millimeter);
                        //            int offsetY = offset.ToPlugs();
                        //            pos0.Y += offsetY;
                        //            pos1.Y += offsetY;
                        //        }
                        //    }
                        //}

                        KeyValuePair<int, decimal>[] lyoffsets = null;
                        if (mParams.LYMappings != null)
                        {
                            decimal minLength = Math.Abs(_boardSize.Y.Value - mParams.LYMappings[0].Key);
                            lyoffsets = mParams.LYMappings[0].Value;
                            foreach (KeyValuePair<int, KeyValuePair<int, decimal>[]> pair in mParams.LYMappings)
                            {
                                if (Math.Abs(_boardSize.Y.Value - pair.Key) < minLength)
                                {
                                    minLength = Math.Abs(_boardSize.Y.Value - pair.Key);
                                    lyoffsets = pair.Value;
                                }
                            }
                        }
                        else if (mParams.LYOffsets != null)
                        {
                            lyoffsets = mParams.LYOffsets;
                        }

                        if (lyoffsets != null)
                        {
                            foreach (KeyValuePair<int, decimal> pair in lyoffsets)
                            {
                                if (row + 1 == pair.Key)
                                {
                                    Length offset = new Length(pair.Value, LengthUnit.Millimeter);
                                    int offsetY = offset.ToPlugs();
                                    pos0.Y += offsetY;
                                    pos1.Y += offsetY;
                                }
                            }
                        }
                        // 20221201 增加ly_mapping、ly_mapping2文件 修改 End
                        //end
                        //}

                        if ((realRow & 1) == 0)
                        {
                            positions[row, 0] = pos0;
                            positions[row, 1] = pos1;
                            lastPosition = pos1;

                            goOp.LocateCamera(pos0);
                            if (MachineParams.Current.SerialPort.IsHuichuan)
                            {
                                goOp.Onfly(OnflyFlags.None, onflyCycle, triggerStart, triggerWidth, lightOnStart, lightOnWidth, queryNum);
                            }
                            else
                            {
                                goOp.Onfly(OnflyFlags.None, onflyCycle, triggerStart, triggerWidth, lightOnStart, lightOnWidth);
                            }
                            steps.Enqueue(goOp.OperationCount);
                            goOp.LocateCamera(pos1, true);
                            //Holly.Log.HlLogger.Write("HOLLY AOI =====> row = " + realRow + " start: " + pos0 + "  end: " + pos1);
                        }
                        else
                        {
                            positions[row, 0] = pos1;
                            positions[row, 1] = pos0;
                            lastPosition = pos0;

                            goOp.LocateCamera(pos1);
                            if (MachineParams.Current.SerialPort.IsHuichuan)
                            {
                                goOp.Onfly(OnflyFlags.CountDown | OnflyFlags.SideFirst, onflyCycle, triggerStart, triggerWidth, lightOnStart, lightOnWidth, queryNum);
                            }
                            else
                            {
                                goOp.Onfly(OnflyFlags.CountDown | OnflyFlags.SideFirst, onflyCycle, triggerStart, triggerWidth, lightOnStart, lightOnWidth);
                            }
                            steps.Enqueue(goOp.OperationCount);
                            goOp.LocateCamera(pos0, true);
                            //Holly.Log.HlLogger.Write("HOLLY AOI =====> row = " + realRow + " start: " + pos1 + "  end: " + pos0);
                        }

                        realRow += 1;
                    }

                    if (MachineParams.Current.IsInlineMode && !_isRequestOne && (!AutoRunSettings.Default.IsOfflineMode || AutoRunSettings.Default.AutoRunOfflineMode != 2))
                    {
                        GlobalDataManager.Current.LastPosition = positions[_blockPath.Rows - 1, 1];
                        //GlobalDataManager.Current.ReleaseBoardPosition = origin;//releaseBoardPosition;
                        if (Customization.Current.BackToReleaseBoardPosition)
                        {
                            GlobalDataManager.Current.ReleaseBoardPosition = releaseBoardPosition;
                        }
                        else
                        {
                            GlobalDataManager.Current.ReleaseBoardPosition = origin;//releaseBoardPosition;
                        }
                        //goOp.LocateLoader(positions[_blockPath.Rows - 1, 1], origin, false);
                    }
                    else
                    {
                        if (MachineParams.Current.IsInlineMode)
                        {
                            //20230720 底面拍照结束后不需回零点直接运动到ReleaseBoardPosition处 【徐明武】 追加 Start
                            //注：上饶立景下面机器拍照后不需要回零点，直接回调ReleaseBoardPosition处
                            if (!(Customization.Current.LiJingShopfloor.IsEnabled && Customization.Current.LiJingShopfloor.IsNotGoOrignPosition))
                                //20230720 底面拍照结束后不需回零点直接运动到ReleaseBoardPosition处 【徐明武】 追加 End

                                goOp.LocateLoader(lastPosition, origin, false);
                        }
                        else
                        {
                            goOp.LocateLoader(lastPosition, releaseBoardPosition, false);
                        }
                    }

                    Holly.Log.HlLogger.Write("HOLLY AOI =====> digitizer queryNum:" + queryNum);
                    Holly.Log.HlLogger.Write("HOLLY AOI =====> digitizer Rows:" + _blockPath.Rows + ",Columns:" + _blockPath.Columns);

                    digitizer.BufferCount = queryNum;
                    digitizer.StartGrab(0);

                    Holly.Log.HlLogger.Write("HOLLY AOI =====> digitizer.StartGrab()");

                    // 20210916 鹏鼎CSV导出优化 追加 Start
                    GlobalDataManager.Current.GrapStartTime.Add(DateTimeUtils.GetRepairUTCDateTime());// 拍照开始时间
                    Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_ GrapStartTime = " + GlobalDataManager.Current.GrapStartTime.First().ToString("yyyy-MM-dd HH:mm:ss"));
                    // 20210916 鹏鼎CSV导出优化 追加 End

                    // 20240709 环旭相机切程序_飞拍 【范克文】 追加 Start
                    PixelFormat pixelFormatBlack = GetPixelFormat(digitizer);
                    byte[] blackData = MemoryPool.Alloc(imageWidth * imageHeight, false);
                    bool isLeftNeedFillUp = false;
                    if (Customization.Current.CameraChangeProgramShopfloor.IsEnabled)
                    {
                        isLeftNeedFillUp = CameraChangeProgramManager.Current.MaxProgramPath.Columns != _blockPath.Columns;
                    }
                    bool secondFirst = false;
                    Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_ init end");
                    // 20240709 环旭相机切程序_飞拍 【范克文】 追加 End

                    TimeSpan timeout = new TimeSpan(0, 0, Customization.Current.SnapshotTimeout);
                    Stopwatch stopwatch = new Stopwatch();
                    stopwatch.Start();



                    Action popMaxStep = () =>
                    {
                        if (steps.Count > 0)
                            goOp.MaxStep = steps.Dequeue();
                        else
                            goOp.MaxStep = goOp.OperationCount;
                    };

                    popMaxStep();
                    popMaxStep();
                    var opResult = goOp.Execute(mParams.OperationStepTimeout);

                    realRow = 0;
                    for (int row = 0; row < _blockPath.Rows; row++)
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI =====> digitizer row=" + row);
                        digitizer.StartPumpFrame(queryNum);

                        Holly.Log.HlLogger.Write("HOLLY AOI =====> digitizer.StartPumpFrame(queryNum)");

                        int grabNum = 0;
                        bool rightToLeft = (row & 1) == 0;

                        //跳行拍
                        if (_snapshotRow != string.Empty)
                        {
                            if (!_snapshotRows.Contains((row + 1).ToString()))
                            {
                                using (var image = ImageData.Create(1, 1, PixelFormat.L8))
                                {
                                    image.AccessMemory<byte>(mem => mem.Fill(pos => (byte)0));
                                    while (grabNum < queryNum)
                                    {
                                        LightingMode lightingMode;

                                        if (rightToLeft)
                                        {
                                            lightingMode = (grabNum & 1) == 0 ? LightingMode.Top : LightingMode.Side;
                                        }
                                        else
                                        {
                                            lightingMode = (grabNum & 1) != 0 ? LightingMode.Top : LightingMode.Side;
                                        }

                                        try
                                        {
                                            //progressListener.ReportProgress(grabNum + row * queryNum, queryNum, status);

                                            int column = rightToLeft ? grabNum / 2 : _blockPath.Columns - grabNum / 2 - 1;
                                            meshBufferManager.WriteImageData(row, column, lightingMode, image);

                                            ++grabNum;
                                            //Holly.Log.HlLogger.Write("HOLLY AOI ============> NOT GRAB row = " + row.ToString() + "; column = " + column.ToString());
                                        }
                                        catch (Exception ex)
                                        {
                                            isCancelled = true;
                                        }
                                        //finally
                                        //{
                                        //    ++grabNum;
                                        //    //    progressListener.ReportProgress(grabNum, queryNum, "I:" + grabNum.ToString());
                                        //}

                                        // 20240709 环旭相机切程序_飞拍 【范克文】 追加 Start
                                        //跳行拍只会在原本的路径上填充黑图，需要在最大的路径与原路径有差异的地方补充黑图，否则跳行拍（参数设置1,2）时第二行将是黑图
                                        if (Customization.Current.CameraChangeProgramShopfloor.IsEnabled && Customization.Current.CameraChangeProgramShopfloor.IsTaiDaPLC)
                                        {
                                            int columnIndex = rightToLeft ? (grabNum - 1) / 2 : _blockPath.Columns - ((grabNum - 1) / 2) - 1;
                                            if (rightToLeft && isLeftNeedFillUp && lightingMode == LightingMode.Side && columnIndex == _blockPath.Columns - 1)
                                            {
                                                secondFirst = true;
                                                for (int index = _blockPath.Columns; index < CameraChangeProgramManager.Current.MaxProgramPath.Columns; index++)
                                                {
                                                    blackData.Pin((p, len) =>
                                                    {
                                                        var imageData = ImageData.Attach(imageWidth, imageHeight, p, len, imageWidth, pixelFormatBlack);//BayerGRBG);//
                                                        {
                                                            try
                                                            {
                                                                meshBufferManager.WriteImageData(row, index, LightingMode.Top, imageData);
                                                                meshBufferManager.WriteImageData(row, index, LightingMode.Side, imageData);
                                                            }
                                                            finally
                                                            { }
                                                        }
                                                    });
                                                }
                                            }

                                            if (rightToLeft && isLeftNeedFillUp && secondFirst)
                                            {
                                                for (int index = CameraChangeProgramManager.Current.MaxProgramPath.Columns - 1; index >= _blockPath.Columns; index--)
                                                {
                                                    blackData.Pin((p, len) =>
                                                    {
                                                        var imageData = ImageData.Attach(imageWidth, imageHeight, p, len, imageWidth, pixelFormatBlack);//BayerGRBG);//
                                                        {
                                                            try
                                                            {
                                                                meshBufferManager.WriteImageData(row + 1, index, LightingMode.Top, imageData);
                                                                meshBufferManager.WriteImageData(row + 1, index, LightingMode.Side, imageData);
                                                            }
                                                            finally
                                                            { }
                                                        }
                                                    });
                                                }

                                                secondFirst = false;
                                            }
                                        }
                                        // 20240709 环旭相机切程序_飞拍 【范克文】 追加 End
                                    }
                                }

                                //++row;
                                continue;
                            }
                        }

                        Stopwatch timeoutStopwatch = Stopwatch.StartNew();
                        rightToLeft = (realRow & 1) == 0;
                        while (grabNum < queryNum)
                        {
                            Holly.Log.HlLogger.Write("HOLLY AOI =====> digitizer grabNum=" + grabNum + " queryNum = " + queryNum);
                            if (opResult.HasError)
                            {
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> Grab_1 opResult.HasError");
                                break;
                            }

                            if (!digitizer.IsOpened)
                            {
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Grab_1_ !digitizer.IsOpened");
                                break;
                            }

                            if (timeoutStopwatch.Elapsed >= timeout)
                            {
                                timeoutStopwatch.Stop();
                                isTimeOut = true;
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> ImageAcquisitionMachine.Grab_1_ timeout");
                                break;
                            }

                            string status =
                                string.Format(Lang.UI.UI_Label_WaitingImage, string.Format("{0}-{1}", row + 1, grabNum), string.Format("{0}-{1}", _blockPath.Rows, queryNum)) +
                                " " +
                                string.Format(Lang.UI.UI_Label_ElapsedTime, Math.Round((double)stopwatch.ElapsedMilliseconds / 1000, 2));

                            progressListener.ReportProgress(grabNum + row * queryNum, queryNum * _blockPath.Rows, status);

                            //int frameId = digitizer.QueryFrame(frameData, 1000 - DateTime.Now.Millisecond);
                            //int frameId = digitizer.QueryFrame(frameData, 1000); //Modified by MVSIG @ 20141117
                            int frameId = 0;
                            bool frameCaped = digitizer.QueryNextFrame(ref frameData, ref frameId);

                            Holly.Log.HlLogger.Write("HOLLY AOI ============> frameId QueryFrame Res " + frameCaped + " as ID:" + (frameId == 0 ? " <NOT READY>" : "" + frameId));

                            if (frameCaped)
                            {
                                LightingMode lightingMode;

                                if (rightToLeft)
                                {
                                    lightingMode = (grabNum & 1) == 0 ? LightingMode.Top : LightingMode.Side;
                                }
                                else
                                {
                                    lightingMode = (grabNum & 1) != 0 ? LightingMode.Top : LightingMode.Side;
                                }

                                //System.IO.File.WriteAllBytes(@"e:\test", frameData);
                                if (MachineParams.Current.IsTest)
                                {
                                    string dir = "E:\\RawImage";
                                    if (!Directory.Exists(dir))
                                    {
                                        Directory.CreateDirectory(dir);
                                    }
                                    string filePath = row.ToString() + "_" + grabNum.ToString() + "_" + lightingMode.ToString();
                                    filePath = Path.Combine(dir, filePath);
                                    System.IO.File.WriteAllBytes(filePath, frameData);
                                }



                                //if (mParams.IsInlineMode && !mParams.InlineMachine.LeftToRight)
                                //{
                                //    if (!rightToLeft)
                                //    {
                                //        lightingMode = (grabNum & 1) == 0 ? LightingMode.Top : LightingMode.Side;
                                //    }
                                //    else
                                //    {
                                //        lightingMode = (grabNum & 1) != 0 ? LightingMode.Top : LightingMode.Side;
                                //    }
                                //}
                                //else
                                //{
                                //    if (rightToLeft)
                                //    {
                                //        lightingMode = (grabNum & 1) == 0 ? LightingMode.Top : LightingMode.Side;
                                //    }
                                //    else
                                //    {
                                //        lightingMode = (grabNum & 1) != 0 ? LightingMode.Top : LightingMode.Side;
                                //    }
                                //}

                                // 20240418 Top图像的偶数行第一个图像左右移动几个像素 【刘亚杰】 追加 Start
                                int columnTemp = rightToLeft ? grabNum / 2 : _blockPath.Columns - grabNum / 2 - 1;
                                //Holly.Log.HlLogger.Write("HOLLY AOI ============> lightingMode:" + lightingMode + ",row:" + row + ",columnTemp:" + columnTemp);

                                if (lightingMode == LightingMode.Top && row % 2 == 0 && columnTemp == 0 && MachineParams.Current.FirstTopMovePix != 0)
                                {
                                    byte[] frameDataTemp = new byte[imageWidth * imageHeight];
                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> MoveLeftRightImage Start");
                                    ImageProcessing.Current.MoveLeftRightImage(frameData, ref frameDataTemp, MachineParams.Current.FirstTopMovePix, imageWidth, imageHeight);
                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> MoveLeftRightImage End");
                                    Array.Copy(frameDataTemp, frameData, imageWidth * imageHeight);
                                }
                                // 20240418 Top图像的偶数行第一个图像左右移动几个像素 【刘亚杰】 追加 End

                                frameData.Pin((p, len) =>
                                {
                                    PixelFormat pixelFormat = PixelFormat.BayerRGGB;
                                    if (digitizer is Holly.Cameras.Jai.AB201GE || digitizer is Holly.Cameras.Jai.SP5000GE2 || digitizer is Holly.Cameras.Jai.GO5000GE || digitizer is Holly.Cameras.Jai.GO5000U3)
                                    {
                                        pixelFormat = PixelFormat.BayerGRBG;
                                    }
                                    else if (digitizer is Holly.Cameras.Jai.BLS5000U3)
                                    {
                                        pixelFormat = PixelFormat.BayerBGGR;
                                    }
                                    else if (digitizer is Holly.Cameras.Jai.GO5100GE)
                                    {
                                        pixelFormat = PixelFormat.BayerRGGB;
                                    }
                                    // 20211213 jai_1200w相机 追加 Start
                                    else if (digitizer is Holly.Cameras.Jai.GOX12401U3)
                                    {
                                        pixelFormat = PixelFormat.BayerRGGB;
                                    }
                                    // 20211213 jai_1200w相机 追加 End
                                    else if (digitizer is Holly.Cameras.MVView.A55001GE)
                                    {
                                        pixelFormat = PixelFormat.BayerGBRG;
                                    }
                                    else if (digitizer is Holly.Cameras.MVView.A7500CU)
                                    {
                                        pixelFormat = PixelFormat.BayerRGGB;
                                    }
                                    // 20201124 2400w相机 追加 Start
                                    else if (digitizer is Holly.Cameras.MVView.A5B57CU200E)
                                    {
                                        pixelFormat = PixelFormat.BayerGBRG;
                                    }
                                    // 20201124 2400w相机 追加 End
                                    // 20201229 A7A20CU201 追加 Start
                                    else if (digitizer is Holly.Cameras.MVView.A7A20CU201)
                                    {
                                        pixelFormat = PixelFormat.BayerRGGB;
                                    }
                                    // 20201229 A7A20CU201 追加 End

                                    //else if (digitizer is Holly.Cameras.Jai.GO5000U3)
                                    //{
                                    //    pixelFormat = PixelFormat.BayerGBRG;
                                    //}
                                    //20221010 CXPKMP00158 追加 Start
                                    else if (digitizer is Holly.Cameras.Jai.CXPKMP00158)
                                    {
                                        pixelFormat = PixelFormat.BayerRGGB;
                                    }
                                    else if (digitizer is Holly.Cameras.MVView.SVSCamera342CGE)
                                    {
                                        pixelFormat = PixelFormat.R8G8B8A8;
                                    }
                                    //20221010 CXPKMP00158 追加 End

                                    //20230109 Basler 追加 Start
                                    else if (digitizer is Holly.Cameras.Basler.A2A4504_18USPRO)
                                    {
                                        pixelFormat = PixelFormat.BayerRGGB;
                                    }
                                    //20230109 Basler 追加 End
                                    // 20240513 新增2500W相机AX5B57CT200 【刘红绅】 追加 Start
                                    else if (digitizer is Holly.Cameras.MVView.AX5B57CT200)
                                    {
                                        pixelFormat = PixelFormat.BayerGBRG;
                                    }
                                    // 20240513 新增2500W相机AX5B57CT200 【刘红绅】 追加 End
                                    // 20240718 太原出差修改 【王晨】 追加 Start
                                    else if (digitizer is Holly.Cameras.MVView.AX5B57CT200_2)
                                    {
                                        pixelFormat = PixelFormat.BayerGBRG;
                                    }
                                    // 20240718 太原出差修改 【王晨】 追加 End
                                    //Holly.Log.HlLogger.Write("HOLLY AOI ========> Grab_1_ pixelFormat:" + pixelFormat);

                                    var imageData = ImageData.Attach(imageWidth, imageHeight, p, len, imageWidth, pixelFormat);//BayerGRBG);//
                                    {
                                        //Holly.Log.HlLogger.Write("MV_TEST:STEP 3 ============> @@@ Consume Image Data grabNum: " + grabNum);

                                        /*
                                        Logger.Write(
                                            string.Format("Consume Image Data {0}.", grabNum),
                                            new string[] { LogCategories.Digitizer, LogCategories.Capture });
                                        */


                                        try
                                        {
                                            //Holly.Log.HlLogger.Write("HOLLY AOI ============> frameId QueryFrame WriteImageData Start");
                                            //progressListener.ReportProgress(grabNum + row * queryNum, queryNum, status);

                                            int column = rightToLeft ? grabNum / 2 : _blockPath.Columns - grabNum / 2 - 1;
                                            //if (mParams.IsInlineMode && !mParams.InlineMachine.LeftToRight)
                                            //{
                                            //    column = rightToLeft ? _blockPath.Columns - grabNum / 2 - 1 : grabNum / 2;
                                            //}
                                            //else
                                            //{
                                            //    column = rightToLeft ? grabNum / 2 : _blockPath.Columns - grabNum / 2 - 1;
                                            //}
                                            meshBufferManager.WriteImageData(row, column, lightingMode, imageData);
                                            //Holly.Log.HlLogger.Write("HOLLY AOI ============> frameId QueryFrame WriteImageData End");

                                            //++grabNum;
                                            //Holly.Log.HlLogger.Write("HOLLY AOI ============> grabNum = " + grabNum.ToString() + "; rightToLeft = " + rightToLeft.ToString() + " Write " + lightingMode.ToString() + "  Top Image = " + row.ToString() + "; column = " + column.ToString());

                                            //Holly.Log.HlLogger.Write("HOLLY AOI ============> GRAB row = " + row.ToString() + "; column = " + column.ToString());
                                        }
                                        //catch (Exception ex)
                                        //{
                                        //    isCancelled = true;
                                        //}
                                        finally
                                        {
                                            ++grabNum;
                                            //    progressListener.ReportProgress(grabNum, queryNum, "I:" + grabNum.ToString());
                                        }
                                    }
                                });

                                // 20240709 环旭相机切程序_飞拍 【范克文】 追加 Start
                                //程式大小不一样会有隔行黑图现象，需要在最大的路径与原路径有差异的地方补充黑图
                                if (Customization.Current.CameraChangeProgramShopfloor.IsEnabled && Customization.Current.CameraChangeProgramShopfloor.IsTaiDaPLC)
                                {
                                    int columnIndex = rightToLeft ? (grabNum - 1) / 2 : _blockPath.Columns - ((grabNum - 1) / 2) - 1;
                                    if (rightToLeft && isLeftNeedFillUp && lightingMode == LightingMode.Side && columnIndex == _blockPath.Columns - 1)
                                    {
                                        secondFirst = true;
                                        for (int index = _blockPath.Columns; index < CameraChangeProgramManager.Current.MaxProgramPath.Columns; index++)
                                        {
                                            blackData.Pin((p, len) =>
                                            {
                                                var imageData = ImageData.Attach(imageWidth, imageHeight, p, len, imageWidth, pixelFormatBlack);//BayerGRBG);//
                                                {
                                                    try
                                                    {
                                                        meshBufferManager.WriteImageData(row, index, LightingMode.Top, imageData);
                                                        meshBufferManager.WriteImageData(row, index, LightingMode.Side, imageData);
                                                    }
                                                    finally
                                                    { }
                                                }
                                            });
                                        }
                                    }

                                    if (rightToLeft && isLeftNeedFillUp && secondFirst)
                                    {
                                        for (int index = CameraChangeProgramManager.Current.MaxProgramPath.Columns - 1; index >= _blockPath.Columns; index--)
                                        {
                                            blackData.Pin((p, len) =>
                                            {
                                                var imageData = ImageData.Attach(imageWidth, imageHeight, p, len, imageWidth, pixelFormatBlack);//BayerGRBG);//
                                                {
                                                    try
                                                    {
                                                        meshBufferManager.WriteImageData(row + 1, index, LightingMode.Top, imageData);
                                                        meshBufferManager.WriteImageData(row + 1, index, LightingMode.Side, imageData);
                                                    }
                                                    finally
                                                    { }
                                                }
                                            });
                                        }

                                        secondFirst = false;
                                    }
                                }
                                // 20240709 环旭相机切程序_飞拍 【范克文】 追加 End

                                // reset timeout
                                timeoutStopwatch.Reset();
                                timeoutStopwatch.Start();
                            }
                            //else if (frameId >= 0)  // 丢帧
                            //{
                            //    break;
                            //}
                            //Holly.Log.HlLogger.Write("HOLLY AOI =====> digitizer frameCaped");
                        }
                        Holly.Log.HlLogger.Write("HOLLY AOI =====> digitizer StopPumpFrame Start");
                        digitizer.StopPumpFrame();
                        Holly.Log.HlLogger.Write("HOLLY AOI =====> digitizer StopPumpFrame End");
                        //digitizer.GrabHalt();
                        //++row;
                        realRow += 1;

                        //if (isCancelled)
                        //    break;

                        isCancelled = grabNum < queryNum;
                        if (isCancelled)
                            break;

                        if (Customization.Current.DoubleRailDoubleHead.IsEnabled && MachineParams.Current.SerialPort.IsHuichuan && row != _blockPath.Rows)
                        {
                            // 20210715 双轨双头解锁条码变更对应 追加 Start
                            // 20230424 双轨双头逻辑变更 修改 Start
                            //DoubleRailDoubleHeadDataControl.Current.UpdateGrabRows(row + 1);
                            DoubleRailDoubleHeadDataControl.Current.GenerateData(row + 1);
                            // 20230424 双轨双头逻辑变更 修改 End
                            // 20210715 双轨双头解锁条码变更对应 追加 End

                            Length pos1 = _boardOrigin.Y + mParams.BlockSize.Y * (decimal)(row);

                            Holly.Log.HlLogger.Write("HOLLY AOI ====> row = " + row + " Y = " + pos1 + " SafetyDistance = " + Customization.Current.DoubleRailDoubleHead.SafetyDistance);
                            if (pos1 >= Customization.Current.DoubleRailDoubleHead.SafetyDistance)
                            {
                                // Y24锁定以后，对面的X37也锁定，两个是一根接线
                                // 读对面信息
                                int x37 = CentralControlPLCCommand.Current.ReadX37();

                                //Holly.Log.HlLogger.Write("HOLLY AOI ====> X37 = " + x37);
                                // 20210122 双轨双头直通对应 修改 Start
                                //while (x37 != 0)

                                bool isByPass = IsByPass();
                                Holly.Log.HlLogger.Write("HOLLY AOI ====> IsByPass = " + isByPass);

                                // 20210825 拍照相同行数死锁对应 追加 Start
                                HeartBeatUtils heartBeatUtils = new HeartBeatUtils(2);
                                // 20210825 拍照相同行数死锁对应 追加 End

                                while (x37 != 0 && !isByPass)
                                // 20210122 双轨双头直通对应 修改 End
                                {
                                    Thread.Sleep(100);
                                    x37 = CentralControlPLCCommand.Current.ReadX37();

                                    // 20200319 双面机防撞代码恢复 追加 Start
                                    int y24 = CentralControlPLCCommand.Current.ReadY24();

                                    // 20210825 拍照相同行数死锁对应 追加 Start
                                    if (heartBeatUtils.IsOutput())
                                    {
                                        Holly.Log.HlLogger.Write("HOLLY AOI ====> DoubleRailDoubleHead wait unlock. x37 = " + x37 + " ,y24 = " + y24);
                                    }
                                    // 20210825 拍照相同行数死锁对应 追加 End

                                    // 20210715 双轨双头解锁条码变更对应 修改 Start
                                    //if (y24 == 1 && Customization.Current.DoubleRailDoubleHead.IsMaster)
                                    //{
                                    //    Holly.Log.HlLogger.Write("HOLLY AOI ====> Master unlock SetY24(false)");
                                    //    CentralControlPLCCommand.Current.SetY24(false);
                                    //}
                                    if (y24 == 1)
                                    {
                                        if (DoubleRailDoubleHeadDataControl.Current.IsUnLock())
                                        {
                                            Holly.Log.HlLogger.Write("HOLLY AOI ====> DoubleRailDoubleHead unlock otherSide SetY24(false)");
                                            CentralControlPLCCommand.Current.SetY24(false);
                                        }
                                    }
                                    // 20210715 双轨双头解锁条码变更对应 修改 End
                                    // 20200319 双面机防撞代码恢复 追加 End
                                }

                                // 本机锁定
                                CentralControlPLCCommand.Current.SetY24(true);
                                Holly.Log.HlLogger.Write("HOLLY AOI ====> DoubleRailDoubleHead lock. SetY24(true)");
                            }
                        }
                        //if (Customization.Current.DoubleRailDoubleHead.IsEnabled)
                        //{
                        //    System.Threading.Thread.Sleep(200);
                        //}
                        popMaxStep();
                        Holly.Log.HlLogger.Write("Holly AOI ====> After popMaxStep() Row = " + realRow + " ; TotalRows = " + _blockPath.Rows);

                    }

                    // 20240709 环旭相机切程序_飞拍 【范克文】 追加 Start
                    if (Customization.Current.CameraChangeProgramShopfloor.IsEnabled && Customization.Current.CameraChangeProgramShopfloor.IsTaiDaPLC)
                    {
                        for (int rowBlack = _blockPath.Rows; rowBlack < CameraChangeProgramManager.Current.MaxProgramPath.Rows; rowBlack++)
                        {
                            for (int colBlack = 0; colBlack < CameraChangeProgramManager.Current.MaxProgramPath.Columns; colBlack++)
                            {
                                blackData.Pin((p, len) =>
                                {
                                    var imageData = ImageData.Attach(imageWidth, imageHeight, p, len, imageWidth, pixelFormatBlack);
                                    {
                                        try
                                        {
                                            meshBufferManager.WriteImageData(rowBlack, colBlack, LightingMode.Top, imageData);
                                            meshBufferManager.WriteImageData(rowBlack, colBlack, LightingMode.Side, imageData);
                                        }
                                        finally
                                        { }
                                    }
                                });
                            }
                        }
                    }
                    // 20240709 环旭相机切程序_飞拍 【范克文】 追加 End

                    //20230717 立景多程式不等待结果拍照 [徐明武] 追加 Start
                    //注:此处修改目的是，在多程式拍照过程中，让拍照和数据处理并行，提升效率。
                    WaitInspectionFinishedForFrontProgramming();
                    //20230717 立景多程式不等待结果拍照 [徐明武] 追加 End

                    // 20230807 采集图像后立马提交图像 【刘亚杰】 追加 Start
                    if (Customization.Current.GrabFinishCommitImage)
                    {
                        if (isCancelled)
                        {
                            MeshBufferManager.Current.ClearBuffer();
                        }
                        else
                        {
                            //20241206 AVI拍 拍照完成信号和出板信号 【徐明武】 追加  Start
                            SendGrabFinishSignal();
                            //20241206 AVI拍 拍照完成信号和出板信号 【徐明武】 追加  End
                            MeshBufferManager.Current.Commit();
                        }
                    }
                    // 20230807 采集图像后立马提交图像 【刘亚杰】 追加 End

                    Holly.Log.HlLogger.Write("Holly AOI ====> digitizer.StopGrab()");

                    digitizer.StopGrab(isTimeOut);

                    Holly.Log.HlLogger.Write("Holly AOI ====> digitizer.StopGrab() end");

                    stopwatch.Stop();
                    InspectionCycleTimeManager.Current.CaptureImageCost = stopwatch.Elapsed;

                    //finally
                    try
                    {
                        if (frameData != null)
                        {
                            MemoryPool.Recycle(frameData);
                        }

                        if (isCancelled)
                        {
                            progressListener.Cancel();

                            var log = new LogEntry();
                            log.Categories.Add(LogCategories.Capture);
                            log.Severity = TraceEventType.Warning;
                            log.Message = "Capture is cancelled.";
                            Logger.Write(log);

                            //if (!opResult.IsCompleted)
                            //{
                            //    opResult.Cancel();
                            //    m.Pause();
                            //}
                        }
                        else
                        {
                            progressListener.Complete();
                        }

                        if (isCancelled || isTimeOut)
                        {
                            digitizer.Close();
                            Holly.Log.HlLogger.Write("Holly AOI ====> digitizer.Close()");
                        }
                        else if (digitizer.IsOpened)
                        {
                            digitizer.StopGrab(false);
                        }

                        // 20201104 通用版本切换程序 追加 Start
                        if (Customization.Current.SwitchProgram.IsEnabled)
                        {
                            digitizer.Reset();
                            digitizer.ResetPumpFrame();
                        }
                        // 20201104 通用版本切换程序 追加 End

                        // 20230902 自动运行每次进板开关相机 【刘亚杰】 修改 Start
                        if (Customization.Current.IsOpenCameraEveryBoardIn)
                        {
                            digitizer.Close();
                            Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_ digitizer Close");
                        }
                        // 20230902 自动运行每次进板开关相机 【刘亚杰】 修改 End

                        //Holly.Log.HlLogger.Write("Holly AOI ====> MeshBufferManager.Current.Commit()");

                        if (isCancelled)
                        {
                            MeshBufferManager.Current.ClearBuffer();
                        }
                        else
                        {
                            // 20201019 MarkError（检测太快）对应 追加 Start
                            // 20241121 条码枪装机外条码处理对应前移(从AOI_REPAIR3D_2500W移植功能) 修改 Start
                            //BarcodeDataControl.Current.HandleBarcode();

                            //条码枪装机外堆板时：第一块板刚进，第二块板就读条码，HandleBarcode()移到进板前
                            if (Customization.Current.IsBarcodeScannerInMachine)
                            {
                                BarcodeDataControl.Current.HandleBarcode();
                            }
                            // 20241121 条码枪装机外条码处理对应前移(从AOI_REPAIR3D_2500W移植功能) 修改 End    
                            // 20201019 MarkError（检测太快）对应 追加 End

                            //20230716 等待处理结束 【徐明武】 追加 Start
                            //注：在计算和处理并行检测中，
                            if (GlobalDataManager.Current.IsAutoRun)
                            {
                                bool enableCommit = GlobalDataManager.Current.IsDoingInspection;
                                while (enableCommit)
                                {
                                    enableCommit = GlobalDataManager.Current.IsDoingInspection;
                                    System.Threading.Thread.Sleep(50);
                                }
                            }
                            //20230716 等待处理结束 【徐明武】 追加 End
                            // 20230807 采集图像后立马提交图像 【刘亚杰】 修改 Start
                            //MeshBufferManager.Current.Commit();

                            if (!Customization.Current.GrabFinishCommitImage)
                            {
                                //20241206 AVI拍 拍照完成信号和出板信号 【徐明武】 追加  Start
                                SendGrabFinishSignal();
                                //20241206 AVI拍 拍照完成信号和出板信号 【徐明武】 追加  End
                                MeshBufferManager.Current.Commit();
                            }

                            // 20230807 采集图像后立马提交图像 【刘亚杰】 修改 End
                        }
                        //Holly.Log.HlLogger.Write("Holly AOI ====> MeshBufferManager.Current.Commit() end");
                    }
                    catch (Exception ex)
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI =====> Grab rail 1 exception = " + ex.ToString());
                        isCancelled = true;
                        //return null;
                    }
                    //finally

                    //opResult = m.SmartReleaseBoard();
                    if (isCancelled || isTimeOut)
                    {
                        GlobalDataManager.Current.IsCameraCancelled = true;
                        Holly.Log.HlLogger.Write("HOLLY AOI =====> Grab rail 1 isCancelled ");
                        //return null;
                    }
                    else
                    {
                        GlobalDataManager.Current.CycleTimes.Add(Math.Round((double)stopwatch.ElapsedMilliseconds / 1000, 2));
                        //return opResult;
                    }
                    return opResult;
                }
                //catch (Exception ex)
                //{
                //    Holly.Log.HlLogger.Write("HOLLY AOI =====> Grab rail 1 exception = " + ex.ToString());
                //    isCancelled = true;
                //    return null;
                //}
                finally
                {
                    //    if (frameData != null)
                    //    {
                    //        MemoryPool.Recycle(frameData);
                    //    }

                    //    if (isCancelled)
                    //    {
                    //        progressListener.Cancel();

                    //        var log = new LogEntry();
                    //        log.Categories.Add(LogCategories.Capture);
                    //        log.Severity = TraceEventType.Warning;
                    //        log.Message = "Capture is cancelled.";
                    //        Logger.Write(log);

                    //        //if (!opResult.IsCompleted)
                    //        //{
                    //        //    opResult.Cancel();
                    //        //    m.Pause();
                    //        //}
                    //    }
                    //    else
                    //    {
                    //        progressListener.Complete();
                    //    }

                    //    if (isCancelled)
                    //    {
                    //        digitizer.Close();
                    //    }
                    //    else if (digitizer.IsOpened)
                    //    {
                    //        digitizer.StopGrab();
                    //    }

                    //    if (isCancelled)
                    //    {
                    //        MeshBufferManager.Current.ClearBuffer();
                    //    }
                    //    else
                    //    {
                    //        MeshBufferManager.Current.Commit();
                    //    }
                }

            }
        }

        //20241206 AVI拍 拍照完成信号和出板信号 【徐明武】 追加  Start
        //注释：告诉PLC拍照完成,地址为1507，值为512
        private static void SendGrabFinishSignal()
        {
            try
            {
                var m = App.Current.GetService<Machine>();
                if (m == null)
                {
                    Holly.Log.HlLogger.Write("HOLLY AOI ImageAcquisitionMachine SendGrabFinishSignal m == null");
                    return;
                }

                m.SendGrabFinishSignal();
            }
            catch (Exception ex)
            {
                Holly.Log.HlLogger.Write("HOLLY AOI ImageAcquisitionMachine Exception :" + ex);
            }

        }
        //20241206 AVI拍 拍照完成信号和出板信号 【徐明武】 追加  End

        private PixelFormat GetPixelFormat(ICamera digitizer)
        {
            PixelFormat pixelFormatBlack = PixelFormat.BayerRGGB;
            if (digitizer is Holly.Cameras.Jai.AB201GE || digitizer is Holly.Cameras.Jai.SP5000GE2 || digitizer is Holly.Cameras.Jai.GO5000GE || digitizer is Holly.Cameras.Jai.GO5000U3)
            {
                pixelFormatBlack = PixelFormat.BayerGRBG;
            }
            else if (digitizer is Holly.Cameras.Jai.BLS5000U3)
            {
                pixelFormatBlack = PixelFormat.BayerBGGR;
            }
            else if (digitizer is Holly.Cameras.Jai.GO5100GE)
            {
                pixelFormatBlack = PixelFormat.BayerRGGB;
            }
            else if (digitizer is Holly.Cameras.Jai.GOX12401U3)
            {
                pixelFormatBlack = PixelFormat.BayerRGGB;
            }
            else if (digitizer is Holly.Cameras.MVView.A55001GE)
            {
                pixelFormatBlack = PixelFormat.BayerGBRG;
            }
            else if (digitizer is Holly.Cameras.MVView.A7500CU)
            {
                pixelFormatBlack = PixelFormat.BayerRGGB;
            }
            else if (digitizer is Holly.Cameras.MVView.A5B57CU200E)
            {
                pixelFormatBlack = PixelFormat.BayerGBRG;
            }
            else if (digitizer is Holly.Cameras.MVView.A7A20CU201)
            {
                pixelFormatBlack = PixelFormat.BayerRGGB;
            }
            else if (digitizer is Holly.Cameras.Jai.CXPKMP00158)
            {
                pixelFormatBlack = PixelFormat.BayerRGGB;
            }
            else if (digitizer is Holly.Cameras.MVView.SVSCamera342CGE)
            {
                pixelFormatBlack = PixelFormat.R8G8B8A8;
            }
            return pixelFormatBlack;
        }

        public void PrepareBoardInformationSwitchProgram(Length2 boardSize, Length2 boardOrigin, Length boardThickness, ushort snapshotType, string snapshotRow, bool isSingleShuttle)
        {
            Debug.Assert(boardSize != Length2.Zero);

            _boardSize = boardSize;
            _boardOrigin = boardOrigin;

            _snapshotRow = snapshotRow;
            _snapshotRows = snapshotRow.Split(',');

            _isSingleShuttle = isSingleShuttle;
            Holly.Log.HlLogger.Write("HOLLY AOI =====> SwitchProgram boardOrigin:" + boardOrigin);
            _blockPath = MachineOperations.CalculateBlockPath(boardSize, boardOrigin, snapshotType);
            if (MachineParams.Current.ScanType == 0)
            {
                _snapshotPath = CalculateSnapshotPath(_blockPath, boardOrigin, boardSize, snapshotRow);
                if (snapshotRow != string.Empty)
                {
                    int index = 0;
                    foreach (BlockPath.BlockPoint pt in _blockPath.BlockPoints)
                    {
                        int y = pt.Row;
                        if (!snapshotRow.Contains((y + 1).ToString()))
                        {
                            continue;
                        }
                        _blockPath0[index++] = pt;
                    }
                }
                else
                {
                    _blockPath0 = _blockPath;
                }
            }
            //var meshBufferManager = MeshBufferManager.Current;
            //meshBufferManager.PrepareBuffer(_blockPath.Rows, _blockPath.Columns);
            //DigitizerCalibrationManager dcm = App.Current.GetService<DigitizerCalibrationManager>();
            //dcm.BoardThickness = boardThickness;
        }

        // 20210122 双轨双头直通对应 追加 Start
        private bool IsByPass()
        {
            bool ret = false;

            // 20210227 PLC问题（直通拍照点位共用） 删除 Start
            //int y25 = CentralControlPLCCommand.Current.ReadY25();
            //if (y25 == 1)
            //{
            //    ret = true;
            //}
            // 20210227 PLC问题（直通拍照点位共用） 删除 End

            return ret;
        }
        // 20210122 双轨双头直通对应 追加 End

        // 交替拍照，拍单张
        IOperationResult Grab_1_Single(IProgressListener<int, string> progressListener)
        {
            using (MeshBufferManager.Current.Use())
            {
                Holly.Log.HlLogger.Write("HOLLY AOI ====> ImageAcquisitionMachine.Grab_1_Single ");
                var m = App.Current.GetService<Machine>();
                m.Update();

                int queryNum = _blockPath.Columns;

                var meshBufferManager = MeshBufferManager.Current;

                ICamera digitizer = App.Current.GetService<ICamera>();
                // 20250109 拍单张失效 【刘红绅】 追加 Start
                if (Customization.Current.IsOpenCameraEveryBoardIn)
                {
                    if (!digitizer.IsOpened)
                    {
                        progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_InitializingDigitizer);
                        //progressListener.ReportProgress(0, 1, "MV_TEST:STEP 1 BEGIN");
                        Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_Single Digitizer Open");
                        int lRect = digitizer.OpenEx(true);
                        //progressListener.ReportProgress(0, 1, "MV_TEST:STEP 1 [ERR CODE]:" + lRect);
                        Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_Single Digitizer Open over");
                        //progressListener.ReportProgress(0, 1, "MV_TEST:STEP 1 OVER");
                        progressListener.Complete();
                    }
                    digitizer.BufferCount = MachineParams.Current.BlockBufferSize * 2;
                }
                // 20250109 拍单张失效 【刘红绅】 追加 End
                int imageWidth = digitizer.Width;
                int imageHeight = digitizer.Height;
                byte[] frameData = null;

                bool isCancelled = true;
                //bool isTimeOut = false;
                //ITaskResult opResult = null;

                //20240222 淮安鹏鼎数据错乱对应【张晨铖】 追加 Start
                bool isTimeOut = false;
                //20240222 淮安鹏鼎数据错乱对应【张晨铖】 追加 End

                try
                {
                    frameData = MemoryPool.Alloc(imageWidth * imageHeight, false);

                    var mParams = MachineParams.Current;
                    // go
                    var goOp = m.CreateBatchOperation();
                    var steps = new Queue<int>(_blockPath.Rows);
                    //goOp.InitializeMachine();
                    //int triggerDelay = 0;
                    var shuttleModeParmas = mParams.ShuttleMode;
                    int onflyCycle = (int)Math.Round(shuttleModeParmas.FeedbackPlugsPerMM * mParams.BlockSize.X.Value * 1m);
                    //int[] triggers = new int[] { onflyCycle / 4 - shuttleModeParmas.TriggerDelay, onflyCycle * 3 / 4 - shuttleModeParmas.TriggerDelay };
                    //int lightPlugs = new Length(0.1m, LengthUnit.Millimeter).ToPlugs()/2;
                    var snapshotSpeed = mParams.SnapshotSpeed;

                    var origin = this.GetOriginPosition().ToPlugs();
                    var releaseBoardPosition = new int2(mParams.CalibratePlugs(origin).X, mParams.ReleaseBoardPosition.Y.ToPlugs());
                    goOp.Initialize(shuttleModeParmas.TriggerPolarity ? PolarityFlags.None : PolarityFlags.SnapshotTrigger);

                    int2 newOrigin = origin;
                    /*****暂时注释掉*/
                    if (!MachineParams.Current.SerialPort.IsHuichuan)
                    {
                        newOrigin.X = newOrigin.X - (mParams.BlockSize.X / 4).ToPlugs();
                    }
                    /*****/
                    goOp.LocateLoader(new int2(m.X, m.Y), mParams.CalibratePlugs(newOrigin), true);
                    //goOp.SwichOnfly(false);
                    //goOp.SetOnflyCycle(onflyCycle);
                    //goOp.SetOnflyTriggers(triggers);
                    //goOp.SetOnflyLight(LightFlags.Top, triggers[0] - shuttleModeParmas.LightDelay, triggers[0] - shuttleModeParmas.LightDelay + shuttleModeParmas.LightDuration);
                    //goOp.SetOnflyLight(LightFlags.Side, triggers[1] - shuttleModeParmas.LightDelay, triggers[1] - shuttleModeParmas.LightDelay + shuttleModeParmas.LightDuration);

                    //goOp.EnsureGrippedBoard(m.GetCurrentPlugPosition());
                    //goOp.SmartLocate(MachineParams.Current.ReleaseBoardPosition, MachineParams.Current.OriginPosition);
                    //opResult = goOp.Execute();
                    //opResult.Wait();
                    var positions = new int2[_blockPath.Rows, 2];
                    var triggerStart = onflyCycle / 2 + shuttleModeParmas.TriggerDelay;
                    var lightOnStart = onflyCycle / 2 + shuttleModeParmas.LightDelay;
                    var lightOnWidth = shuttleModeParmas.LightDuration;
                    var triggerWidth = shuttleModeParmas.TriggerDuration == 0 ? lightOnWidth : shuttleModeParmas.TriggerDuration;

                    //Holly.Log.HlLogger.Write("HOLLY AOI ============> onflyCycle =  " + onflyCycle.ToString());
                    //Holly.Log.HlLogger.Write("HOLLY AOI ============> triggerStart =  " + triggerStart.ToString());
                    //Holly.Log.HlLogger.Write("HOLLY AOI ============> triggerWidth =  " + triggerWidth.ToString());
                    //Holly.Log.HlLogger.Write("HOLLY AOI ============> lightOnStart =  " + lightOnStart.ToString());
                    //Holly.Log.HlLogger.Write("HOLLY AOI ============> lightOnWidth =  " + lightOnWidth.ToString());

                    int2 lastPosition = new int2(0, 0);
                    for (int row = 0; row < _blockPath.Rows; ++row)
                    {
                        //跳行拍
                        if (_snapshotRow != string.Empty)
                        {
                            if (!_snapshotRows.Contains((row + 1).ToString()))
                            {
                                continue;
                            }
                        }

                        var row1 = -row;
                        if (MachineParams.Current.SerialPort.IsHuichuan)
                        {
                            row1 = row;
                        }

                        var pos0 = origin + new Length2(Length.Zero, mParams.BlockSize.Y * (decimal)(row1)).ToPlugs();
                        pos0 = mParams.CalibratePlugs(pos0);
                        int2 pos1;
                        if (mParams.IsInlineMode && !mParams.InlineMachine.LeftToRight)
                        {
                            pos1 = origin + new Length2(mParams.BlockSize.X * (decimal)_blockPath.Columns * -1, mParams.BlockSize.Y * (decimal)(row1)).ToPlugs();
                            pos1 = pos1 - new Length2(MachineParams.Current.SnapshotDelay, new Length(0, LengthUnit.Millimeter)).ToPlugs();
                        }
                        else
                        {
                            pos1 = origin + new Length2(mParams.BlockSize.X * (decimal)_blockPath.Columns, mParams.BlockSize.Y * (decimal)(row1)).ToPlugs();
                            pos1 = pos1 + new Length2(MachineParams.Current.SnapshotDelay, new Length(0, LengthUnit.Millimeter)).ToPlugs();
                        }
                        pos1 = mParams.CalibratePlugs(pos1);

                        //飞梭取象，加偏移量
                        KeyValuePair<int, decimal>[] lxoffsets = null;
                        if (mParams.LXMappings != null)
                        {
                            decimal minLength = Math.Abs(_boardSize.X.Value - mParams.LXMappings[0].Key);
                            lxoffsets = mParams.LXMappings[0].Value;
                            foreach (KeyValuePair<int, KeyValuePair<int, decimal>[]> pair in mParams.LXMappings)
                            {
                                if (Math.Abs(_boardSize.X.Value - pair.Key) < minLength)
                                {
                                    minLength = Math.Abs(_boardSize.X.Value - pair.Key);
                                    lxoffsets = pair.Value;
                                }
                            }
                        }
                        else if (mParams.LXOffsets != null)
                        {
                            lxoffsets = mParams.LXOffsets;
                        }

                        if (lxoffsets != null)
                        {
                            foreach (KeyValuePair<int, decimal> pair in lxoffsets)
                            {
                                if (row + 1 == pair.Key)
                                {
                                    Length offset = new Length(pair.Value, LengthUnit.Millimeter);
                                    int offsetX = offset.ToPlugs();
                                    pos0.X += offsetX;
                                    pos1.X += offsetX;
                                }
                            }
                        }

                        if (mParams.LYOffsets != null)
                        {
                            foreach (KeyValuePair<int, decimal> pair in mParams.LYOffsets)
                            {
                                if (row + 1 == pair.Key)
                                {
                                    Length offset = new Length(pair.Value, LengthUnit.Millimeter);
                                    int offsetY = offset.ToPlugs();
                                    pos0.Y += offsetY;
                                    pos1.Y += offsetY;
                                }
                            }
                        }

                        if (row % 2 != 0 && MachineParams.Current.SingleShuttleEvenCoordination != 0)
                        {
                            Length offset = new Length((decimal)MachineParams.Current.SingleShuttleEvenCoordination, LengthUnit.Millimeter);
                            int offsetX = offset.ToPlugs();
                            pos0.X += offsetX;
                            pos1.X += offsetX;
                        }
                        //end

                        if (!MachineParams.Current.SerialPort.IsHuichuan)
                        {
                            pos0.X -= (mParams.BlockSize.X / 4).ToPlugs();
                            pos1.X -= (mParams.BlockSize.X / 4).ToPlugs();
                        }

                        if ((row & 1) == 0)
                        {
                            positions[row, 0] = pos0;
                            positions[row, 1] = pos1;
                            lastPosition = pos1;

                            goOp.LocateCamera(pos0, false, true);
                            if (MachineParams.Current.SerialPort.IsHuichuan)
                            {
                                goOp.Onfly(OnflyFlags.None, onflyCycle, triggerStart, triggerWidth, lightOnStart, lightOnWidth, queryNum);
                            }
                            else
                            {
                                goOp.Onfly(OnflyFlags.None, onflyCycle, triggerStart, triggerWidth, lightOnStart, lightOnWidth);
                            }
                            steps.Enqueue(goOp.OperationCount);
                            goOp.LocateCamera(pos1, true, true);
                        }
                        else
                        {
                            positions[row, 0] = pos1;
                            positions[row, 1] = pos0;
                            lastPosition = pos0;

                            goOp.LocateCamera(pos1, false, true);
                            if (MachineParams.Current.SerialPort.IsHuichuan)
                            {
                                goOp.Onfly(OnflyFlags.CountDown | OnflyFlags.SideFirst, onflyCycle, triggerStart, triggerWidth, lightOnStart, lightOnWidth, queryNum);
                            }
                            else
                            {
                                goOp.Onfly(OnflyFlags.CountDown | OnflyFlags.SideFirst, onflyCycle, triggerStart, triggerWidth, lightOnStart, lightOnWidth);
                            }
                            steps.Enqueue(goOp.OperationCount);
                            goOp.LocateCamera(pos0, true, true);
                        }
                    }

                    if (MachineParams.Current.IsInlineMode && !_isRequestOne && (!AutoRunSettings.Default.IsOfflineMode || AutoRunSettings.Default.AutoRunOfflineMode != 2))
                    {
                        GlobalDataManager.Current.LastPosition = positions[_blockPath.Rows - 1, 1];
                        GlobalDataManager.Current.ReleaseBoardPosition = origin;//releaseBoardPosition;
                                                                                //goOp.LocateLoader(positions[_blockPath.Rows - 1, 1], origin, false);
                    }
                    else
                    {
                        if (MachineParams.Current.IsInlineMode)
                        {
                            goOp.LocateLoader(lastPosition, origin, false);
                        }
                        else
                        {
                            goOp.LocateLoader(lastPosition, releaseBoardPosition, false);
                        }
                    }

                    digitizer.BufferCount = queryNum;
                    digitizer.StartGrab(0);

                    TimeSpan timeout = new TimeSpan(0, 0, 10);

                    Stopwatch stopwatch = new Stopwatch();
                    stopwatch.Start();



                    Action popMaxStep = () =>
                    {
                        if (steps.Count > 0)
                            goOp.MaxStep = steps.Dequeue();
                        else
                            goOp.MaxStep = goOp.OperationCount;
                    };

                    popMaxStep();
                    popMaxStep();
                    var opResult = goOp.Execute(mParams.OperationStepTimeout);

                    //var image = ImageData.Create(1, 1, PixelFormat.BayerRGGB);
                    //image.AccessMemory<byte>(mem => mem.Fill(pos => (byte)0));

                    for (int row = 0; row < _blockPath.Rows; row++)
                    {
                        int grabNum = 0;
                        bool rightToLeft = (row & 1) == 0;

                        //跳行拍
                        if (_snapshotRow != string.Empty)
                        {
                            if (!_snapshotRows.Contains((row + 1).ToString()))
                            {
                                using (var image = ImageData.Create(1, 1, PixelFormat.L8))
                                {
                                    image.AccessMemory<byte>(mem => mem.Fill(pos => (byte)0));
                                    while (grabNum < queryNum * 2)
                                    {
                                        LightingMode lightingMode;

                                        if (rightToLeft)
                                        {
                                            lightingMode = (grabNum & 1) == 0 ? LightingMode.Top : LightingMode.Side;
                                        }
                                        else
                                        {
                                            lightingMode = (grabNum & 1) != 0 ? LightingMode.Top : LightingMode.Side;
                                        }

                                        try
                                        {
                                            //progressListener.ReportProgress(grabNum + row * queryNum, queryNum, status);

                                            int column = rightToLeft ? grabNum / 2 : _blockPath.Columns - grabNum / 2 - 1;
                                            meshBufferManager.WriteImageData(row, column, lightingMode, image);

                                            //Holly.Log.HlLogger.Write("HOLLY AOI ============> NOT GRAB row = " + row.ToString() + "; column = " + column.ToString());
                                        }
                                        finally
                                        {
                                            ++grabNum;
                                            //    progressListener.ReportProgress(grabNum, queryNum, "I:" + grabNum.ToString());
                                        }
                                    }
                                }

                                //++row;
                                continue;
                            }
                        }


                        Stopwatch timeoutStopwatch = Stopwatch.StartNew();

                        while (grabNum < queryNum)
                        {
                            Holly.Log.HlLogger.Write("HOLLY AOI ============> grabNum = " + grabNum.ToString());

                            if (opResult.HasError)
                            {
                                // 20191104 异常信息输出 追加 Start
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> Grab_1_Single opResult.HasError = " + opResult.HasError);
                                try
                                {
                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> Grab_1_Single opResult.Exception = " + opResult.Exception);
                                }
                                catch (Exception e)
                                {

                                }
                                // 20191104 异常信息输出 追加 End
                                break;
                            }

                            if (!digitizer.IsOpened)
                            {
                                // 20191104 异常信息输出 追加 Start
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> Grab_1_Single digitizer.IsOpened = " + digitizer.IsOpened);
                                // 20191104 异常信息输出 追加 End
                                break;
                            }

                            if (timeoutStopwatch.Elapsed >= timeout)
                            {
                                timeoutStopwatch.Stop();

                                //20240222 淮安鹏鼎数据错乱对应【张晨铖】 追加 Start
                                isTimeOut = true;
                                //20240222 淮安鹏鼎数据错乱对应【张晨铖】 追加 End

                                // 20191104 异常信息输出 追加 Start
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> Grab_1_Single timeout");
                                // 20191104 异常信息输出 追加 End
                                break;
                            }
                            string status =
                                string.Format(Lang.UI.UI_Label_WaitingImage, string.Format("{0}-{1}", row + 1, grabNum), string.Format("{0}-{1}", _blockPath.Rows, queryNum)) +
                                " " +
                                string.Format(Lang.UI.UI_Label_ElapsedTime, Math.Round((double)stopwatch.ElapsedMilliseconds / 1000, 2));

                            progressListener.ReportProgress(grabNum + row * queryNum, queryNum * _blockPath.Rows, status);

                            int frameId = 0;
                            bool frameCaped = digitizer.QueryNextFrame(ref frameData, ref frameId);

                            //Holly.Log.HlLogger.Write("MV_TEST:STEP 3 ============> frameId QueryFrame Res " + frameCaped + " as ID:" + (frameId == 0 ? " <NOT READY>" : ""+frameId));

                            if (frameCaped)
                            {
                                LightingMode lightingMode = LightingMode.Top;

                                //System.IO.File.WriteAllBytes(@"e:\test", frameData);
                                if (MachineParams.Current.IsTest)
                                {
                                    string dir = "E:\\RawImage";
                                    if (!Directory.Exists(dir))
                                    {
                                        Directory.CreateDirectory(dir);
                                    }
                                    string filePath = row.ToString() + "_" + grabNum.ToString() + "_" + lightingMode.ToString();
                                    filePath = Path.Combine(dir, filePath);
                                    System.IO.File.WriteAllBytes(filePath, frameData);
                                }

                                frameData.Pin((p, len) =>
                                {
                                    PixelFormat pixelFormat = PixelFormat.BayerRGGB;
                                    if (digitizer is Holly.Cameras.Jai.AB201GE || digitizer is Holly.Cameras.Jai.SP5000GE2 || digitizer is Holly.Cameras.Jai.GO5000GE || digitizer is Holly.Cameras.Jai.GO5000U3)
                                    {
                                        pixelFormat = PixelFormat.BayerGRBG;
                                    }
                                    else if (digitizer is Holly.Cameras.Jai.BLS5000U3)
                                    {
                                        pixelFormat = PixelFormat.BayerBGGR;
                                    }
                                    else if (digitizer is Holly.Cameras.Jai.GO5100GE)
                                    {
                                        pixelFormat = PixelFormat.BayerRGGB;
                                    }
                                    else if (digitizer is Holly.Cameras.MVView.A55001GE)
                                    {
                                        pixelFormat = PixelFormat.BayerGBRG;
                                    }
                                    else if (digitizer is Holly.Cameras.MVView.A7500CU)
                                    {
                                        pixelFormat = PixelFormat.BayerRGGB;
                                    }
                                    // 20201124 2400w相机 追加 Start
                                    else if (digitizer is Holly.Cameras.MVView.A5B57CU200E)
                                    {
                                        pixelFormat = PixelFormat.BayerGBRG;
                                    }
                                    // 20201124 2400w相机 追加 End
                                    // 20201229 A7A20CU201 追加 Start
                                    else if (digitizer is Holly.Cameras.MVView.A7A20CU201)
                                    {
                                        pixelFormat = PixelFormat.BayerRGGB;
                                    }
                                    // 20201229 A7A20CU201 追加 End
                                    //20221010 CXPKMP00158 追加 Start
                                    else if (digitizer is Holly.Cameras.Jai.CXPKMP00158)
                                    {
                                        pixelFormat = PixelFormat.BayerRGGB;
                                    }
                                    else if (digitizer is Holly.Cameras.MVView.SVSCamera342CGE)
                                    {
                                        pixelFormat = PixelFormat.R8G8B8A8;
                                    }
                                    //20221010 CXPKMP00158 追加 End
                                    //20230109 Basler 追加 Start
                                    else if (digitizer is Holly.Cameras.Basler.A2A4504_18USPRO)
                                    {
                                        pixelFormat = PixelFormat.BayerRGGB;
                                    }
                                    //20230109 Basler 追加 End
                                    // 20240513 新增2500W相机AX5B57CT200 【刘红绅】 追加 Start
                                    else if (digitizer is Holly.Cameras.MVView.AX5B57CT200)
                                    {
                                        pixelFormat = PixelFormat.BayerGBRG;
                                    }
                                    // 20240513 新增2500W相机AX5B57CT200 【刘红绅】 追加 End
                                    // 20240718 太原出差修改 【王晨】 追加 Start
                                    else if (digitizer is Holly.Cameras.MVView.AX5B57CT200_2)
                                    {
                                        pixelFormat = PixelFormat.BayerGBRG;
                                    }
                                    // 20240718 太原出差修改 【王晨】 追加 End
                                    var imageData = ImageData.Attach(imageWidth, imageHeight, p, len, imageWidth, pixelFormat);//BayerGRBG);//
                                    {
                                        Logger.Write(
                                            string.Format("Consume Image Data {0}.", grabNum),
                                            new string[] { LogCategories.Digitizer, LogCategories.Capture });


                                        try
                                        {
                                            //progressListener.ReportProgress(grabNum + row * queryNum, queryNum, status);

                                            int column = rightToLeft ? grabNum : _blockPath.Columns - grabNum - 1;
                                            //int column = rightToLeft ? grabNum / 2 : _blockPath.Columns - grabNum / 2 - 1;
                                            meshBufferManager.WriteImageData(row, column, LightingMode.Top, imageData);

                                            //Holly.Log.HlLogger.Write("HOLLY AOI ============> grabNum = " + grabNum.ToString() + "; rightToLeft = " + rightToLeft.ToString() + "  Write Top Image = " + row.ToString() + "; column = " + column.ToString());
                                            //Holly.Log.HlLogger.Write("HOLLY AOI ============> Write Top Image = " + row.ToString() + "; column = " + column.ToString());

                                            //meshBufferManager.WriteImageData(row, column, LightingMode.Side, image);

                                            // 20200923 不输出
                                            //Holly.Log.HlLogger.Write("HOLLY AOI ============> Write Top Image = " + row.ToString() + "; column = " + column.ToString());
                                        }
                                        finally
                                        {
                                            ++grabNum;
                                            //    progressListener.ReportProgress(grabNum, queryNum, "I:" + grabNum.ToString());
                                        }
                                    }
                                });

                                // reset timeout
                                timeoutStopwatch.Reset();
                                timeoutStopwatch.Start();
                            }
                            //else if (frameId >= 0)  // 丢帧
                            //{
                            //    break;
                            //}
                        }

                        #region 临时删除
                        while (grabNum < queryNum)
                        {
                            LightingMode lightingMode = LightingMode.Side;

                            //var pixelSize = MeshBufferManager.GetMeshBlockSize();
                            //using (var image = ImageData.Create(pixelSize.X, pixelSize.Y, PixelFormat.BayerRGGB))
                            using (var image = ImageData.Create(1, 1, PixelFormat.BayerRGGB))
                            {
                                image.AccessMemory<byte>(mem => mem.Fill(pos => (byte)0));

                                try
                                {
                                    //progressListener.ReportProgress(grabNum + row * queryNum, queryNum, status);

                                    int column = grabNum;//rightToLeft ? grabNum / 2 : _blockPath.Columns - grabNum / 2 - 1;
                                    meshBufferManager.WriteImageData(row, column, lightingMode, image);

                                    Holly.Log.HlLogger.Write("HOLLY AOI ============> NOT GRAB row = " + row.ToString() + "; column = " + column.ToString());
                                }
                                finally
                                {
                                    ++grabNum;
                                    //    progressListener.ReportProgress(grabNum, queryNum, "I:" + grabNum.ToString());
                                }
                            }
                        }
                        #endregion
                        ////var pixelSize = MeshBufferManager.GetMeshBlockSize();
                        ////using (var image = ImageData.Create(pixelSize.X, pixelSize.Y, PixelFormat.BayerRGGB))
                        //using (var image = ImageData.Create(1, 1, PixelFormat.BayerRGGB))
                        //{
                        //    image.AccessMemory<byte>(mem => mem.Fill(pos => (byte)0));
                        //    //grabNum = 0;
                        //    while (grabNum < queryNum)
                        //    {
                        //        try
                        //        {
                        //            //progressListener.ReportProgress(grabNum + row * queryNum, queryNum, status);
                        //            int column = rightToLeft ? grabNum : _blockPath.Columns - grabNum - 1;
                        //            meshBufferManager.WriteImageData1(row, column, LightingMode.Top, image);

                        //            Holly.Log.HlLogger.Write("HOLLY AOI ============> Write Top Image = " + row.ToString() + "; column = " + column.ToString());
                        //        }
                        //        finally
                        //        {
                        //            ++grabNum;
                        //            //    progressListener.ReportProgress(grabNum, queryNum, "I:" + grabNum.ToString());
                        //        }
                        //    }
                        //}


                        //digitizer.GrabHalt();
                        //++row;

                        isCancelled = grabNum < queryNum;
                        if (isCancelled)
                            break;

                        popMaxStep();

                    }


                    stopwatch.Stop();
                    InspectionCycleTimeManager.Current.CaptureImageCost = stopwatch.Elapsed;

                    //finally
                    //20240222 淮安鹏鼎数据错乱对应【张晨铖】 追加 Start
                    try
                    {
                        if (frameData != null)
                        {
                            MemoryPool.Recycle(frameData);
                        }

                        if (isCancelled)
                        {
                            progressListener.Cancel();

                            var log = new LogEntry();
                            log.Categories.Add(LogCategories.Capture);
                            log.Severity = TraceEventType.Warning;
                            log.Message = "Capture is cancelled.";
                            Logger.Write(log);

                            if (!opResult.IsCompleted)
                            {
                                opResult.Cancel();
                                // m.Pause();
                            }
                        }
                        else
                        {
                            progressListener.Complete();
                        }

                        if (isTimeOut)
                        {
                            digitizer.Close();
                            Holly.Log.HlLogger.Write("Holly AOI ====> digitizer.Close()");
                        }
                        else if (digitizer.IsOpened)
                        {
                            digitizer.StopGrab(false);
                        }

                        // 20201104 通用版本切换程序 追加 Start
                        if (Customization.Current.SwitchProgram.IsEnabled)
                        {
                            digitizer.Reset();
                            digitizer.ResetPumpFrame();
                        }
                        // 20201104 通用版本切换程序 追加 End

                        // 20230902 自动运行每次进板开关相机 【刘亚杰】 修改 Start
                        if (Customization.Current.IsOpenCameraEveryBoardIn)
                        {
                            digitizer.Close();
                            Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_ digitizer Close");
                        }
                        // 20230902 自动运行每次进板开关相机 【刘亚杰】 修改 End

                        //Holly.Log.HlLogger.Write("Holly AOI ====> MeshBufferManager.Current.Commit()");

                        if (isCancelled)
                        {
                            MeshBufferManager.Current.ClearBuffer();
                        }
                        else
                        {
                            // 20201019 MarkError（检测太快）对应 追加 Start
                            // 20241121 条码枪装机外条码处理对应前移(从AOI_REPAIR3D_2500W移植功能) 修改 Start
                            //BarcodeDataControl.Current.HandleBarcode();

                            //条码枪装机外堆板时：第一块板刚进，第二块板就读条码，HandleBarcode()移到进板前
                            if (Customization.Current.IsBarcodeScannerInMachine)
                            {
                                BarcodeDataControl.Current.HandleBarcode();
                            }
                            // 20241121 条码枪装机外条码处理对应前移(从AOI_REPAIR3D_2500W移植功能) 修改 End
                            // 20201019 MarkError（检测太快）对应 追加 End

                            //20230716 等待处理结束 【徐明武】 追加 Start
                            //注：在计算和处理并行检测中，
                            if (GlobalDataManager.Current.IsAutoRun)
                            {
                                bool enableCommit = GlobalDataManager.Current.IsDoingInspection;
                                while (enableCommit)
                                {
                                    enableCommit = GlobalDataManager.Current.IsDoingInspection;
                                    System.Threading.Thread.Sleep(50);
                                }
                            }
                            //20230716 等待处理结束 【徐明武】 追加 End

                            MeshBufferManager.Current.Commit();
                        }
                        //Holly.Log.HlLogger.Write("Holly AOI ====> MeshBufferManager.Current.Commit() end");
                    }
                    catch (Exception ex)
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI =====> Grab rail 1 exception = " + ex.ToString());
                        isCancelled = true;
                        //return null;
                    }
                    //20240222 淮安鹏鼎数据错乱对应【张晨铖】 追加 End
                    //finally

                    //opResult = m.SmartReleaseBoard();
                    //if (isCancelled || isTimeOut)
                    //{
                    //    GlobalDataManager.Current.IsCameraCancelled = true;
                    //    Holly.Log.HlLogger.Write("HOLLY AOI =====> Grab rail 1 isCancelled ");
                    //    return null;
                    //}
                    //else
                    //{
                    //    GlobalDataManager.Current.CycleTimes.Add(Math.Round((double)stopwatch.ElapsedMilliseconds / 1000, 2));
                    //    //return opResult;
                    //}
                    return opResult;
                }
                finally
                {
                    //20240222 淮安鹏鼎数据错乱对应【张晨铖】 删除 Start
                    #region
                    //if (frameData != null)
                    //{
                    //    MemoryPool.Recycle(frameData);
                    //}

                    //if (isCancelled)
                    //{
                    //    progressListener.Cancel();

                    //    var log = new LogEntry();
                    //    log.Categories.Add(LogCategories.Capture);
                    //    log.Severity = TraceEventType.Warning;
                    //    log.Message = "Capture is cancelled.";
                    //    Logger.Write(log);

                    //    //if (!opResult.IsCompleted)
                    //    //{
                    //    //    opResult.Cancel();
                    //    //    m.Pause();
                    //    //}
                    //}
                    //else
                    //{
                    //    progressListener.Complete();
                    //}

                    //if (isCancelled)
                    //{
                    //    digitizer.Close();
                    //}
                    //else if (digitizer.IsOpened)
                    //{
                    //    digitizer.StopGrab(false);
                    //}

                    //if (isCancelled)
                    //{
                    //    MeshBufferManager.Current.ClearBuffer();
                    //}
                    //else
                    //{
                    //    MeshBufferManager.Current.Commit();
                    //}
                    #endregion
                    //20240222 淮安鹏鼎数据错乱对应【张晨铖】 删除 Start
                }

            }
        }

        // 交替拍照2(调试机器用)
        IOperationResult Grab_2(IProgressListener<int, string> progressListener)
        {
            using (MeshBufferManager.Current.Use())
            {
                var m = App.Current.GetService<Machine>();
                m.Update();

                int queryNum = _blockPath.Columns * 2;

                var meshBufferManager = MeshBufferManager.Current;

                ICamera digitizer = App.Current.GetService<ICamera>();

                int imageWidth = digitizer.Width;
                int imageHeight = digitizer.Height;
                byte[] frameData = null;

                bool isCancelled = true;
                //bool isTimeOut = false;
                //ITaskResult opResult = null;


                try
                {
                    frameData = MemoryPool.Alloc(imageWidth * imageHeight, false);

                    var mParams = MachineParams.Current;
                    // go
                    var goOp = m.CreateBatchOperation();
                    var steps = new Queue<int>(_blockPath.Rows);
                    //goOp.InitializeMachine();
                    //int triggerDelay = 0;
                    var shuttleModeParmas = mParams.ShuttleMode;
                    int onflyCycle = (int)Math.Round(shuttleModeParmas.FeedbackPlugsPerMM * mParams.BlockSize.X.Value * 0.5m);
                    //int[] triggers = new int[] { onflyCycle / 4 - shuttleModeParmas.TriggerDelay, onflyCycle * 3 / 4 - shuttleModeParmas.TriggerDelay };
                    //int lightPlugs = new Length(0.1m, LengthUnit.Millimeter).ToPlugs()/2;
                    var snapshotSpeed = mParams.SnapshotSpeed;

                    var origin = this.GetOriginPosition().ToPlugs();
                    var releaseBoardPosition = new int2(mParams.CalibratePlugs(origin).X, mParams.ReleaseBoardPosition.Y.ToPlugs());
                    goOp.Initialize(shuttleModeParmas.TriggerPolarity ? PolarityFlags.None : PolarityFlags.SnapshotTrigger);
                    goOp.LocateLoader(new int2(m.X, m.Y), mParams.CalibratePlugs(origin), true);
                    //goOp.SwichOnfly(false);
                    //goOp.SetOnflyCycle(onflyCycle);
                    //goOp.SetOnflyTriggers(triggers);
                    //goOp.SetOnflyLight(LightFlags.Top, triggers[0] - shuttleModeParmas.LightDelay, triggers[0] - shuttleModeParmas.LightDelay + shuttleModeParmas.LightDuration);
                    //goOp.SetOnflyLight(LightFlags.Side, triggers[1] - shuttleModeParmas.LightDelay, triggers[1] - shuttleModeParmas.LightDelay + shuttleModeParmas.LightDuration);

                    //goOp.EnsureGrippedBoard(m.GetCurrentPlugPosition());
                    //goOp.SmartLocate(MachineParams.Current.ReleaseBoardPosition, MachineParams.Current.OriginPosition);
                    //opResult = goOp.Execute();
                    //opResult.Wait();
                    var positions = new int2[_blockPath.Rows, 2];
                    var triggerStart = onflyCycle / 2 + shuttleModeParmas.TriggerDelay;
                    var lightOnStart = onflyCycle / 2 + shuttleModeParmas.LightDelay;
                    var lightOnWidth = shuttleModeParmas.LightDuration;
                    var triggerWidth = shuttleModeParmas.TriggerDuration == 0 ? lightOnWidth : shuttleModeParmas.TriggerDuration;
                    for (int row = 0; row < _blockPath.Rows; ++row)
                    {
                        var pos0 = origin + new Length2(Length.Zero, mParams.BlockSize.Y * (decimal)(-row)).ToPlugs();
                        pos0 = mParams.CalibratePlugs(pos0);
                        int2 pos1;
                        if (mParams.IsInlineMode && !mParams.InlineMachine.LeftToRight)
                        {
                            pos1 = origin + new Length2(mParams.BlockSize.X * (decimal)_blockPath.Columns * -1, mParams.BlockSize.Y * (decimal)(-row)).ToPlugs();
                        }
                        else
                        {
                            pos1 = origin + new Length2(mParams.BlockSize.X * (decimal)_blockPath.Columns, mParams.BlockSize.Y * (decimal)(-row)).ToPlugs();
                        }
                        pos1 = mParams.CalibratePlugs(pos1);

                        positions[row, 0] = pos0;
                        positions[row, 1] = pos1;

                        goOp.LocateCamera(pos0);
                        if (MachineParams.Current.SerialPort.IsHuichuan)
                        {
                            goOp.Onfly(OnflyFlags.None, onflyCycle, triggerStart, triggerWidth, lightOnStart, lightOnWidth, queryNum);
                        }
                        else
                        {
                            goOp.Onfly(OnflyFlags.None, onflyCycle, triggerStart, triggerWidth, lightOnStart, lightOnWidth);
                        }
                        steps.Enqueue(goOp.OperationCount);
                        goOp.LocateCamera(pos1, true);

                        //if ((row & 1) == 0)
                        //{
                        //    positions[row, 0] = pos0;
                        //    positions[row, 1] = pos1;

                        //    goOp.LocateCamera(pos0);
                        //    goOp.Onfly(OnflyFlags.None, onflyCycle, triggerStart, triggerWidth, lightOnStart, lightOnWidth);
                        //    steps.Enqueue(goOp.OperationCount);
                        //    goOp.LocateCamera(pos1, true);
                        //}
                        //else
                        //{
                        //    positions[row, 0] = pos1;
                        //    positions[row, 1] = pos0;

                        //    goOp.LocateCamera(pos1);
                        //    goOp.Onfly(OnflyFlags.CountDown | OnflyFlags.SideFirst, onflyCycle, triggerStart, triggerWidth, lightOnStart, lightOnWidth);
                        //    steps.Enqueue(goOp.OperationCount);
                        //    goOp.LocateCamera(pos0, true);
                        //}
                    }

                    if (MachineParams.Current.IsInlineMode && !_isRequestOne && (!AutoRunSettings.Default.IsOfflineMode || AutoRunSettings.Default.AutoRunOfflineMode != 2))
                    {
                        GlobalDataManager.Current.LastPosition = positions[_blockPath.Rows - 1, 1];
                        GlobalDataManager.Current.ReleaseBoardPosition = releaseBoardPosition;
                    }
                    else
                    {
                        goOp.LocateLoader(positions[_blockPath.Rows - 1, 1], releaseBoardPosition, false);
                    }

                    digitizer.BufferCount = queryNum;
                    digitizer.StartGrab(0);

                    TimeSpan timeout = new TimeSpan(0, 0, 10);

                    Stopwatch stopwatch = new Stopwatch();
                    stopwatch.Start();



                    Action popMaxStep = () =>
                    {
                        if (steps.Count > 0)
                            goOp.MaxStep = steps.Dequeue();
                        else
                            goOp.MaxStep = goOp.OperationCount;
                    };

                    popMaxStep();
                    popMaxStep();
                    var opResult = goOp.Execute(mParams.OperationStepTimeout);

                    for (int row = 0; row < _blockPath.Rows;)
                    {
                        int grabNum = 0;
                        //bool rightToLeft = (row & 1) == 0;

                        //goOp = m.CreateBatchOperation();

                        //if (rightToLeft)
                        //{
                        //    goOp.SwichOnflyDirection(true);
                        //    //goOp.SetOnflyCycle(-onflyCycle);
                        //    //goOp.SetOnflyTriggers(Array.ConvertAll(triggers, v => -v));
                        //    //goOp.SetOnflyLight(LightFlags.Top, -(triggers[0] - shuttleModeParmas.LightDelay), -(triggers[0] - shuttleModeParmas.LightDelay + shuttleModeParmas.LightDuration));
                        //    //goOp.SetOnflyLight(LightFlags.Side, -(triggers[1] - shuttleModeParmas.LightDelay), -(triggers[1] - shuttleModeParmas.LightDelay + shuttleModeParmas.LightDuration));
                        //    //goOp.SetOnflyLight(LightFlags.Top, (triggers[0] - shuttleModeParmas.LightDelay), (triggers[0] - shuttleModeParmas.LightDelay + shuttleModeParmas.LightDuration));
                        //    //goOp.SetOnflyLight(LightFlags.Side, (triggers[1] - shuttleModeParmas.LightDelay), (triggers[1] - shuttleModeParmas.LightDelay + shuttleModeParmas.LightDuration));
                        //}
                        //else
                        //{
                        //    goOp.SwichOnflyDirection(false);
                        //    //goOp.SetOnflyCycle(onflyCycle);
                        //    //goOp.SetOnflyTriggers(triggers);
                        //    //goOp.SetOnflyLight(LightFlags.Side, triggers[0] - shuttleModeParmas.LightDelay, triggers[0] - shuttleModeParmas.LightDelay + shuttleModeParmas.LightDuration);
                        //    //goOp.SetOnflyLight(LightFlags.Top, triggers[1] - shuttleModeParmas.LightDelay, triggers[1] - shuttleModeParmas.LightDelay + shuttleModeParmas.LightDuration);
                        //}

                        //goOp.SwichOnfly(true);
                        //goOp.SmartLocate(positions[row, 0], positions[row, 1], snapshotSpeed);
                        //goOp.SwichOnfly(false);

                        //if (row < _blockPath.Rows - 1)
                        //{
                        //    goOp.SmartLocate(positions[row, 1], positions[row + 1, 0], snapshotSpeed);
                        //}

                        //opResult = goOp.Execute();

                        Stopwatch timeoutStopwatch = Stopwatch.StartNew();

                        while (grabNum < queryNum)
                        {
                            if (opResult.HasError)
                            {
                                break;
                            }

                            if (!digitizer.IsOpened)
                            {
                                break;
                            }

                            if (timeoutStopwatch.Elapsed >= timeout)
                            {
                                timeoutStopwatch.Stop();
                                //isTimeOut = true;
                                break;
                            }

                            string status =
                                string.Format(Lang.UI.UI_Label_WaitingImage, string.Format("{0}-{1}", row + 1, grabNum), string.Format("{0}-{1}", _blockPath.Rows, queryNum)) +
                                " " +
                                string.Format(Lang.UI.UI_Label_ElapsedTime, stopwatch.ElapsedMilliseconds / 1000);

                            progressListener.ReportProgress(grabNum + row * queryNum, queryNum * _blockPath.Rows, status);
                            int frameId = digitizer.QueryFrame(frameData, 1000 - DateTime.Now.Millisecond);

                            if (frameId >= 0)
                            {
                                LightingMode lightingMode = (grabNum & 1) == 0 ? LightingMode.Top : LightingMode.Side;
                                //LightingMode lightingMode;
                                //if (rightToLeft)
                                //{
                                //    lightingMode = (grabNum & 1) == 0 ? LightingMode.Top : LightingMode.Side;
                                //}
                                //else
                                //{
                                //    lightingMode = (grabNum & 1) != 0 ? LightingMode.Top : LightingMode.Side;
                                //}

                                frameData.Pin((p, len) =>
                                {
                                    var imageData = ImageData.Attach(imageWidth, imageHeight, p, len, imageWidth, PixelFormat.BayerRGGB);
                                    {
                                        Logger.Write(
                                            string.Format("Consume Image Data {0}.", grabNum),
                                            new string[] { LogCategories.Digitizer, LogCategories.Capture });


                                        try
                                        {
                                            //progressListener.ReportProgress(grabNum + row * queryNum, queryNum, status);

                                            var column = grabNum / 2;
                                            //var column = rightToLeft ? grabNum / 2 : _blockPath.Columns - grabNum / 2 - 1;
                                            meshBufferManager.WriteImageData(row, column, lightingMode, imageData);
                                        }
                                        finally
                                        {
                                            ++grabNum;
                                            //    progressListener.ReportProgress(grabNum, queryNum, "I:" + grabNum.ToString());
                                        }
                                    }
                                });

                                // reset timeout
                                timeoutStopwatch.Reset();
                                timeoutStopwatch.Start();
                            }
                            //else if (frameId >= 0)  // 丢帧
                            //{
                            //    break;
                            //}
                        }


                        //digitizer.GrabHalt();
                        ++row;


                        isCancelled = grabNum < queryNum;
                        if (isCancelled)
                            break;

                        popMaxStep();
                    }
                    stopwatch.Stop();
                    InspectionCycleTimeManager.Current.CaptureImageCost = stopwatch.Elapsed;

                    //opResult = m.SmartReleaseBoard();
                    return opResult;
                }
                finally
                {
                    if (frameData != null)
                    {
                        MemoryPool.Recycle(frameData);
                    }

                    if (isCancelled)
                    {
                        progressListener.Cancel();

                        var log = new LogEntry();
                        log.Categories.Add(LogCategories.Capture);
                        log.Severity = TraceEventType.Warning;
                        log.Message = "Capture is cancelled.";
                        Logger.Write(log);

                        //if (!opResult.IsCompleted)
                        //{
                        //    opResult.Cancel();
                        //    m.Pause();
                        //}
                    }
                    else
                    {
                        progressListener.Complete();
                    }

                    if (isCancelled)
                    {
                        digitizer.Close();
                    }
                    else if (digitizer.IsOpened)
                    {
                        digitizer.StopGrab(false);
                    }

                    if (isCancelled)
                    {
                        MeshBufferManager.Current.ClearBuffer();
                    }
                    else
                    {
                        MeshBufferManager.Current.Commit();
                    }
                }

            }
        }

        // 20210301 成都富士康跳拍版本合并 追加 Start
        // AOI_7.2.1.1011 版本合并
        // 交替拍照
        IOperationResult Grab_10(IProgressListener<int, string> progressListener)
        {
            using (MeshBufferManager.Current.Use())
            {
                GlobalDataManager.Current.IsCameraCancelled = false;

                var m = App.Current.GetService<Machine>();

                ushort isSingle = _isSingleShuttle ? (ushort)1 : (ushort)0;
                m.SetSingleShuttle(isSingle);

                //Holly.Log.HlLogger.Write("HOLLY AOI ================================================");

                //Holly.Log.HlLogger.Write("HOLLY AOI =====> isSingle = " + _isSingleShuttle.ToString());

                if (_isSingleShuttle)
                {
                    return Grab_1_Single(progressListener);
                }

                m.Update();

                int queryNum = _blockPath.Columns * 2;

                var meshBufferManager = MeshBufferManager.Current;

                ICamera digitizer = App.Current.GetService<ICamera>();

                int imageWidth = digitizer.Width;
                int imageHeight = digitizer.Height;
                byte[] frameData = null;

                bool isCancelled = true;
                bool isTimeOut = false;
                //ITaskResult opResult = null;


                try
                {
                    frameData = MemoryPool.Alloc(imageWidth * imageHeight, false);

                    var mParams = MachineParams.Current;
                    // go
                    var goOp = m.CreateBatchOperation();
                    var steps = new Queue<int>(_blockPath.Rows);
                    //goOp.InitializeMachine();
                    //int triggerDelay = 0;
                    var shuttleModeParmas = mParams.ShuttleMode;
                    int onflyCycle = (int)Math.Round(shuttleModeParmas.FeedbackPlugsPerMM * mParams.BlockSize.X.Value * 0.5m);
                    //int[] triggers = new int[] { onflyCycle / 4 - shuttleModeParmas.TriggerDelay, onflyCycle * 3 / 4 - shuttleModeParmas.TriggerDelay };
                    //int lightPlugs = new Length(0.1m, LengthUnit.Millimeter).ToPlugs()/2;
                    var snapshotSpeed = mParams.SnapshotSpeed;

                    var origin = this.GetOriginPosition().ToPlugs();
                    var releaseBoardPosition = new int2(mParams.ReleaseBoardPosition.X.ToPlugs(), mParams.ReleaseBoardPosition.Y.ToPlugs());
                    goOp.Initialize(shuttleModeParmas.TriggerPolarity ? PolarityFlags.None : PolarityFlags.SnapshotTrigger);
                    goOp.LocateLoader(new int2(m.X, m.Y), mParams.CalibratePlugs(origin), true);
                    //goOp.SwichOnfly(false);
                    //goOp.SetOnflyCycle(onflyCycle);
                    //goOp.SetOnflyTriggers(triggers);
                    //goOp.SetOnflyLight(LightFlags.Top, triggers[0] - shuttleModeParmas.LightDelay, triggers[0] - shuttleModeParmas.LightDelay + shuttleModeParmas.LightDuration);
                    //goOp.SetOnflyLight(LightFlags.Side, triggers[1] - shuttleModeParmas.LightDelay, triggers[1] - shuttleModeParmas.LightDelay + shuttleModeParmas.LightDuration);

                    //goOp.EnsureGrippedBoard(m.GetCurrentPlugPosition());
                    //goOp.SmartLocate(MachineParams.Current.ReleaseBoardPosition, MachineParams.Current.OriginPosition);
                    //opResult = goOp.Execute();
                    //opResult.Wait();
                    var positions = new int2[_blockPath.Rows, 2];
                    var triggerStart = onflyCycle / 2 + shuttleModeParmas.TriggerDelay;
                    var lightOnStart = onflyCycle / 2 + shuttleModeParmas.LightDelay;
                    var lightOnWidth = shuttleModeParmas.LightDuration;
                    var triggerWidth = shuttleModeParmas.TriggerDuration == 0 ? lightOnWidth : shuttleModeParmas.TriggerDuration;

                    //Holly.Log.HlLogger.Write("HOLLY AOI ============> onflyCycle =  " + onflyCycle.ToString());
                    //Holly.Log.HlLogger.Write("HOLLY AOI ============> triggerStart =  " + triggerStart.ToString());
                    //Holly.Log.HlLogger.Write("HOLLY AOI ============> triggerWidth =  " + triggerWidth.ToString());
                    //Holly.Log.HlLogger.Write("HOLLY AOI ============> lightOnStart =  " + lightOnStart.ToString());
                    //Holly.Log.HlLogger.Write("HOLLY AOI ============> lightOnWidth =  " + lightOnWidth.ToString());

                    int2 lastPosition = new int2(0, 0);
                    int realRow = 0;
                    for (int row = 0; row < _blockPath.Rows; ++row)
                    {
                        //跳行拍
                        if (_snapshotRow != string.Empty)
                        {
                            if (!_snapshotRows.Contains((row + 1).ToString()))
                            {
                                continue;
                            }
                        }

                        var row1 = -row;
                        if (MachineParams.Current.SerialPort.IsHuichuan)
                        {
                            row1 = row;
                        }

                        var pos0 = origin + new Length2(Length.Zero, mParams.BlockSize.Y * (decimal)(row1)).ToPlugs();
                        pos0 = mParams.CalibratePlugs(pos0);
                        int2 pos1;
                        if (mParams.IsInlineMode && !mParams.InlineMachine.LeftToRight)
                        {
                            pos1 = origin + new Length2(mParams.BlockSize.X * (decimal)_blockPath.Columns * -1, mParams.BlockSize.Y * (decimal)(row1)).ToPlugs();
                            pos1 = pos1 - new Length2(MachineParams.Current.SnapshotDelay, new Length(0, LengthUnit.Millimeter)).ToPlugs();
                        }
                        else
                        {
                            pos1 = origin + new Length2(mParams.BlockSize.X * (decimal)_blockPath.Columns, mParams.BlockSize.Y * (decimal)(row1)).ToPlugs();
                            pos1 = pos1 + new Length2(MachineParams.Current.SnapshotDelay, new Length(0, LengthUnit.Millimeter)).ToPlugs();
                        }
                        pos1 = mParams.CalibratePlugs(pos1);

                        //if (_snapshotRow == string.Empty)
                        //{
                        //飞梭取象，加偏移量
                        KeyValuePair<int, decimal>[] lxoffsets = null;
                        if (mParams.LXMappings != null)
                        {
                            decimal minLength = Math.Abs(_boardSize.X.Value - mParams.LXMappings[0].Key);
                            lxoffsets = mParams.LXMappings[0].Value;
                            foreach (KeyValuePair<int, KeyValuePair<int, decimal>[]> pair in mParams.LXMappings)
                            {
                                if (Math.Abs(_boardSize.X.Value - pair.Key) < minLength)
                                {
                                    minLength = Math.Abs(_boardSize.X.Value - pair.Key);
                                    lxoffsets = pair.Value;
                                }
                            }
                        }
                        else if (mParams.LXOffsets != null)
                        {
                            lxoffsets = mParams.LXOffsets;
                        }

                        if (lxoffsets != null)
                        {
                            foreach (KeyValuePair<int, decimal> pair in lxoffsets)
                            {
                                if (row + 1 == pair.Key)
                                {
                                    //Holly.Log.HlLogger.Write("pair.key:" + pair.Key.ToString());
                                    Length offset = new Length(pair.Value, LengthUnit.Millimeter);
                                    int offsetX = offset.ToPlugs();
                                    pos0.X += offsetX;
                                    pos1.X += offsetX;
                                }
                            }
                        }

                        if (mParams.LYOffsets != null)
                        {
                            foreach (KeyValuePair<int, decimal> pair in mParams.LYOffsets)
                            {
                                if (row + 1 == pair.Key)
                                {
                                    Length offset = new Length(pair.Value, LengthUnit.Millimeter);
                                    int offsetY = offset.ToPlugs();
                                    pos0.Y += offsetY;
                                    pos1.Y += offsetY;
                                }
                            }
                        }
                        //end
                        //}

                        if ((realRow & 1) == 0)

                        {
                            positions[row, 0] = pos0;
                            positions[row, 1] = pos1;
                            lastPosition = pos1;

                            goOp.LocateCamera(pos0);
                            if (MachineParams.Current.SerialPort.IsHuichuan)
                            {
                                goOp.Onfly(OnflyFlags.None, onflyCycle, triggerStart, triggerWidth, lightOnStart, lightOnWidth, queryNum);
                            }
                            else
                            {
                                goOp.Onfly(OnflyFlags.None, onflyCycle, triggerStart, triggerWidth, lightOnStart, lightOnWidth);
                            }
                            steps.Enqueue(goOp.OperationCount);
                            goOp.LocateCamera(pos1, true);
                            //Holly.Log.HlLogger.Write("HOLLY AOI =====> row = " + realRow + " start: " + pos0 + "  end: " + pos1);
                        }
                        else
                        {
                            positions[row, 0] = pos1;
                            positions[row, 1] = pos0;
                            lastPosition = pos0;

                            goOp.LocateCamera(pos1);
                            if (MachineParams.Current.SerialPort.IsHuichuan)
                            {
                                goOp.Onfly(OnflyFlags.CountDown | OnflyFlags.SideFirst, onflyCycle, triggerStart, triggerWidth, lightOnStart, lightOnWidth, queryNum);
                            }
                            else
                            {
                                goOp.Onfly(OnflyFlags.CountDown | OnflyFlags.SideFirst, onflyCycle, triggerStart, triggerWidth, lightOnStart, lightOnWidth);
                            }
                            steps.Enqueue(goOp.OperationCount);
                            goOp.LocateCamera(pos0, true);
                            //Holly.Log.HlLogger.Write("HOLLY AOI =====> row = " + realRow + " start: " + pos1 + "  end: " + pos0);
                        }

                        realRow += 1;
                    }

                    if (MachineParams.Current.IsInlineMode && !_isRequestOne && (!AutoRunSettings.Default.IsOfflineMode || AutoRunSettings.Default.AutoRunOfflineMode != 2))
                    {
                        GlobalDataManager.Current.LastPosition = positions[_blockPath.Rows - 1, 1];
                        //GlobalDataManager.Current.ReleaseBoardPosition = origin;//releaseBoardPosition;
                        if (Customization.Current.BackToReleaseBoardPosition)
                        {
                            GlobalDataManager.Current.ReleaseBoardPosition = releaseBoardPosition;
                        }
                        else
                        {
                            GlobalDataManager.Current.ReleaseBoardPosition = origin;//releaseBoardPosition;
                        }
                        //goOp.LocateLoader(positions[_blockPath.Rows - 1, 1], origin, false);
                    }
                    else
                    {
                        if (MachineParams.Current.IsInlineMode)
                        {
                            goOp.LocateLoader(lastPosition, origin, false);
                        }
                        else
                        {
                            goOp.LocateLoader(lastPosition, releaseBoardPosition, false);
                        }
                    }

                    digitizer.BufferCount = queryNum;
                    digitizer.StartGrab(0);

                    Holly.Log.HlLogger.Write("HOLLY AOI =====> digitizer.StartGrab()");

                    TimeSpan timeout = new TimeSpan(0, 0, Customization.Current.SnapshotTimeout);

                    Stopwatch stopwatch = new Stopwatch();
                    stopwatch.Start();



                    Action popMaxStep = () =>
                    {
                        if (steps.Count > 0)
                            goOp.MaxStep = steps.Dequeue();
                        else
                            goOp.MaxStep = goOp.OperationCount;
                    };

                    popMaxStep();

                    // 20201026 成都富士康跳拍BUG 删除 Start
                    //popMaxStep();
                    // 20201026 成都富士康跳拍BUG 删除 End
                    var opResult = goOp.Execute(mParams.OperationStepTimeout);

                    realRow = 0;
                    for (int row = 0; row < _blockPath.Rows; row++)
                    {
                        digitizer.StartPumpFrame(queryNum);

                        Holly.Log.HlLogger.Write("HOLLY AOI =====> digitizer.StartPumpFrame(queryNum)");

                        int grabNum = 0;
                        bool rightToLeft = (row & 1) == 0;

                        // 20201026 成都富士康跳拍BUG 追加 Start
                        realRow += 1;
                        // 20201026 成都富士康跳拍BUG 追加 End

                        //跳行拍
                        if (_snapshotRow != string.Empty)
                        {
                            if (!_snapshotRows.Contains((row + 1).ToString()))
                            {
                                using (var image = ImageData.Create(1, 1, PixelFormat.L8))
                                {
                                    image.AccessMemory<byte>(mem => mem.Fill(pos => (byte)0));
                                    while (grabNum < queryNum)
                                    {
                                        LightingMode lightingMode;

                                        if (rightToLeft)
                                        {
                                            lightingMode = (grabNum & 1) == 0 ? LightingMode.Top : LightingMode.Side;
                                        }
                                        else
                                        {
                                            lightingMode = (grabNum & 1) != 0 ? LightingMode.Top : LightingMode.Side;
                                        }

                                        try
                                        {
                                            //progressListener.ReportProgress(grabNum + row * queryNum, queryNum, status);

                                            int column = rightToLeft ? grabNum / 2 : _blockPath.Columns - grabNum / 2 - 1;
                                            meshBufferManager.WriteImageData(row, column, lightingMode, image);

                                            ++grabNum;
                                            //Holly.Log.HlLogger.Write("HOLLY AOI ============> NOT GRAB row = " + row.ToString() + "; column = " + column.ToString());
                                        }
                                        catch (Exception ex)
                                        {
                                            isCancelled = true;
                                        }
                                        //finally
                                        //{
                                        //    ++grabNum;
                                        //    //    progressListener.ReportProgress(grabNum, queryNum, "I:" + grabNum.ToString());
                                        //}
                                    }
                                }

                                //++row;
                                continue;
                            }
                        }

                        Stopwatch timeoutStopwatch = Stopwatch.StartNew();

                        // 20201026 成都富士康跳拍BUG 修改 Start
                        //rightToLeft = (realRow & 1) == 0;

                        popMaxStep();
                        // realRow+=1 位置改变了
                        rightToLeft = (realRow & 1) == 1;
                        // 20201026 成都富士康跳拍BUG 修改 Start
                        while (grabNum < queryNum)
                        {
                            if (opResult.HasError)
                            {
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> Grab_1 opResult.HasError");
                                break;
                            }

                            if (!digitizer.IsOpened)
                            {
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> Grab_1 !digitizer.IsOpened");
                                break;
                            }

                            if (timeoutStopwatch.Elapsed >= timeout)
                            {
                                timeoutStopwatch.Stop();
                                isTimeOut = true;
                                Holly.Log.HlLogger.Write("HOLLY AOI ============> Grab_1 timeout");
                                break;
                            }

                            string status =
                                string.Format(Lang.UI.UI_Label_WaitingImage, string.Format("{0}-{1}", row + 1, grabNum), string.Format("{0}-{1}", _blockPath.Rows, queryNum)) +
                                " " +
                                string.Format(Lang.UI.UI_Label_ElapsedTime, Math.Round((double)stopwatch.ElapsedMilliseconds / 1000, 2));

                            progressListener.ReportProgress(grabNum + row * queryNum, queryNum * _blockPath.Rows, status);

                            //int frameId = digitizer.QueryFrame(frameData, 1000 - DateTime.Now.Millisecond);
                            //int frameId = digitizer.QueryFrame(frameData, 1000); //Modified by MVSIG @ 20141117
                            int frameId = 0;
                            bool frameCaped = digitizer.QueryNextFrame(ref frameData, ref frameId);

                            Holly.Log.HlLogger.Write("HOLLY AOI ============> frameId QueryFrame Res " + frameCaped + " as ID:" + (frameId == 0 ? " <NOT READY>" : "" + frameId));

                            if (frameCaped)
                            {
                                LightingMode lightingMode;

                                if (rightToLeft)
                                {
                                    lightingMode = (grabNum & 1) == 0 ? LightingMode.Top : LightingMode.Side;
                                }
                                else
                                {
                                    lightingMode = (grabNum & 1) != 0 ? LightingMode.Top : LightingMode.Side;
                                }

                                //System.IO.File.WriteAllBytes(@"e:\test", frameData);
                                if (MachineParams.Current.IsTest)
                                {
                                    string dir = "E:\\RawImage";
                                    if (!Directory.Exists(dir))
                                    {
                                        Directory.CreateDirectory(dir);
                                    }
                                    string filePath = row.ToString() + "_" + grabNum.ToString() + "_" + lightingMode.ToString();
                                    filePath = Path.Combine(dir, filePath);
                                    System.IO.File.WriteAllBytes(filePath, frameData);
                                }

                                //if (mParams.IsInlineMode && !mParams.InlineMachine.LeftToRight)
                                //{
                                //    if (!rightToLeft)
                                //    {
                                //        lightingMode = (grabNum & 1) == 0 ? LightingMode.Top : LightingMode.Side;
                                //    }
                                //    else
                                //    {
                                //        lightingMode = (grabNum & 1) != 0 ? LightingMode.Top : LightingMode.Side;
                                //    }
                                //}
                                //else
                                //{
                                //    if (rightToLeft)
                                //    {
                                //        lightingMode = (grabNum & 1) == 0 ? LightingMode.Top : LightingMode.Side;
                                //    }
                                //    else
                                //    {
                                //        lightingMode = (grabNum & 1) != 0 ? LightingMode.Top : LightingMode.Side;
                                //    }
                                //}

                                frameData.Pin((p, len) =>
                                {
                                    PixelFormat pixelFormat = PixelFormat.BayerRGGB;
                                    if (digitizer is Holly.Cameras.Jai.AB201GE || digitizer is Holly.Cameras.Jai.SP5000GE2 || digitizer is Holly.Cameras.Jai.GO5000GE || digitizer is Holly.Cameras.Jai.GO5000U3)
                                    {
                                        pixelFormat = PixelFormat.BayerGRBG;
                                    }
                                    else if (digitizer is Holly.Cameras.Jai.BLS5000U3)
                                    {
                                        pixelFormat = PixelFormat.BayerBGGR;
                                    }
                                    else if (digitizer is Holly.Cameras.Jai.GO5100GE)
                                    {
                                        pixelFormat = PixelFormat.BayerRGGB;
                                    }
                                    else if (digitizer is Holly.Cameras.MVView.A55001GE)
                                    {
                                        pixelFormat = PixelFormat.BayerGBRG;
                                    }
                                    else if (digitizer is Holly.Cameras.MVView.A7500CU)
                                    {
                                        pixelFormat = PixelFormat.BayerRGGB;
                                    }
                                    //else if (digitizer is Holly.Cameras.Jai.GO5000U3)
                                    //{
                                    //    pixelFormat = PixelFormat.BayerGBRG;
                                    //}
                                    //20221010 CXPKMP00158 追加 Start
                                    else if (digitizer is Holly.Cameras.Jai.CXPKMP00158)
                                    {
                                        pixelFormat = PixelFormat.BayerRGGB;
                                    }
                                    else if (digitizer is Holly.Cameras.MVView.SVSCamera342CGE)
                                    {
                                        pixelFormat = PixelFormat.R8G8B8A8;
                                    }
                                    //20221010 CXPKMP00158 追加 End

                                    //20230109 Basler 追加 Start
                                    else if (digitizer is Holly.Cameras.Basler.A2A4504_18USPRO)
                                    {
                                        pixelFormat = PixelFormat.BayerRGGB;
                                    }
                                    //20230109 Basler 追加 End
                                    // 20240513 新增2500W相机AX5B57CT200 【刘红绅】 追加 Start
                                    else if (digitizer is Holly.Cameras.MVView.AX5B57CT200)
                                    {
                                        pixelFormat = PixelFormat.BayerGBRG;
                                    }
                                    // 20240513 新增2500W相机AX5B57CT200 【刘红绅】 追加 End
                                    // 20240718 太原出差修改 【王晨】 追加 Start
                                    else if (digitizer is Holly.Cameras.MVView.AX5B57CT200_2)
                                    {
                                        pixelFormat = PixelFormat.BayerGBRG;
                                    }
                                    // 20240718 太原出差修改 【王晨】 追加 End
                                    var imageData = ImageData.Attach(imageWidth, imageHeight, p, len, imageWidth, pixelFormat);//BayerGRBG);//
                                    {
                                        //Holly.Log.HlLogger.Write("MV_TEST:STEP 3 ============> @@@ Consume Image Data grabNum: " + grabNum);

                                        /*
                                        Logger.Write(
                                            string.Format("Consume Image Data {0}.", grabNum),
                                            new string[] { LogCategories.Digitizer, LogCategories.Capture });
                                        */


                                        try
                                        {
                                            //progressListener.ReportProgress(grabNum + row * queryNum, queryNum, status);

                                            int column = rightToLeft ? grabNum / 2 : _blockPath.Columns - grabNum / 2 - 1;

                                            //if (mParams.IsInlineMode && !mParams.InlineMachine.LeftToRight)
                                            //{
                                            //    column = rightToLeft ? _blockPath.Columns - grabNum / 2 - 1 : grabNum / 2;
                                            //}
                                            //else
                                            //{
                                            //    column = rightToLeft ? grabNum / 2 : _blockPath.Columns - grabNum / 2 - 1;
                                            //}
                                            meshBufferManager.WriteImageData(row, column, lightingMode, imageData);

                                            //++grabNum;
                                            //Holly.Log.HlLogger.Write("HOLLY AOI ============> grabNum = " + grabNum.ToString() + "; rightToLeft = " + rightToLeft.ToString() + " Write " + lightingMode.ToString() + "  Top Image = " + row.ToString() + "; column = " + column.ToString());

                                            //Holly.Log.HlLogger.Write("HOLLY AOI ============> GRAB row = " + row.ToString() + "; column = " + column.ToString());
                                        }
                                        //catch (Exception ex)
                                        //{
                                        //    isCancelled = true;
                                        //}
                                        finally
                                        {
                                            ++grabNum;
                                            //    progressListener.ReportProgress(grabNum, queryNum, "I:" + grabNum.ToString());
                                        }
                                    }
                                });

                                // reset timeout
                                timeoutStopwatch.Reset();
                                timeoutStopwatch.Start();
                            }
                            //else if (frameId >= 0)  // 丢帧
                            //{
                            //    break;
                            //}
                        }

                        digitizer.StopPumpFrame();
                        //digitizer.GrabHalt();
                        //++row;

                        // 20201026 成都富士康跳拍BUG 删除 Start
                        //realRow += 1;
                        // 20201026 成都富士康跳拍BUG 删除 End

                        //if (isCancelled)
                        //    break;

                        isCancelled = grabNum < queryNum;
                        if (isCancelled)
                            break;

                        if (Customization.Current.DoubleRailDoubleHead.IsEnabled && MachineParams.Current.SerialPort.IsHuichuan && row != _blockPath.Rows)
                        {
                            Length pos1 = _boardOrigin.Y + mParams.BlockSize.Y * (decimal)(row);

                            Holly.Log.HlLogger.Write("HOLLY AOI ====> row = " + row + " Y = " + pos1 + " SafetyDistance = " + Customization.Current.DoubleRailDoubleHead.SafetyDistance);
                            if (pos1 >= Customization.Current.DoubleRailDoubleHead.SafetyDistance)
                            {
                                int x37 = CentralControlPLCCommand.Current.ReadX37();
                                //Holly.Log.HlLogger.Write("HOLLY AOI ====> X37 = " + x37);
                                while (x37 != 0)
                                {
                                    Thread.Sleep(50);
                                    x37 = CentralControlPLCCommand.Current.ReadX37();

                                    // 20200319 双面机防撞代码恢复 追加 Start
                                    int y24 = CentralControlPLCCommand.Current.ReadY24();
                                    if (y24 == 1 && Customization.Current.DoubleRailDoubleHead.IsMaster)
                                    {
                                        Holly.Log.HlLogger.Write("HOLLY AOI ====> Master unlock SetY24(false)");
                                        CentralControlPLCCommand.Current.SetY24(false);
                                    }
                                    // 20200319 双面机防撞代码恢复 追加 End
                                }

                                CentralControlPLCCommand.Current.SetY24(true);
                                Holly.Log.HlLogger.Write("HOLLY AOI ====> SetY24(true)");
                            }
                        }
                        //if (Customization.Current.DoubleRailDoubleHead.IsEnabled)
                        //{
                        //    System.Threading.Thread.Sleep(200);
                        //}

                        // 20201026 成都富士康跳拍BUG 删除 Start
                        //popMaxStep();
                        // 20201026 成都富士康跳拍BUG 删除 End

                        Holly.Log.HlLogger.Write("Holly AOI ====> After popMaxStep() Row = " + realRow + " ; TotalRows = " + _blockPath.Rows);

                    }
                    Holly.Log.HlLogger.Write("Holly AOI ====> digitizer.StopGrab()");

                    digitizer.StopGrab(isTimeOut);

                    Holly.Log.HlLogger.Write("Holly AOI ====> digitizer.StopGrab() end");

                    stopwatch.Stop();
                    InspectionCycleTimeManager.Current.CaptureImageCost = stopwatch.Elapsed;

                    //finally
                    try
                    {
                        if (frameData != null)
                        {
                            MemoryPool.Recycle(frameData);
                        }

                        if (isCancelled)
                        {
                            progressListener.Cancel();

                            var log = new LogEntry();
                            log.Categories.Add(LogCategories.Capture);
                            log.Severity = TraceEventType.Warning;
                            log.Message = "Capture is cancelled.";
                            Logger.Write(log);

                            //if (!opResult.IsCompleted)
                            //{
                            //    opResult.Cancel();
                            //    m.Pause();
                            //}
                        }
                        else
                        {
                            progressListener.Complete();
                        }

                        if (isCancelled || isTimeOut)
                        {
                            digitizer.Close();
                            Holly.Log.HlLogger.Write("Holly AOI ====> digitizer.Close()");
                        }
                        else if (digitizer.IsOpened)
                        {
                            digitizer.StopGrab(false);
                        }

                        //Holly.Log.HlLogger.Write("Holly AOI ====> MeshBufferManager.Current.Commit()");

                        if (isCancelled)
                        {
                            MeshBufferManager.Current.ClearBuffer();
                        }
                        else
                        {
                            MeshBufferManager.Current.Commit();
                        }
                        //Holly.Log.HlLogger.Write("Holly AOI ====> MeshBufferManager.Current.Commit() end");
                    }
                    catch (Exception ex)
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI =====> Grab rail 1 exception = " + ex.ToString());
                        isCancelled = true;
                        //return null;
                    }
                    //finally

                    //opResult = m.SmartReleaseBoard();
                    if (isCancelled || isTimeOut)
                    {
                        GlobalDataManager.Current.IsCameraCancelled = true;
                        Holly.Log.HlLogger.Write("HOLLY AOI =====> Grab rail 1 isCancelled ");
                        //return null;
                    }
                    else
                    {
                        GlobalDataManager.Current.CycleTimes.Add(Math.Round((double)stopwatch.ElapsedMilliseconds / 1000, 2));
                        //return opResult;
                    }
                    return opResult;
                }
                //catch (Exception ex)
                //{
                //    Holly.Log.HlLogger.Write("HOLLY AOI =====> Grab rail 1 exception = " + ex.ToString());
                //    isCancelled = true;
                //    return null;
                //}
                finally
                {
                    //    if (frameData != null)
                    //    {
                    //        MemoryPool.Recycle(frameData);
                    //    }

                    //    if (isCancelled)
                    //    {
                    //        progressListener.Cancel();

                    //        var log = new LogEntry();
                    //        log.Categories.Add(LogCategories.Capture);
                    //        log.Severity = TraceEventType.Warning;
                    //        log.Message = "Capture is cancelled.";
                    //        Logger.Write(log);

                    //        //if (!opResult.IsCompleted)
                    //        //{
                    //        //    opResult.Cancel();
                    //        //    m.Pause();
                    //        //}
                    //    }
                    //    else
                    //    {
                    //        progressListener.Complete();
                    //    }

                    //    if (isCancelled)
                    //    {
                    //        digitizer.Close();
                    //    }
                    //    else if (digitizer.IsOpened)
                    //    {
                    //        digitizer.StopGrab();
                    //    }

                    //    if (isCancelled)
                    //    {
                    //        MeshBufferManager.Current.ClearBuffer();
                    //    }
                    //    else
                    //    {
                    //        MeshBufferManager.Current.Commit();
                    //    }
                }

            }
        }
        // 20210301 成都富士康跳拍版本合并 追加 End
        // 20240507 环旭相机切程序 【刘红绅】 追加 Start
        public IOperationResult Grab_1_SideCameraJumpModel(IProgressListener<int, string> progressListener)
        {
            using (MeshBufferManager.Current.Use())
            {
                var m = App.Current.GetService<Machine>();
                int queryNum = CameraChangeProgramManager.MoveInfoList.Count;
                var meshBufferManager = MeshBufferManager.Current;
                GlobalDataManager.Current.IsCameraCancelled = false;
                if (MachineParams.Current.ScanType == 1)
                {
                    SwitchingCameraMode(m, 1);
                    Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_SideCameraJumpModel SwitchingCameraMode To 1");
                }
                Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_SideCameraJumpModel _blockPath.Blocks:" + _blockPath.Blocks);
                Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_SideCameraJumpModel queryNum:" + queryNum);
                Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_SideCameraJumpModel _blockPath.Rows:" + _blockPath.Rows);
                Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_SideCameraJumpModel _blockPath.Columns:" + _blockPath.Columns);

                int rows = _blockPath.Rows;
                int columns = _blockPath.Columns;

                var mParams = MachineParams.Current;
                ICamera digitizer = App.Current.GetService<ICamera>();
                // 打开相机
                if (!digitizer.IsOpened)
                    digitizer.Open(true);
                digitizer.BufferCount = queryNum * 2;
                digitizer.StartGrab(queryNum * 2);
                digitizer.StartPumpFrame(queryNum * 2);
                queryNum = queryNum * 2;
                Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_SideCameraJumpModel  queryNum:" + queryNum);
                Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_SideCameraJumpModel digitizer.StartGrab ");

                int imageWidth = digitizer.Width;
                int imageHeight = digitizer.Height;

                bool isTimeOut = false;
                IOperationResult opResult = null;
                byte[] frameData = MemoryPool.Alloc(imageWidth * imageHeight, false);

                try
                {

                    frameData = MemoryPool.Alloc(imageWidth * imageHeight, false);
                    m.Update();
                    // go
                    var goOp = m.CreateBatchOperation();
                    var path = _snapshotPath;
                    var steps = new Queue<int>(CameraChangeProgramManager.MoveInfoList.Count() * 2 + 1);
                    bool isFirstPosition = true;
                    var OriginPosition = GetOriginPosition();
                    Holly.Log.HlLogger.Write("HOLLY AOI =====> goOp.LocateCamera MachineParams.Current.OriginPosition=" + MachineParams.Current.OriginPosition + ",CameraChangeProgramShopfloor.Offset=" + Customization.Current.CameraChangeProgramShopfloor.Offset);
                    foreach (var p in CameraChangeProgramManager.MoveInfoList)
                    {
                        //Length2 newPosition = p.Center + MachineParams.Current.OriginPosition;
                        Length2 newPosition = p.Center + OriginPosition + Customization.Current.CameraChangeProgramShopfloor.Offset;
                        int2 newPositionPlus = newPosition.ToPlugs();
                        goOp.LocateCamera(newPositionPlus);

                        Holly.Log.HlLogger.Write("HOLLY AOI =====> goOp.LocateCamera(p.Position) = " + newPositionPlus + ",p.Center=" + p.Center);

                        steps.Enqueue(goOp.OperationCount);
                        goOp.SnapshotTop();

                        Holly.Log.HlLogger.Write("HOLLY AOI =====> goOp.SnapshotTop() ");

                        steps.Enqueue(goOp.OperationCount);
                        goOp.SnapshotSide();
                        Holly.Log.HlLogger.Write("HOLLY AOI =====> goOp.SnapshotSide() ");
                    }

                    int grabNum = 0;
                    Action popMaxStep = () =>
                    {
                        if (steps.Count > 0)
                            goOp.MaxStep = steps.Dequeue();
                        else
                            goOp.MaxStep = goOp.OperationCount;
                    };

                    popMaxStep();
                    for (int i = 0; i < digitizer.BufferCount; ++i)
                    {
                        popMaxStep();
                    }
                    // 初始化跳拍图像转换为9宫格图像数据的参数
                    int camera1Rows1 = CameraChangeProgramManager.Current.Rows;
                    int camera1Cols1 = CameraChangeProgramManager.Current.Cols;
                    CameraChangeProgramManager.TopImageDictionary = new Dictionary<int2, byte[]>();
                    CameraChangeProgramManager.SideImageDictionary = new Dictionary<int2, byte[]>();
                    CameraChangeProgramManager.SideCameraMoveCount = CameraChangeProgramManager.MoveInfoList.Count;
                    CameraChangeProgramManager.Current.InitQueueDataThread(imageWidth, imageHeight, camera1Rows1, camera1Cols1);

                    // 开始跳拍图像转换为9宫格图像数据的线程
                    // 自动运行
                    // 只打开主相机
                    CameraChangeProgramManager.Current.QueueStart2(true, true);
                    Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_SideCameraJumpModel QueueStart2 MainCamera");

                    Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_SideCameraJumpModel queryNum:" + queryNum);
                    opResult = goOp.Execute(MachineParams.Current.OperationStepTimeout);
                    PixelFormat pixelFormat = GetDigitizerPixelFormat();

                    Stopwatch stopwatch = new Stopwatch();
                    TimeSpan timeout = new TimeSpan(0, 0, 10);
                    Stopwatch timeoutStopwatch = Stopwatch.StartNew();
                    stopwatch.Start();

                    Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_SideCameraJumpModel imageWidth:" + imageWidth + ", imageHeight:" + imageHeight);
                    // 20230717 5个A7500CU相机-自动运行内存增加 【刘亚杰】 追加 Start
                    byte[] frameDataTransform = MemoryPool.Alloc(imageWidth * imageHeight, false);
                    byte[] frameDataRGBTransform = new byte[imageWidth * imageHeight * 3];
                    // 20230717 5个A7500CU相机-自动运行内存增加 【刘亚杰】 追加 End

                    // 采集图像
                    while (grabNum < queryNum)
                    {
                        if (timeoutStopwatch.Elapsed >= timeout)
                        {
                            timeoutStopwatch.Stop();
                            isTimeOut = true;
                            Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_SideCameraJumpModel sideCamera timeout");

                            break;
                        }

                        string status = string.Format(Lang.UI.UI_Label_WaitingImage, grabNum, queryNum) + " " +
                            string.Format(Lang.UI.UI_Label_ElapsedTime, stopwatch.ElapsedMilliseconds / 1000);

                        progressListener.ReportProgress(grabNum, queryNum, status);
                        int frameId = 0;

                        // 把采集的跳拍图像加入到 跳拍图像转换9宫格图像数据的线程对象中
                        // 自动运行
                        bool frameCaped = digitizer.QueryNextFrame(ref frameData, ref frameId);
                        if (frameCaped)
                        {

                            Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_SideCameraJumpModel camera0 grabNum:" + grabNum);

                            int2 fovPixCenter = (int2)CameraChangeProgramManager.MoveInfoList[grabNum / 2].Center.ToPixels() - (int2)CameraChangeProgramManager.MoveInfoList[grabNum / 2].CameraOffset.ToPixels();
                            Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_SideCameraJumpModel fovPixCenter:" + fovPixCenter);

                            if ((grabNum & 1) == 0)
                            {
                                //Array.Reverse((byte[])frameData);
                                Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_SideCameraJumpModel TopImageDataQueue.Add");
                                CameraChangeProgramManager.TopImageDataQueue.Enqueue(new FovImgeInfo(fovPixCenter, "top", (byte[])frameData.Clone(), 0));
                            }
                            else
                            {
                                //Array.Reverse((byte[])frameData);
                                Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachineSide12.Grab_1_SideCameraJumpModel SideImageDataQueue.Add");
                                CameraChangeProgramManager.SideImageDataQueue.Enqueue(new FovImgeInfo(fovPixCenter, "side", (byte[])frameData.Clone(), 0));
                            }

                            ++grabNum;
                            timeoutStopwatch.Reset();
                            timeoutStopwatch.Start();
                        }



                    }

                    Holly.Log.HlLogger.Write("Holly AOI =====> ImageAcquisitionMachine.Grab_1_SideCameraJumpModel SideCameraPLC3ThreadManager.Current.Stop");
                    stopwatch.Stop();
                    InspectionCycleTimeManager.Current.CaptureImageCost = stopwatch.Elapsed;

                    // 关闭相机
                    // 自动运行             
                    // 只打开主相机
                    Holly.Log.HlLogger.Write("Holly AOI =====> ImageAcquisitionMachine.Grab_1_SideCameraJumpModel digitizer.Close() Start");
                    digitizer.StopPumpFrame();
                    digitizer.StopGrab(isTimeOut);
                    Holly.Log.HlLogger.Write("Holly AOI =====> ImageAcquisitionMachine.Grab_1_SideCameraJumpModel digitizer.Close() end");
                    progressListener.Complete();
                    // 提交9宫格图像
                    // 自动运行提交侧相机图像
                    // 自动运行
                    // 提交主相机的TopImageDictionary存储的9宫格图像
                    try
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_SideCameraJumpModel CameraChangeProgramManager.IsTopQueueFinish:" + CameraChangeProgramManager.IsTopQueueFinish);
                        while (true)
                        {
                            if (CameraChangeProgramManager.IsTopQueueFinish)
                                break;

                            Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_SideCameraJumpModel Is Waiting ... CameraChangeProgramManager.IsTopQueueFinish:" + CameraChangeProgramManager.IsTopQueueFinish);
                            Thread.Sleep(100);
                        }
                        var topImageInfoList = CameraChangeProgramManager.TopImageDictionary;
                        Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_SideCameraJumpModel topImage topImageInfoList.Count():" + topImageInfoList.Count());
                        Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_SideCameraJumpModel topImage WriteImageData Start");
                        foreach (var topData in topImageInfoList)
                        {
                            //Holly.Log.HlLogger.Write("HOLLY AOI =====> SideCameraData4ThreadManager.WriteFovImage SetEdgeBlackByte");
                            //string dateTime = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                            //Holly.Log.HlLogger.Write("HOLLY AOI =====> SideCameraData4ThreadManager.WriteFovImage topData.Value.Length:" + topData.Value.Length);
                            //System.Drawing.Bitmap bitmap4 = ImageProcessing.Current.BuiltRGBBitmap(topData.Value, imageWidth, imageHeight);
                            //string filename4 = "E:\\image\\ImageSideCamera_topData_" + topData.Key.X + "_" + topData.Key.Y + "_" + dateTime + ".bmp";
                            ////bitmap4.RotateFlip(System.Drawing.RotateFlipType.Rotate180FlipNone);
                            //string filename5 = "E:\\image\\ImageSideCamera_topData_" + topData.Key.X + "_" + topData.Key.Y + "_" + dateTime + ".png";
                            //bitmap4.Save(filename4);
                            //Holly.Log.HlLogger.Write("HOLLY AOI =====> SideCameraData4ThreadManager.WriteFovImage filename4:" + filename4);

                        //Holly.Log.HlLogger.Write("HOLLY AOI =====> SideCameraData4ThreadManager.WriteFovImage pixelFormat:" + pixelFormat);
                        //byte[] image = (byte[])topData.Value.Clone();
                        topData.Value.Pin((p, len) =>
                        {
                            var imageData = ImageData.Attach(imageWidth, imageHeight, p, len, imageWidth, pixelFormat);
                            {
                                try
                                {
                                    //Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_SideCameraJumpModel topImage WriteImageData topData.Key.X:" + topData.Key.X);
                                    //Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_SideCameraJumpModel topImage WriteImageData topData.Key.Y:" + topData.Key.Y);
                                    //imageData.Save(filename5, System.Drawing.Imaging.PixelFormat.Format8bppIndexed, System.Drawing.Imaging.ImageFormat.Png);
                                    meshBufferManager.WriteImageData(topData.Key.X, topData.Key.Y, LightingMode.Top, imageData);
                                }
                                finally
                                {
                                }
                            }
                        });
                    }
                    Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_SideCameraJumpModel top1Image WriteImageData End");
                }
                catch (Exception ex)
                {
                    Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_SideCameraJumpModel top1Image Exception:" + ex);
                }

                    // 提交主相机的SideImageDictionary存储的9宫格图像
                    try
                    {
                        Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_SideCameraJumpModel CameraChangeProgramManager.IsSideQueueFinish:" + CameraChangeProgramManager.IsSideQueueFinish);
                        while (true)
                        {
                            if (CameraChangeProgramManager.IsSideQueueFinish)
                                break;

                        Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_SideCameraJumpModel Is Waiting ... CameraChangeProgramManager.IsSideQueueFinish:" + CameraChangeProgramManager.IsSideQueueFinish);
                        Thread.Sleep(100);
                    }
                    var sideImageInfoList = CameraChangeProgramManager.SideImageDictionary;
                    Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_SideCameraJumpModel side1Image sideImageInfoList.Count():" + sideImageInfoList.Count());
                    Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_SideCameraJumpModel side1Image WriteImageData Start");
                    foreach (var sideData in sideImageInfoList)
                    {
                        sideData.Value.Pin((p, len) =>
                        {
                            var imageData = ImageData.Attach(imageWidth, imageHeight, p, len, imageWidth, pixelFormat);
                            {
                                try
                                {
                                    meshBufferManager.WriteImageData(sideData.Key.X, sideData.Key.Y, LightingMode.Side, imageData);
                                }
                                finally
                                {
                                }
                            }
                        });
                    }
                    Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_SideCameraJumpModel side1Image WriteImageData End");
                }
                catch (Exception ex)
                {
                    Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_SideCameraJumpModel side1Image Exception:" + ex);
                }

                    MeshBufferManager.Current.Commit();
                    return opResult;
                }
                catch (Exception ex)
                {
                    Holly.Log.HlLogger.Write("Holly AOI =====> ImageAcquisitionMachine.Grab_1_SideCameraJumpModel Exception:" + ex.ToString());
                    return opResult;
                }
                finally
                {
                    if (MachineParams.Current.ScanType == 1)
                    {
                        SwitchingCameraMode(m, 0);
                        Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachine.Grab_1_SideCameraJumpModel SwitchingCameraMode To 0");
                    }
                    CameraChangeProgramManager.Current.QueueStop2();

                    if (frameData != null)
                    {
                        MemoryPool.Recycle(frameData);
                    }
                    if (isTimeOut)
                    {
                        progressListener.Cancel();

                        var log = new LogEntry();
                        log.Categories.Add(LogCategories.Capture);
                        log.Severity = TraceEventType.Warning;
                        log.Message = "Capture is cancelled.";
                        Logger.Write(log);

                        GlobalDataManager.Current.IsCameraCancelled = true;

                        Holly.Log.HlLogger.Write("Holly AOI =====> ImageAcquisitionMachine.Grab_1_SideCameraJumpModel Exception IsCameraCancelled:" + GlobalDataManager.Current.IsCameraCancelled);

                        if (!opResult.IsCompleted)
                        {
                            opResult.Cancel();
                        }

                        MeshBufferManager.Current.ClearBuffer();
                    }

                    CameraChangeProgramManager.TopImageDictionary.Clear();
                    CameraChangeProgramManager.SideImageDictionary.Clear();

                    CameraChangeProgramManager.TopImageDictionary = null;
                    CameraChangeProgramManager.SideImageDictionary = null;

                    GC.Collect();
                }
            }
        }
        private PixelFormat GetDigitizerPixelFormat()
        {
            ICamera digitizer = App.Current.GetService<ICamera>();

            PixelFormat pixelFormat = PixelFormat.BayerRGGB;
            if (digitizer is Holly.Cameras.Jai.BB500GE || digitizer is Holly.Cameras.Jai.BB141GE || digitizer is Holly.Cameras.Jai.BB340GE || digitizer is Holly.Cameras.Jai.SBI500GE || digitizer is Holly.Cameras.Jai.AB800GE)
                pixelFormat = PixelFormat.BayerRGGB;
            else if (digitizer is Holly.Cameras.Jai.SP5000GE2 || digitizer is Holly.Cameras.Jai.GO5000U3 || digitizer is Holly.Cameras.Jai.GO5000GE || digitizer is Holly.Cameras.Jai.BLS5000U3)
            {
                pixelFormat = PixelFormat.BayerGRBG;
            }
            else if (digitizer is Holly.Cameras.Jai.GO5100GE)
            {
                pixelFormat = PixelFormat.BayerRGGB;
            }
            else if (digitizer is Holly.Cameras.MVView.A55001GE)
            {
                pixelFormat = PixelFormat.BayerGBRG;
            }
            else if (digitizer is Holly.Cameras.MVView.A7500CU)
            {
                pixelFormat = PixelFormat.BayerRGGB;
            }
            else if (digitizer is Holly.Cameras.MVView.A5B57CU200E)
            {
                pixelFormat = PixelFormat.BayerGBRG;
            }
            else if (digitizer is Holly.Cameras.MVView.A7A20CU201)
            {
                pixelFormat = PixelFormat.BayerRGGB;
            }
            else if (digitizer is Holly.Cameras.Jai.CXPKMP00158)
            {
                pixelFormat = PixelFormat.BayerRGGB;
            }
            else if (digitizer is Holly.Cameras.MVView.SVSCamera342CGE)
            {
                pixelFormat = PixelFormat.R8G8B8A8;
            }
            // 20240513 新增2500W相机AX5B57CT200 【刘红绅】 追加 Start
            else if (digitizer is Holly.Cameras.MVView.AX5B57CT200)
            {
                pixelFormat = PixelFormat.BayerGBRG;
            }
            // 20240513 新增2500W相机AX5B57CT200 【刘红绅】 追加 End
            // 20240718 太原出差修改 【王晨】 追加 Start
            else if (digitizer is Holly.Cameras.MVView.AX5B57CT200_2)
            {
                pixelFormat = PixelFormat.BayerGBRG;
            }
            // 20240718 太原出差修改 【王晨】 追加 End
            return pixelFormat;
        }
        /// <summary>
        /// 改变相机拍照模式
        /// </summary>
        /// <param name="m"></param>
        /// <param name="modeCode">0为飞拍，1为跳拍</param>
        void SwitchingCameraMode(Machine m, ushort modeCode)
        {
            IBatchOperationInline op = m.CreateBatchOperationInline();
            op.SwitchingCameraMode(modeCode);
            IOperationResult opResult = op.Execute(MachineParams.Current.OperationStepTimeout);
            opResult.Wait();
        }
        // 20240507 环旭相机切程序 【刘红绅】 追加 End
        //// 交替拍照2(调试机器用)
        //IOperationResult Grab_2_(IProgressListener<int, string> progressListener)
        //{
        //    Machine_bak m = App.Current.GetService<Machine_bak>();

        //    int queryNum = _blockPath.Columns * 2;

        //    var meshBufferManager = MeshBufferManager.Current;

        //    ICamera digitizer = App.Current.GetService<ICamera>();

        //    int imageWidth = digitizer.Width;
        //    int imageHeight = digitizer.Height;
        //    byte[] frameData = null;

        //    bool isCancelled = true;
        //    bool isTimeOut = false;
        //    IOperationResult opResult = null;

        //    try
        //    {
        //        frameData = MemoryPool.Alloc(imageWidth * imageHeight, false);

        //        var mParams = MachineParams.Current;
        //        // go
        //        IBatchOperation_bak goOp = m.CreateBatchOperation();

        //        goOp.InitializeMachine();
        //        //int triggerDelay = 0;
        //        var shuttleModeParmas = mParams.ShuttleMode;
        //        int onflyCycle = (int)Math.Round(shuttleModeParmas.FeedbackPlugsPerMM * mParams.BlockSize.X.Value);
        //        int[] triggers = new int[] { onflyCycle / 4 - shuttleModeParmas.TriggerDelay, onflyCycle * 3 / 4 - shuttleModeParmas.TriggerDelay };
        //        //int lightPlugs = new Length(0.1m, LengthUnit.Millimeter).ToPlugs()/2;
        //        var snapshotSpeed = mParams.SnapshotSpeed;

        //        goOp.SwichOnfly(false);
        //        goOp.SetOnflyCycle(onflyCycle);
        //        goOp.SetOnflyTriggers(triggers);
        //        goOp.SetOnflyLight(LightFlags.Top, triggers[0] - shuttleModeParmas.LightDelay, triggers[0] - shuttleModeParmas.LightDelay + shuttleModeParmas.LightDuration);
        //        goOp.SetOnflyLight(LightFlags.Side, triggers[1] - shuttleModeParmas.LightDelay, triggers[1] - shuttleModeParmas.LightDelay + shuttleModeParmas.LightDuration);
        //        goOp.SwichOnflyDirection(true);

        //        goOp.EnsureGrippedBoard(m.GetCurrentPlugPosition());
        //        goOp.SmartLocate(MachineParams.Current.ReleaseBoardPosition, MachineParams.Current.OriginPosition);
        //        opResult = goOp.Execute();
        //        opResult.Wait();

        //        digitizer.BufferCount = queryNum;
        //        digitizer.StartGrab(0);

        //        TimeSpan timeout = new TimeSpan(0, 0, 10);

        //        Stopwatch stopwatch = new Stopwatch();
        //        stopwatch.Start();

        //        var positions = new int2[_blockPath.Rows, 2];
        //        for (int row = 0; row < _blockPath.Rows; ++row)
        //        {
        //            var pos0 = (mParams.OriginPosition + new Length2(Length.Zero, mParams.BlockSize.Y * (decimal)(-row))).ToPlugs();
        //            pos0 = mParams.CalibratePlugs(pos0);
        //            var pos1 = (mParams.OriginPosition + new Length2(mParams.BlockSize.X * (decimal)_blockPath.Columns, mParams.BlockSize.Y * (decimal)(-row))).ToPlugs();
        //            pos1 = mParams.CalibratePlugs(pos1);
        //            positions[row, 0] = pos0;
        //            positions[row, 1] = pos1;
        //        }

        //        for (int row = 0; row < _blockPath.Rows; )
        //        {
        //            int grabNum = 0;

        //            goOp = m.CreateBatchOperation();


        //            goOp.SwichOnfly(true);
        //            goOp.SmartLocate(positions[row, 0], positions[row, 1], snapshotSpeed);
        //            goOp.SwichOnfly(false);

        //            if (row < _blockPath.Rows - 1)
        //            {
        //                goOp.SmartLocate(positions[row, 1], positions[row + 1, 0], snapshotSpeed);
        //            }

        //            opResult = goOp.Execute();

        //            Stopwatch timeoutStopwatch = Stopwatch.StartNew();

        //            while (grabNum < queryNum)
        //            {
        //                if (opResult.HasError)
        //                {
        //                    throw opResult.Exception;
        //                }

        //                if (!digitizer.IsOpened)
        //                {
        //                    break;
        //                }

        //                if (timeoutStopwatch.Elapsed >= timeout)
        //                {
        //                    timeoutStopwatch.Stop();
        //                    isTimeOut = true;
        //                    break;
        //                }

        //                string status =
        //                    string.Format(Lang.UI.UI_Label_WaitingImage, string.Format("{0}-{1}", row + 1, grabNum), string.Format("{0}-{1}", _blockPath.Rows, queryNum)) +
        //                    " " +
        //                    string.Format(Lang.UI.UI_Label_ElapsedTime, stopwatch.ElapsedMilliseconds / 1000);

        //                progressListener.ReportProgress(grabNum + row * queryNum, queryNum * _blockPath.Rows, status);
        //                int frameId = digitizer.QueryFrame(frameData, 1000 - DateTime.Now.Millisecond);

        //                if (frameId >= 0)
        //                {
        //                    LightingMode lightingMode = (grabNum & 1) == 0 ? LightingMode.Top : LightingMode.Side;

        //                    frameData.Pin((p, len) =>
        //                    {
        //                        var imageData = ImageData.Attach(imageWidth, imageHeight, p, len, imageWidth, PixelFormat.BayerRGGB);
        //                        {
        //                            Logger.Write(
        //                                string.Format("Consume Image Data {0}.", grabNum),
        //                                new string[] { LogCategories.Digitizer, LogCategories.Capture });


        //                            try
        //                            {
        //                                //progressListener.ReportProgress(grabNum + row * queryNum, queryNum, status);

        //                                var column = grabNum / 2;
        //                                meshBufferManager.WriteImageData(row, column, lightingMode, imageData);
        //                            }
        //                            finally
        //                            {
        //                                ++grabNum;
        //                                //    progressListener.ReportProgress(grabNum, queryNum, "I:" + grabNum.ToString());
        //                            }
        //                        }
        //                    });

        //                    // reset timeout
        //                    timeoutStopwatch.Reset();
        //                    timeoutStopwatch.Start();
        //                }
        //                //else if (frameId >= 0)  // 丢帧
        //                //{
        //                //    break;
        //                //}
        //            }


        //            //digitizer.GrabHalt();
        //            ++row;


        //            isCancelled = grabNum < queryNum;
        //            if (isCancelled)
        //                break;
        //        }
        //        stopwatch.Stop();
        //        InspectionCycleTimeManager.Current.CaptureImageCost = stopwatch.Elapsed;

        //        opResult = m.SmartReleaseBoard();
        //        return opResult;
        //    }
        //    finally
        //    {
        //        if (frameData != null)
        //        {
        //            MemoryPool.Recycle(frameData);
        //        }

        //        if (isCancelled)
        //        {
        //            progressListener.Cancel();

        //            var log = new LogEntry();
        //            log.Categories.Add(LogCategories.Capture);
        //            log.Severity = TraceEventType.Warning;
        //            log.Message = "Capture is cancelled.";
        //            Logger.Write(log);

        //            //if (!opResult.IsCompleted)
        //            //{
        //            //    opResult.Cancel();
        //            //    m.Pause();
        //            //}
        //        }
        //        else
        //        {
        //            progressListener.Complete();
        //        }

        //        if (isCancelled)
        //        {
        //            digitizer.Close();
        //        }
        //        else if (digitizer.IsOpened)
        //        {
        //            digitizer.StopGrab();
        //        }

        //        if (isCancelled)
        //        {
        //            MeshBufferManager.Current.ClearBuffer();
        //        }
        //        else
        //        {
        //            MeshBufferManager.Current.Commit();
        //        }
        //    }

        //}

        public void PrepareBoardInformation(Length2 boardSize, Length2 boardOrigin, Length boardThickness, ushort snapshotType, string snapshotRow, bool isSingleShuttle)
        {
            Debug.Assert(boardSize != Length2.Zero);

            // 20240709 环旭相机切程序_飞拍 【范克文】 修改 Start
            //_boardSize = boardSize;
            //_boardOrigin = boardOrigin;

            //_snapshotRow = snapshotRow;
            //_snapshotRows = snapshotRow.Split(',');

            //_isSingleShuttle = isSingleShuttle;

            if (!Customization.Current.CameraChangeProgramShopfloor.IsEnabled || _isRequestOne)
            {
                //由于检测线程和采集线程分开，检测线程在切换程式时更新了跳行拍等信息会干扰到采集线程
                //自动切程式在采集线程中会自动更新提前记录的跳行拍信息。所以开启自动切程式后，仅在手动采集时更新
                _boardSize = boardSize;
                _boardOrigin = boardOrigin;
                _snapshotRow = snapshotRow;
                _snapshotRows = snapshotRow.Split(',');
                _isSingleShuttle = isSingleShuttle;
            }
            // 20240709 环旭相机切程序_飞拍 【范克文】 修改 End

            //20211028 分段检测补偿偏移量  追加 Start
            if (Customization.Current.SwitchProgram.IsEnabled)
            {
                if (MachineParams.Current.InlineMachine.LeftToRight)
                {
                    Holly.Log.HlLogger.Write("HOLLY AOI ====> PrepareBoardInformation test  MachineParams.Current.BlockSize:" + MachineParams.Current.BlockSize);
                    ExportSwitchProgramManager.Current.BlockSize = MachineParams.Current.BlockSize.ToPlugs();
                    Holly.Log.HlLogger.Write("HOLLY AOI ====> PrepareBoardInformation test ExportSwitchProgramManager.Current.BlockSize:" + ExportSwitchProgramManager.Current.BlockSize);
                    ExportSwitchProgramManager.Current.CurrentOrigin = boardOrigin.ToPlugs();
                    Holly.Log.HlLogger.Write("HOLLY AOI ====> PrepareBoardInformation test  boardOrigin:" + boardOrigin);
                }
                else
                {
                    ExportSwitchProgramManager.Current.BlockSize = MachineParams.Current.BlockSize.ToPlugs();
                    ExportSwitchProgramManager.Current.CurrentOrigin = (boardOrigin + MachineParams.Current.ReleaseBoardPosition).ToPlugs();
                }
                ExportSwitchProgramManager.Current.ResetProgramParams(boardSize, boardOrigin, boardThickness, snapshotType, snapshotRow, isSingleShuttle);
            }
            //20211028 分段检测补偿偏移量  追加 End

            // 20240709 环旭相机切程序_飞拍 【范克文】 追加 Start
            if (Customization.Current.CameraChangeProgramShopfloor.IsEnabled)
            {
                //拍照时如果_blockPath被改变会报超限错误，由于检测程式都是按照最大的路径拍照，所以无需每次都计算路径
                if (!CameraChangeProgramManager.Current.IsPrepareMeshBuffer || _isRequestOne)
                {
                    _blockPath = MachineOperations.CalculateBlockPath(boardSize, boardOrigin, snapshotType);
                }
            }
            else
                // 20240709 环旭相机切程序_飞拍 【范克文】 追加 End
                _blockPath = MachineOperations.CalculateBlockPath(boardSize, boardOrigin, snapshotType);

            // 20240507 环旭相机切程序 【刘红绅】 追加 Start
            Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachineSide.PrepareBoardInformation _blockPath.Rows:" + _blockPath.Rows);
            Holly.Log.HlLogger.Write("HOLLY AOI =====> ImageAcquisitionMachineSide.PrepareBoardInformation _blockPath.Columns:" + _blockPath.Columns);
            if (Customization.Current.CameraChangeProgramShopfloor.IsEnabled)
            {
                CameraChangeProgramManager.Current.Rows = _blockPath.Rows;
                CameraChangeProgramManager.Current.Cols = _blockPath.Columns;
            }
            // 20240507 环旭相机切程序 【刘红绅】 追加 End
            if (MachineParams.Current.ScanType == 0)
            {
                _snapshotPath = CalculateSnapshotPath(_blockPath, boardOrigin, boardSize, snapshotRow);
                if (snapshotRow != string.Empty)
                {
                    int index = 0;
                    foreach (BlockPath.BlockPoint pt in _blockPath.BlockPoints)
                    {
                        int y = pt.Row;
                        if (!snapshotRow.Contains((y + 1).ToString()))
                        {
                            continue;
                        }
                        _blockPath0[index++] = pt;
                    }
                }
                else
                {
                    _blockPath0 = _blockPath;
                }

                // 20220303 跳拍 追加 Start
                if (Customization.Current.IsJumpShotCaptureImage)
                {
                    ExportJumpShotEntireBoardInspectionManager.Current.SnapshotPath = _snapshotPath;
                }
                // 20220303 跳拍 追加 End

            }

            // 20240709 环旭相机切程序_飞拍 【范克文】 修改 Start
            //如果是环旭切程序，在进入自动运行时直接遍历所有程序板长板宽，申请最大内存，不在每次切程序时重新申请，不然会出现获取不到图像的异常
            //var meshBufferManager = MeshBufferManager.Current;
            //meshBufferManager.PrepareBuffer(_blockPath.Rows, _blockPath.Columns);

            using (MeshBufferManager.Current.Use())
            {
                if (Customization.Current.CameraChangeProgramShopfloor.IsEnabled)
                {
                    if (!CameraChangeProgramManager.Current.IsPrepareMeshBuffer || _isRequestOne)//手动采集也要申请最大内存，否则申请内存不一致，在检测时会有异常情况
                    {
                        CameraChangeProgramManager.Current.GuideProgramPath = MachineOperations.CalculateBlockPath(CameraChangeProgramManager.Current.GuideProgramBoardSize, boardOrigin, snapshotType);
                        CameraChangeProgramManager.Current.MaxProgramPath = MachineOperations.CalculateBlockPath(CameraChangeProgramManager.Current.MaxBoardSize, boardOrigin, snapshotType);
                        var meshBufferManager = MeshBufferManager.Current;
                        meshBufferManager.PrepareNewBuffer(CameraChangeProgramManager.Current.MaxProgramPath.Rows, CameraChangeProgramManager.Current.MaxProgramPath.Columns);
                        CameraChangeProgramManager.Current.IsPrepareMeshBuffer = true;
                    }
                }
                else
                {
                    var meshBufferManager = MeshBufferManager.Current;
                    meshBufferManager.PrepareNewBuffer(_blockPath.Rows, _blockPath.Columns);
                }
            }

            // 20240709 环旭相机切程序_飞拍 【范克文】 修改 End

            DigitizerCalibrationManager dcm = App.Current.GetService<DigitizerCalibrationManager>();
            dcm.BoardThickness = boardThickness;
        }

        //ITaskResult PrepareMachineAndDigitizer(IProgressListener<int, string> progressListener)
        //{
        //    return PrepareMachineAndDigitizer(false, progressListener);
        //}

        //void PrepareMachineAndDigitizer_(bool forceInitialzieMachine, IProgressListener<int, string> progressListener)
        //{
        //    Debug.Assert(progressListener != null);

        //    Machine m = App.Current.GetService<Machine>();

        //    IBatchOperation prepareOp = m.CreateBatchOperation();

        //    if (!m.IsConnected)
        //    {
        //        m.Update();
        //    }

        //    if (m.IsLost || forceInitialzieMachine)
        //    {
        //        prepareOp.InitializeMachine();
        //        prepareOp.ReturnZeroPoint();
        //        prepareOp.SmartLocate(Length2.Zero, MachineParams.Current.ReleaseBoardPosition);
        //    }
        //    else
        //    {
        //        prepareOp.SmartLocate(m.GetCurrentPlugPosition(), MachineParams.Current.ReleaseBoardPosition.ToPlugs(), ushort2.Zero);
        //    }

        //    if (MachineParams.Current.ScanType == 0)
        //    {
        //        prepareOp.PreparePath(_blockPath);
        //    }

        //    IOperationResult opResult = prepareOp.Execute();

        //    ICamera digitizer = App.Current.GetService<ICamera>();

        //    if (!digitizer.IsOpened)
        //    {
        //        progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_InitializingDigitizer);
        //        digitizer.Open();
        //        progressListener.Complete();
        //    }
        //    digitizer.BufferCount = MachineParams.Current.BlockBufferSize;

        //    opResult.Wait();
        //}

        IOperationResult PrepareMachineAndDigitizer(bool forceInitialzieMachine, IProgressListener<int, string> progressListener)
        {
            Debug.Assert(progressListener != null);

            var m = App.Current.GetService<Machine>();
            m.Update();

            IOperationResult opResult = null;

            if (MachineParams.Current.IsInlineMode)
            {
                opResult = m.SmartReleaseBoard(this.GetOriginPosition(), forceInitialzieMachine);
            }
            else
            {
                opResult = m.SmartReleaseBoard(forceInitialzieMachine);

                // 20200805 离线机复位修改 追加 Start
                int i = 0;
                bool isShowErrorMsg = false;

                while (true)
                {
                    Holly.Log.HlLogger.Write("HOLLY AOI ============>ReleaseBoardCommand.OnExecute i = " + i);
                    // 20211119 SPI离线机 修改 Start
                    //bool ret = CentralControlPLCCommand.Current.IsLocateOK();

                    // 因为现在不使用网线去读写PLC状态，在当前位置一直会等待15s左右时间，所以暂时删除
                    break;
                    bool ret = false;
                    // 20211119 SPI离线机 修改 End
                    if (ret)
                    {
                        break;
                    }
                    else
                    {
                        if (i == 0)
                        {
                            m.SmartReleaseBoard(false);
                        }
                        else
                        {
                            isShowErrorMsg = true;
                        }
                    }

                    i = i + 1;

                    if (i >= 2)
                    {
                        break;
                    }
                }

                if (isShowErrorMsg)
                {
                    //System.Windows.MessageBox.Show("回松板位 异常");
                }
                // 20200805 离线机复位修改 追加 End
            }

            // 20230902 自动运行每次进板开关相机 【刘亚杰】 修改 Start
            //ICamera digitizer = App.Current.GetService<ICamera>();

            //if (!digitizer.IsOpened)
            //{
            //    progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_InitializingDigitizer);
            //    //progressListener.ReportProgress(0, 1, "MV_TEST:STEP 1 BEGIN");
            //    Holly.Log.HlLogger.Write("HOLLY AOI ============>Digitizer Open");
            //    int lRect = digitizer.OpenEx(true);
            //    //progressListener.ReportProgress(0, 1, "MV_TEST:STEP 1 [ERR CODE]:" + lRect);
            //    Holly.Log.HlLogger.Write("HOLLY AOI ============>Digitizer Open over");
            //    //progressListener.ReportProgress(0, 1, "MV_TEST:STEP 1 OVER");
            //    progressListener.Complete();
            //}
            //digitizer.BufferCount = MachineParams.Current.BlockBufferSize * 2;

            // 如果不需要每次进板打开相机，并且不是自动运行
            if (!Customization.Current.IsOpenCameraEveryBoardIn)
            {
                ICamera digitizer = App.Current.GetService<ICamera>();

                if (!digitizer.IsOpened)
                {
                    progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_InitializingDigitizer);
                    //progressListener.ReportProgress(0, 1, "MV_TEST:STEP 1 BEGIN");
                    Holly.Log.HlLogger.Write("HOLLY AOI ============>Digitizer Open");
                    int lRect = digitizer.OpenEx(true);
                    //progressListener.ReportProgress(0, 1, "MV_TEST:STEP 1 [ERR CODE]:" + lRect);
                    Holly.Log.HlLogger.Write("HOLLY AOI ============>Digitizer Open over");
                    //progressListener.ReportProgress(0, 1, "MV_TEST:STEP 1 OVER");
                    progressListener.Complete();
                }
                digitizer.BufferCount = MachineParams.Current.BlockBufferSize * 2;
            }
            // 20230902 自动运行每次进板开关相机 【刘亚杰】 修改 End

            return opResult;
        }

        void OpenCamera()
        {
            ICamera digitizer = App.Current.GetService<ICamera>();

            if (!digitizer.IsOpened)
            {
                //progressListener.ReportProgress(0, 1, Lang.UI.UI_Label_InitializingDigitizer);
                //progressListener.ReportProgress(0, 1, "MV_TEST:STEP 1 BEGIN");
                Holly.Log.HlLogger.Write("HOLLY AOI ============>Digitizer Open");
                int lRect = digitizer.OpenEx(true);
                //progressListener.ReportProgress(0, 1, "MV_TEST:STEP 1 [ERR CODE]:" + lRect);
                Holly.Log.HlLogger.Write("HOLLY AOI ============>Digitizer Open over");
                //progressListener.ReportProgress(0, 1, "MV_TEST:STEP 1 OVER");
                //progressListener.Complete();
            }
            digitizer.BufferCount = MachineParams.Current.BlockBufferSize * 2;
        }

        void Unprepare()
        {
            try
            {
                ICamera digitizer = App.Current.GetService<ICamera>();
                if (digitizer == null)
                    Holly.Log.HlLogger.Write("Holly AOI ====> digitizer == null");

                if (digitizer.IsOpened)
                {
                    digitizer.Close();
                }
            }
            catch
            {
                Debug.Assert(false);
            }
        }

        public Task RequestOne(Length2 boardSize, Length2 boardOrigin, Length boardThickness, string snapshotRow, bool isSingleShuttle, IProgressListener<int, string> progressListener)
        {
            ushort snapshotType = (ushort)MachineParams.Current.ForceLightingMode;
            if (snapshotType != 1 && snapshotType != 2)
            {
                snapshotType = 3;
            }
            var m = App.Current.GetService<Machine>();
            m.SetSnapshotDelay();
            return AutoRun(boardSize, boardOrigin, boardThickness, snapshotType, snapshotRow, isSingleShuttle, true);
        }


        //public void ClearRequests()
        //{
        //    while (_requestQueue.Count > 0)
        //    {
        //        _requestQueue.Dequeue().Cancel();
        //    }
        //}

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion
    }

}
